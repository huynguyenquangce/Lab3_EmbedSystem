
Bai3_Lcd_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005804  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004344  0800598c  0800598c  0000698c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cd0  08009cd0  0000b030  2**0
                  CONTENTS
  4 .ARM          00000008  08009cd0  08009cd0  0000acd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cd8  08009cd8  0000b030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cd8  08009cd8  0000acd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cdc  08009cdc  0000acdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08009ce0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b030  2**0
                  CONTENTS
 10 .bss          00000228  20000030  20000030  0000b030  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000258  20000258  0000b030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b030  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f4fe  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cbf  00000000  00000000  0001a55e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f28  00000000  00000000  0001d220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b81  00000000  00000000  0001e148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b93  00000000  00000000  0001ecc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000135d4  00000000  00000000  0004185c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce128  00000000  00000000  00054e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00122f58  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e44  00000000  00000000  00122f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00126de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005974 	.word	0x08005974

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	08005974 	.word	0x08005974

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b96a 	b.w	8000c90 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	460c      	mov	r4, r1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d14e      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e0:	4694      	mov	ip, r2
 80009e2:	458c      	cmp	ip, r1
 80009e4:	4686      	mov	lr, r0
 80009e6:	fab2 f282 	clz	r2, r2
 80009ea:	d962      	bls.n	8000ab2 <__udivmoddi4+0xde>
 80009ec:	b14a      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009ee:	f1c2 0320 	rsb	r3, r2, #32
 80009f2:	4091      	lsls	r1, r2
 80009f4:	fa20 f303 	lsr.w	r3, r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	4319      	orrs	r1, r3
 80009fe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a06:	fa1f f68c 	uxth.w	r6, ip
 8000a0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a12:	fb07 1114 	mls	r1, r7, r4, r1
 8000a16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a1a:	fb04 f106 	mul.w	r1, r4, r6
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a2a:	f080 8112 	bcs.w	8000c52 <__udivmoddi4+0x27e>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 810f 	bls.w	8000c52 <__udivmoddi4+0x27e>
 8000a34:	3c02      	subs	r4, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a59      	subs	r1, r3, r1
 8000a3a:	fa1f f38e 	uxth.w	r3, lr
 8000a3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a42:	fb07 1110 	mls	r1, r7, r0, r1
 8000a46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a4a:	fb00 f606 	mul.w	r6, r0, r6
 8000a4e:	429e      	cmp	r6, r3
 8000a50:	d90a      	bls.n	8000a68 <__udivmoddi4+0x94>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a5a:	f080 80fc 	bcs.w	8000c56 <__udivmoddi4+0x282>
 8000a5e:	429e      	cmp	r6, r3
 8000a60:	f240 80f9 	bls.w	8000c56 <__udivmoddi4+0x282>
 8000a64:	4463      	add	r3, ip
 8000a66:	3802      	subs	r0, #2
 8000a68:	1b9b      	subs	r3, r3, r6
 8000a6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a6e:	2100      	movs	r1, #0
 8000a70:	b11d      	cbz	r5, 8000a7a <__udivmoddi4+0xa6>
 8000a72:	40d3      	lsrs	r3, r2
 8000a74:	2200      	movs	r2, #0
 8000a76:	e9c5 3200 	strd	r3, r2, [r5]
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d905      	bls.n	8000a8e <__udivmoddi4+0xba>
 8000a82:	b10d      	cbz	r5, 8000a88 <__udivmoddi4+0xb4>
 8000a84:	e9c5 0100 	strd	r0, r1, [r5]
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4608      	mov	r0, r1
 8000a8c:	e7f5      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000a8e:	fab3 f183 	clz	r1, r3
 8000a92:	2900      	cmp	r1, #0
 8000a94:	d146      	bne.n	8000b24 <__udivmoddi4+0x150>
 8000a96:	42a3      	cmp	r3, r4
 8000a98:	d302      	bcc.n	8000aa0 <__udivmoddi4+0xcc>
 8000a9a:	4290      	cmp	r0, r2
 8000a9c:	f0c0 80f0 	bcc.w	8000c80 <__udivmoddi4+0x2ac>
 8000aa0:	1a86      	subs	r6, r0, r2
 8000aa2:	eb64 0303 	sbc.w	r3, r4, r3
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	2d00      	cmp	r5, #0
 8000aaa:	d0e6      	beq.n	8000a7a <__udivmoddi4+0xa6>
 8000aac:	e9c5 6300 	strd	r6, r3, [r5]
 8000ab0:	e7e3      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000ab2:	2a00      	cmp	r2, #0
 8000ab4:	f040 8090 	bne.w	8000bd8 <__udivmoddi4+0x204>
 8000ab8:	eba1 040c 	sub.w	r4, r1, ip
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	fa1f f78c 	uxth.w	r7, ip
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ace:	fb08 4416 	mls	r4, r8, r6, r4
 8000ad2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ad6:	fb07 f006 	mul.w	r0, r7, r6
 8000ada:	4298      	cmp	r0, r3
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0x11c>
 8000ade:	eb1c 0303 	adds.w	r3, ip, r3
 8000ae2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x11a>
 8000ae8:	4298      	cmp	r0, r3
 8000aea:	f200 80cd 	bhi.w	8000c88 <__udivmoddi4+0x2b4>
 8000aee:	4626      	mov	r6, r4
 8000af0:	1a1c      	subs	r4, r3, r0
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000afa:	fb08 4410 	mls	r4, r8, r0, r4
 8000afe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b02:	fb00 f707 	mul.w	r7, r0, r7
 8000b06:	429f      	cmp	r7, r3
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x148>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b12:	d202      	bcs.n	8000b1a <__udivmoddi4+0x146>
 8000b14:	429f      	cmp	r7, r3
 8000b16:	f200 80b0 	bhi.w	8000c7a <__udivmoddi4+0x2a6>
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	1bdb      	subs	r3, r3, r7
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	e7a5      	b.n	8000a70 <__udivmoddi4+0x9c>
 8000b24:	f1c1 0620 	rsb	r6, r1, #32
 8000b28:	408b      	lsls	r3, r1
 8000b2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b2e:	431f      	orrs	r7, r3
 8000b30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b34:	fa04 f301 	lsl.w	r3, r4, r1
 8000b38:	ea43 030c 	orr.w	r3, r3, ip
 8000b3c:	40f4      	lsrs	r4, r6
 8000b3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b42:	0c38      	lsrs	r0, r7, #16
 8000b44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b48:	fbb4 fef0 	udiv	lr, r4, r0
 8000b4c:	fa1f fc87 	uxth.w	ip, r7
 8000b50:	fb00 441e 	mls	r4, r0, lr, r4
 8000b54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b58:	fb0e f90c 	mul.w	r9, lr, ip
 8000b5c:	45a1      	cmp	r9, r4
 8000b5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b62:	d90a      	bls.n	8000b7a <__udivmoddi4+0x1a6>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b6a:	f080 8084 	bcs.w	8000c76 <__udivmoddi4+0x2a2>
 8000b6e:	45a1      	cmp	r9, r4
 8000b70:	f240 8081 	bls.w	8000c76 <__udivmoddi4+0x2a2>
 8000b74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b78:	443c      	add	r4, r7
 8000b7a:	eba4 0409 	sub.w	r4, r4, r9
 8000b7e:	fa1f f983 	uxth.w	r9, r3
 8000b82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b86:	fb00 4413 	mls	r4, r0, r3, r4
 8000b8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b92:	45a4      	cmp	ip, r4
 8000b94:	d907      	bls.n	8000ba6 <__udivmoddi4+0x1d2>
 8000b96:	193c      	adds	r4, r7, r4
 8000b98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b9c:	d267      	bcs.n	8000c6e <__udivmoddi4+0x29a>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	d965      	bls.n	8000c6e <__udivmoddi4+0x29a>
 8000ba2:	3b02      	subs	r3, #2
 8000ba4:	443c      	add	r4, r7
 8000ba6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000baa:	fba0 9302 	umull	r9, r3, r0, r2
 8000bae:	eba4 040c 	sub.w	r4, r4, ip
 8000bb2:	429c      	cmp	r4, r3
 8000bb4:	46ce      	mov	lr, r9
 8000bb6:	469c      	mov	ip, r3
 8000bb8:	d351      	bcc.n	8000c5e <__udivmoddi4+0x28a>
 8000bba:	d04e      	beq.n	8000c5a <__udivmoddi4+0x286>
 8000bbc:	b155      	cbz	r5, 8000bd4 <__udivmoddi4+0x200>
 8000bbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000bc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000bc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bca:	40cb      	lsrs	r3, r1
 8000bcc:	431e      	orrs	r6, r3
 8000bce:	40cc      	lsrs	r4, r1
 8000bd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	e750      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000bd8:	f1c2 0320 	rsb	r3, r2, #32
 8000bdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000be0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be4:	fa24 f303 	lsr.w	r3, r4, r3
 8000be8:	4094      	lsls	r4, r2
 8000bea:	430c      	orrs	r4, r1
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bf4:	fa1f f78c 	uxth.w	r7, ip
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000c00:	0c23      	lsrs	r3, r4, #16
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb00 f107 	mul.w	r1, r0, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x24c>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c16:	d22c      	bcs.n	8000c72 <__udivmoddi4+0x29e>
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d92a      	bls.n	8000c72 <__udivmoddi4+0x29e>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	4463      	add	r3, ip
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c28:	fb08 3311 	mls	r3, r8, r1, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb01 f307 	mul.w	r3, r1, r7
 8000c34:	42a3      	cmp	r3, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x276>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c40:	d213      	bcs.n	8000c6a <__udivmoddi4+0x296>
 8000c42:	42a3      	cmp	r3, r4
 8000c44:	d911      	bls.n	8000c6a <__udivmoddi4+0x296>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4464      	add	r4, ip
 8000c4a:	1ae4      	subs	r4, r4, r3
 8000c4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c50:	e739      	b.n	8000ac6 <__udivmoddi4+0xf2>
 8000c52:	4604      	mov	r4, r0
 8000c54:	e6f0      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c56:	4608      	mov	r0, r1
 8000c58:	e706      	b.n	8000a68 <__udivmoddi4+0x94>
 8000c5a:	45c8      	cmp	r8, r9
 8000c5c:	d2ae      	bcs.n	8000bbc <__udivmoddi4+0x1e8>
 8000c5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c66:	3801      	subs	r0, #1
 8000c68:	e7a8      	b.n	8000bbc <__udivmoddi4+0x1e8>
 8000c6a:	4631      	mov	r1, r6
 8000c6c:	e7ed      	b.n	8000c4a <__udivmoddi4+0x276>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	e799      	b.n	8000ba6 <__udivmoddi4+0x1d2>
 8000c72:	4630      	mov	r0, r6
 8000c74:	e7d4      	b.n	8000c20 <__udivmoddi4+0x24c>
 8000c76:	46d6      	mov	lr, sl
 8000c78:	e77f      	b.n	8000b7a <__udivmoddi4+0x1a6>
 8000c7a:	4463      	add	r3, ip
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	e74d      	b.n	8000b1c <__udivmoddi4+0x148>
 8000c80:	4606      	mov	r6, r0
 8000c82:	4623      	mov	r3, r4
 8000c84:	4608      	mov	r0, r1
 8000c86:	e70f      	b.n	8000aa8 <__udivmoddi4+0xd4>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	e730      	b.n	8000af0 <__udivmoddi4+0x11c>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_idiv0>:
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <button_init>:
 * @brief  Init matrix button
 * @param  None
 * @retval None
 */
void button_init()
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2108      	movs	r1, #8
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <button_init+0x14>)
 8000c9e:	f002 ff9b 	bl	8003bd8 <HAL_GPIO_WritePin>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40020c00 	.word	0x40020c00

08000cac <button_Scan>:
 * @param  None
 * @note  	Call every 50ms
 * @retval None
 */
void button_Scan()
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2108      	movs	r1, #8
 8000cb6:	482f      	ldr	r0, [pc, #188]	@ (8000d74 <button_Scan+0xc8>)
 8000cb8:	f002 ff8e 	bl	8003bd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	482c      	ldr	r0, [pc, #176]	@ (8000d74 <button_Scan+0xc8>)
 8000cc2:	f002 ff89 	bl	8003bd8 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void *)&spi_button, 2, 10);
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	2202      	movs	r2, #2
 8000cca:	492b      	ldr	r1, [pc, #172]	@ (8000d78 <button_Scan+0xcc>)
 8000ccc:	482b      	ldr	r0, [pc, #172]	@ (8000d7c <button_Scan+0xd0>)
 8000cce:	f003 fc8a 	bl	80045e6 <HAL_SPI_Receive>
	int button_index = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
	uint16_t mask = 0x8000;
 8000cd6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cda:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	e03f      	b.n	8000d62 <button_Scan+0xb6>
	{
		if (i >= 0 && i <= 3)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db06      	blt.n	8000cf6 <button_Scan+0x4a>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	dc03      	bgt.n	8000cf6 <button_Scan+0x4a>
		{
			button_index = i + 4;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3304      	adds	r3, #4
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	e018      	b.n	8000d28 <button_Scan+0x7c>
		}
		else if (i >= 4 && i <= 7)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	dd07      	ble.n	8000d0c <button_Scan+0x60>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b07      	cmp	r3, #7
 8000d00:	dc04      	bgt.n	8000d0c <button_Scan+0x60>
		{
			button_index = 7 - i;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f1c3 0307 	rsb	r3, r3, #7
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	e00d      	b.n	8000d28 <button_Scan+0x7c>
		}
		else if (i >= 8 && i <= 11)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b07      	cmp	r3, #7
 8000d10:	dd06      	ble.n	8000d20 <button_Scan+0x74>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0b      	cmp	r3, #11
 8000d16:	dc03      	bgt.n	8000d20 <button_Scan+0x74>
		{
			button_index = i + 4;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3304      	adds	r3, #4
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	e003      	b.n	8000d28 <button_Scan+0x7c>
		}
		else
		{
			button_index = 23 - i;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f1c3 0317 	rsb	r3, r3, #23
 8000d26:	60fb      	str	r3, [r7, #12]
		}
		if (spi_button & mask)
 8000d28:	4b13      	ldr	r3, [pc, #76]	@ (8000d78 <button_Scan+0xcc>)
 8000d2a:	881a      	ldrh	r2, [r3, #0]
 8000d2c:	897b      	ldrh	r3, [r7, #10]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d005      	beq.n	8000d42 <button_Scan+0x96>
			button_count[button_index] = 0;
 8000d36:	4a12      	ldr	r2, [pc, #72]	@ (8000d80 <button_Scan+0xd4>)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d40:	e009      	b.n	8000d56 <button_Scan+0xaa>
		else
			button_count[button_index]++;
 8000d42:	4a0f      	ldr	r2, [pc, #60]	@ (8000d80 <button_Scan+0xd4>)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	b299      	uxth	r1, r3
 8000d4e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d80 <button_Scan+0xd4>)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 8000d56:	897b      	ldrh	r3, [r7, #10]
 8000d58:	085b      	lsrs	r3, r3, #1
 8000d5a:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	607b      	str	r3, [r7, #4]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	ddbc      	ble.n	8000ce2 <button_Scan+0x36>
	}
}
 8000d68:	bf00      	nop
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40020c00 	.word	0x40020c00
 8000d78:	2000006c 	.word	0x2000006c
 8000d7c:	200001b4 	.word	0x200001b4
 8000d80:	2000004c 	.word	0x2000004c

08000d84 <is_button_pressed>:
 * @param  id - id of button [0...15]
 * @retval 1: button is pressed
 * 		0: invalid para OR button is not pressed
 */
bool is_button_pressed(uint8_t id)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
	if (id > 16)
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	2b10      	cmp	r3, #16
 8000d92:	d901      	bls.n	8000d98 <is_button_pressed+0x14>
		return 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	e008      	b.n	8000daa <is_button_pressed+0x26>
	return button_count[id] == 1;
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	4a07      	ldr	r2, [pc, #28]	@ (8000db8 <is_button_pressed+0x34>)
 8000d9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	bf0c      	ite	eq
 8000da4:	2301      	moveq	r3, #1
 8000da6:	2300      	movne	r3, #0
 8000da8:	b2db      	uxtb	r3, r3
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	2000004c 	.word	0x2000004c

08000dbc <is_button_long_pressed>:
 * @param  id - id of button [0...15]
 * @retval 1: button is long pressed
 * 		0: invalid para OR button is not long pressed
 */
bool is_button_long_pressed(uint8_t id)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
	if (id > 16)
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	2b10      	cmp	r3, #16
 8000dca:	d901      	bls.n	8000dd0 <is_button_long_pressed+0x14>
		return 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	e00a      	b.n	8000de6 <is_button_long_pressed+0x2a>
	if (button_count[id] < time_value)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	4a08      	ldr	r2, [pc, #32]	@ (8000df4 <is_button_long_pressed+0x38>)
 8000dd4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000dd8:	4b07      	ldr	r3, [pc, #28]	@ (8000df8 <is_button_long_pressed+0x3c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d201      	bcs.n	8000de4 <is_button_long_pressed+0x28>
	{
		return 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	e000      	b.n	8000de6 <is_button_long_pressed+0x2a>
	}
	return 1;
 8000de4:	2301      	movs	r3, #1
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	2000004c 	.word	0x2000004c
 8000df8:	20000000 	.word	0x20000000

08000dfc <fsm_led>:


/*@brief:	state machine to blink led in 2Hz
 * @para:	none
 * @retval:	none*/
void fsm_led(void) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	switch (led_st) {
 8000e00:	4b35      	ldr	r3, [pc, #212]	@ (8000ed8 <fsm_led+0xdc>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d002      	beq.n	8000e0e <fsm_led+0x12>
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d044      	beq.n	8000e96 <fsm_led+0x9a>
		if (!is_timer_on(3)) {
			led_st = ON;
			set_timer(3, TOGGLE_TIME);
		}
	}
}
 8000e0c:	e061      	b.n	8000ed2 <fsm_led+0xd6>
		switch (light_st) {
 8000e0e:	4b33      	ldr	r3, [pc, #204]	@ (8000edc <fsm_led+0xe0>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d020      	beq.n	8000e58 <fsm_led+0x5c>
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	dc2b      	bgt.n	8000e72 <fsm_led+0x76>
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d002      	beq.n	8000e24 <fsm_led+0x28>
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d00d      	beq.n	8000e3e <fsm_led+0x42>
			break;
 8000e22:	e026      	b.n	8000e72 <fsm_led+0x76>
			control_traffic_light(0, 1, 0, 0);
 8000e24:	2300      	movs	r3, #0
 8000e26:	2200      	movs	r2, #0
 8000e28:	2101      	movs	r1, #1
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f001 ff48 	bl	8002cc0 <control_traffic_light>
			control_traffic_light(1, 1, 0, 0);
 8000e30:	2300      	movs	r3, #0
 8000e32:	2200      	movs	r2, #0
 8000e34:	2101      	movs	r1, #1
 8000e36:	2001      	movs	r0, #1
 8000e38:	f001 ff42 	bl	8002cc0 <control_traffic_light>
			break;
 8000e3c:	e01a      	b.n	8000e74 <fsm_led+0x78>
			control_traffic_light(0, 0, 1, 0);
 8000e3e:	2300      	movs	r3, #0
 8000e40:	2201      	movs	r2, #1
 8000e42:	2100      	movs	r1, #0
 8000e44:	2000      	movs	r0, #0
 8000e46:	f001 ff3b 	bl	8002cc0 <control_traffic_light>
			control_traffic_light(1, 0, 1, 0);
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2001      	movs	r0, #1
 8000e52:	f001 ff35 	bl	8002cc0 <control_traffic_light>
			break;
 8000e56:	e00d      	b.n	8000e74 <fsm_led+0x78>
			control_traffic_light(0, 0, 0, 1);
 8000e58:	2301      	movs	r3, #1
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f001 ff2e 	bl	8002cc0 <control_traffic_light>
			control_traffic_light(1, 0, 0, 1);
 8000e64:	2301      	movs	r3, #1
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f001 ff28 	bl	8002cc0 <control_traffic_light>
			break;
 8000e70:	e000      	b.n	8000e74 <fsm_led+0x78>
			break;
 8000e72:	bf00      	nop
		if (!is_timer_on(3)) {
 8000e74:	2003      	movs	r0, #3
 8000e76:	f002 f9cd 	bl	8003214 <is_timer_on>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	f083 0301 	eor.w	r3, r3, #1
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d024      	beq.n	8000ed0 <fsm_led+0xd4>
			led_st = OFF;
 8000e86:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <fsm_led+0xdc>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
			set_timer(3, TOGGLE_TIME);
 8000e8c:	21fa      	movs	r1, #250	@ 0xfa
 8000e8e:	2003      	movs	r0, #3
 8000e90:	f002 f962 	bl	8003158 <set_timer>
		break;
 8000e94:	e01c      	b.n	8000ed0 <fsm_led+0xd4>
		control_traffic_light(0, 0, 0, 0);
 8000e96:	2300      	movs	r3, #0
 8000e98:	2200      	movs	r2, #0
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f001 ff0f 	bl	8002cc0 <control_traffic_light>
		control_traffic_light(1, 0, 0, 0);
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f001 ff09 	bl	8002cc0 <control_traffic_light>
		if (!is_timer_on(3)) {
 8000eae:	2003      	movs	r0, #3
 8000eb0:	f002 f9b0 	bl	8003214 <is_timer_on>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	f083 0301 	eor.w	r3, r3, #1
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d008      	beq.n	8000ed2 <fsm_led+0xd6>
			led_st = ON;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <fsm_led+0xdc>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
			set_timer(3, TOGGLE_TIME);
 8000ec6:	21fa      	movs	r1, #250	@ 0xfa
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f002 f945 	bl	8003158 <set_timer>
}
 8000ece:	e000      	b.n	8000ed2 <fsm_led+0xd6>
		break;
 8000ed0:	bf00      	nop
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000071 	.word	0x20000071
 8000edc:	2000006e 	.word	0x2000006e

08000ee0 <increase_value>:
/**
 * @brief  increase the time value based-on previous state (short-pressed)
 * @param  None
 * @retval None
 */
void increase_value(void) {
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
	if (light_pre_st == RED_ADJUSTMENT) {
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <increase_value+0x74>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d10c      	bne.n	8000f06 <increase_value+0x26>
		red_time_buffer++;
 8000eec:	4b1a      	ldr	r3, [pc, #104]	@ (8000f58 <increase_value+0x78>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	4a19      	ldr	r2, [pc, #100]	@ (8000f58 <increase_value+0x78>)
 8000ef4:	6013      	str	r3, [r2, #0]
		if (red_time_buffer >= 100) {
 8000ef6:	4b18      	ldr	r3, [pc, #96]	@ (8000f58 <increase_value+0x78>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b63      	cmp	r3, #99	@ 0x63
 8000efc:	d924      	bls.n	8000f48 <increase_value+0x68>
			red_time_buffer = 0;
 8000efe:	4b16      	ldr	r3, [pc, #88]	@ (8000f58 <increase_value+0x78>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
		green_time_buffer++;
		if (green_time_buffer >= 100) {
			green_time_buffer = 0;
		}
	}
}
 8000f04:	e020      	b.n	8000f48 <increase_value+0x68>
	} else if (light_pre_st == YELLOW_ADJUSTMENT) {
 8000f06:	4b13      	ldr	r3, [pc, #76]	@ (8000f54 <increase_value+0x74>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d10c      	bne.n	8000f28 <increase_value+0x48>
		yellow_time_buffer++;
 8000f0e:	4b13      	ldr	r3, [pc, #76]	@ (8000f5c <increase_value+0x7c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	3301      	adds	r3, #1
 8000f14:	4a11      	ldr	r2, [pc, #68]	@ (8000f5c <increase_value+0x7c>)
 8000f16:	6013      	str	r3, [r2, #0]
		if (yellow_time_buffer >= 100) {
 8000f18:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <increase_value+0x7c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b63      	cmp	r3, #99	@ 0x63
 8000f1e:	d913      	bls.n	8000f48 <increase_value+0x68>
			yellow_time_buffer = 0;
 8000f20:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <increase_value+0x7c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
}
 8000f26:	e00f      	b.n	8000f48 <increase_value+0x68>
	} else if (light_pre_st == GREEN_ADJUSTMENT) {
 8000f28:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <increase_value+0x74>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d10b      	bne.n	8000f48 <increase_value+0x68>
		green_time_buffer++;
 8000f30:	4b0b      	ldr	r3, [pc, #44]	@ (8000f60 <increase_value+0x80>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	3301      	adds	r3, #1
 8000f36:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <increase_value+0x80>)
 8000f38:	6013      	str	r3, [r2, #0]
		if (green_time_buffer >= 100) {
 8000f3a:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <increase_value+0x80>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b63      	cmp	r3, #99	@ 0x63
 8000f40:	d902      	bls.n	8000f48 <increase_value+0x68>
			green_time_buffer = 0;
 8000f42:	4b07      	ldr	r3, [pc, #28]	@ (8000f60 <increase_value+0x80>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	2000006f 	.word	0x2000006f
 8000f58:	20000010 	.word	0x20000010
 8000f5c:	20000018 	.word	0x20000018
 8000f60:	20000014 	.word	0x20000014

08000f64 <button0_fsm>:
 * @brief:	mode button fsm - 2 states
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button0_fsm(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	switch (button_st[0]) {
 8000f68:	4b28      	ldr	r3, [pc, #160]	@ (800100c <button0_fsm+0xa8>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <button0_fsm+0x12>
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d036      	beq.n	8000fe2 <button0_fsm+0x7e>
 8000f74:	e044      	b.n	8001000 <button0_fsm+0x9c>
	case release:
		if (is_button_pressed(0) == 1) {
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff ff04 	bl	8000d84 <is_button_pressed>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d027      	beq.n	8000fd2 <button0_fsm+0x6e>
			// to do
			light_pre_st = light_st;
 8000f82:	4b23      	ldr	r3, [pc, #140]	@ (8001010 <button0_fsm+0xac>)
 8000f84:	781a      	ldrb	r2, [r3, #0]
 8000f86:	4b23      	ldr	r3, [pc, #140]	@ (8001014 <button0_fsm+0xb0>)
 8000f88:	701a      	strb	r2, [r3, #0]
			switch (light_st) {
 8000f8a:	4b21      	ldr	r3, [pc, #132]	@ (8001010 <button0_fsm+0xac>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d81a      	bhi.n	8000fc8 <button0_fsm+0x64>
 8000f92:	a201      	add	r2, pc, #4	@ (adr r2, 8000f98 <button0_fsm+0x34>)
 8000f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f98:	08000fa9 	.word	0x08000fa9
 8000f9c:	08000fb1 	.word	0x08000fb1
 8000fa0:	08000fb9 	.word	0x08000fb9
 8000fa4:	08000fc1 	.word	0x08000fc1
			case TRAFFIC_LIGHT:
				light_st = RED_ADJUSTMENT;
 8000fa8:	4b19      	ldr	r3, [pc, #100]	@ (8001010 <button0_fsm+0xac>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	701a      	strb	r2, [r3, #0]
				break;
 8000fae:	e00c      	b.n	8000fca <button0_fsm+0x66>
			case RED_ADJUSTMENT:
				light_st = YELLOW_ADJUSTMENT;
 8000fb0:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <button0_fsm+0xac>)
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	701a      	strb	r2, [r3, #0]
				break;
 8000fb6:	e008      	b.n	8000fca <button0_fsm+0x66>
			case YELLOW_ADJUSTMENT:
				light_st = GREEN_ADJUSTMENT;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <button0_fsm+0xac>)
 8000fba:	2203      	movs	r2, #3
 8000fbc:	701a      	strb	r2, [r3, #0]
				break;
 8000fbe:	e004      	b.n	8000fca <button0_fsm+0x66>
			case GREEN_ADJUSTMENT:
				light_st = TRAFFIC_LIGHT;
 8000fc0:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <button0_fsm+0xac>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	701a      	strb	r2, [r3, #0]
				break;
 8000fc6:	e000      	b.n	8000fca <button0_fsm+0x66>
			default:
				break;
 8000fc8:	bf00      	nop
			}
			button_st[0] = pressed;
 8000fca:	4b10      	ldr	r3, [pc, #64]	@ (800100c <button0_fsm+0xa8>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]
		} else if (is_button_pressed(0) == ERROR)
			return 0;
		break;
 8000fd0:	e018      	b.n	8001004 <button0_fsm+0xa0>
		} else if (is_button_pressed(0) == ERROR)
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f7ff fed6 	bl	8000d84 <is_button_pressed>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d012      	beq.n	8001004 <button0_fsm+0xa0>
			return 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e012      	b.n	8001008 <button0_fsm+0xa4>
	case pressed:
		if (!is_button_pressed(0)) {
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f7ff fece 	bl	8000d84 <is_button_pressed>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	f083 0301 	eor.w	r3, r3, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <button0_fsm+0x98>
			button_st[0] = release;
 8000ff4:	4b05      	ldr	r3, [pc, #20]	@ (800100c <button0_fsm+0xa8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	701a      	strb	r2, [r3, #0]
		} else {
			return 0;
		}
		break;
 8000ffa:	e004      	b.n	8001006 <button0_fsm+0xa2>
			return 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	e003      	b.n	8001008 <button0_fsm+0xa4>
	default:
		return 0;
 8001000:	2300      	movs	r3, #0
 8001002:	e001      	b.n	8001008 <button0_fsm+0xa4>
		break;
 8001004:	bf00      	nop
	}
	return 1;
 8001006:	2301      	movs	r3, #1
}
 8001008:	4618      	mov	r0, r3
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000074 	.word	0x20000074
 8001010:	2000006e 	.word	0x2000006e
 8001014:	2000006f 	.word	0x2000006f

08001018 <button2_fsm>:
 * @brief:	setting-value button fsm - 2 states
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button2_fsm(void) {
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	switch (button_st[2]) {
 800101c:	4b1a      	ldr	r3, [pc, #104]	@ (8001088 <button2_fsm+0x70>)
 800101e:	789b      	ldrb	r3, [r3, #2]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <button2_fsm+0x12>
 8001024:	2b01      	cmp	r3, #1
 8001026:	d019      	beq.n	800105c <button2_fsm+0x44>
 8001028:	e027      	b.n	800107a <button2_fsm+0x62>
	case release:
		if (is_button_pressed(2) == 1) {
 800102a:	2002      	movs	r0, #2
 800102c:	f7ff feaa 	bl	8000d84 <is_button_pressed>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00a      	beq.n	800104c <button2_fsm+0x34>
			// to do
			light_pre_st = light_st;
 8001036:	4b15      	ldr	r3, [pc, #84]	@ (800108c <button2_fsm+0x74>)
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	4b15      	ldr	r3, [pc, #84]	@ (8001090 <button2_fsm+0x78>)
 800103c:	701a      	strb	r2, [r3, #0]
			light_st = SET_VALUE;
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <button2_fsm+0x74>)
 8001040:	2204      	movs	r2, #4
 8001042:	701a      	strb	r2, [r3, #0]
			button_st[2] = pressed;
 8001044:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <button2_fsm+0x70>)
 8001046:	2201      	movs	r2, #1
 8001048:	709a      	strb	r2, [r3, #2]
		} else if (is_button_pressed(2) == ERROR)
			return 0;
		break;
 800104a:	e018      	b.n	800107e <button2_fsm+0x66>
		} else if (is_button_pressed(2) == ERROR)
 800104c:	2002      	movs	r0, #2
 800104e:	f7ff fe99 	bl	8000d84 <is_button_pressed>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d012      	beq.n	800107e <button2_fsm+0x66>
			return 0;
 8001058:	2300      	movs	r3, #0
 800105a:	e012      	b.n	8001082 <button2_fsm+0x6a>
	case pressed:
		if (!is_button_pressed(2)) {
 800105c:	2002      	movs	r0, #2
 800105e:	f7ff fe91 	bl	8000d84 <is_button_pressed>
 8001062:	4603      	mov	r3, r0
 8001064:	f083 0301 	eor.w	r3, r3, #1
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <button2_fsm+0x5e>
			button_st[2] = release;
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <button2_fsm+0x70>)
 8001070:	2200      	movs	r2, #0
 8001072:	709a      	strb	r2, [r3, #2]
		} else {
			return 0;
		}
		break;
 8001074:	e004      	b.n	8001080 <button2_fsm+0x68>
			return 0;
 8001076:	2300      	movs	r3, #0
 8001078:	e003      	b.n	8001082 <button2_fsm+0x6a>
	default:
		return 0;
 800107a:	2300      	movs	r3, #0
 800107c:	e001      	b.n	8001082 <button2_fsm+0x6a>
		break;
 800107e:	bf00      	nop
		break;
	}
	return 1;
 8001080:	2301      	movs	r3, #1
}
 8001082:	4618      	mov	r0, r3
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000074 	.word	0x20000074
 800108c:	2000006e 	.word	0x2000006e
 8001090:	2000006f 	.word	0x2000006f

08001094 <button1_fsm>:
 * @brief:	increasing-value button fsm - 3 states
 * @para:	none
 * @retval:	1 - successful
 * 			0 - fail
 * */
bool button1_fsm(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	switch (button_st[1]) {
 8001098:	4b31      	ldr	r3, [pc, #196]	@ (8001160 <button1_fsm+0xcc>)
 800109a:	785b      	ldrb	r3, [r3, #1]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d038      	beq.n	8001112 <button1_fsm+0x7e>
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	dc55      	bgt.n	8001150 <button1_fsm+0xbc>
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <button1_fsm+0x1a>
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d019      	beq.n	80010e0 <button1_fsm+0x4c>
 80010ac:	e050      	b.n	8001150 <button1_fsm+0xbc>
	case release:
		if (is_button_pressed(1) == 1) {
 80010ae:	2001      	movs	r0, #1
 80010b0:	f7ff fe68 	bl	8000d84 <is_button_pressed>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00a      	beq.n	80010d0 <button1_fsm+0x3c>
			light_pre_st = light_st;
 80010ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001164 <button1_fsm+0xd0>)
 80010bc:	781a      	ldrb	r2, [r3, #0]
 80010be:	4b2a      	ldr	r3, [pc, #168]	@ (8001168 <button1_fsm+0xd4>)
 80010c0:	701a      	strb	r2, [r3, #0]
			light_st = INCREASE_BY_1;
 80010c2:	4b28      	ldr	r3, [pc, #160]	@ (8001164 <button1_fsm+0xd0>)
 80010c4:	2205      	movs	r2, #5
 80010c6:	701a      	strb	r2, [r3, #0]
			button_st[1] = pressed;
 80010c8:	4b25      	ldr	r3, [pc, #148]	@ (8001160 <button1_fsm+0xcc>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	705a      	strb	r2, [r3, #1]
		} else if (is_button_pressed(1) == ERROR)
			return 0;
		break;
 80010ce:	e041      	b.n	8001154 <button1_fsm+0xc0>
		} else if (is_button_pressed(1) == ERROR)
 80010d0:	2001      	movs	r0, #1
 80010d2:	f7ff fe57 	bl	8000d84 <is_button_pressed>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d03b      	beq.n	8001154 <button1_fsm+0xc0>
			return 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	e03d      	b.n	800115c <button1_fsm+0xc8>
	case pressed:
		if (!is_button_pressed(1)) {
 80010e0:	2001      	movs	r0, #1
 80010e2:	f7ff fe4f 	bl	8000d84 <is_button_pressed>
 80010e6:	4603      	mov	r3, r0
 80010e8:	f083 0301 	eor.w	r3, r3, #1
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <button1_fsm+0x66>
			button_st[1] = release;
 80010f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001160 <button1_fsm+0xcc>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	705a      	strb	r2, [r3, #1]
		} else if (is_button_long_pressed(1) == 1) {
			button_st[1] = long_pressed;
		} else {
			return 0;
		}
		break;
 80010f8:	e02f      	b.n	800115a <button1_fsm+0xc6>
		} else if (is_button_long_pressed(1) == 1) {
 80010fa:	2001      	movs	r0, #1
 80010fc:	f7ff fe5e 	bl	8000dbc <is_button_long_pressed>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <button1_fsm+0x7a>
			button_st[1] = long_pressed;
 8001106:	4b16      	ldr	r3, [pc, #88]	@ (8001160 <button1_fsm+0xcc>)
 8001108:	2202      	movs	r2, #2
 800110a:	705a      	strb	r2, [r3, #1]
		break;
 800110c:	e025      	b.n	800115a <button1_fsm+0xc6>
			return 0;
 800110e:	2300      	movs	r3, #0
 8001110:	e024      	b.n	800115c <button1_fsm+0xc8>
	case long_pressed:
		if (light_st != INCREASE_BY_1_OVER_TIME) {
 8001112:	4b14      	ldr	r3, [pc, #80]	@ (8001164 <button1_fsm+0xd0>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b06      	cmp	r3, #6
 8001118:	d006      	beq.n	8001128 <button1_fsm+0x94>
			light_pre_st = light_st;
 800111a:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <button1_fsm+0xd0>)
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <button1_fsm+0xd4>)
 8001120:	701a      	strb	r2, [r3, #0]
			light_st = INCREASE_BY_1_OVER_TIME;
 8001122:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <button1_fsm+0xd0>)
 8001124:	2206      	movs	r2, #6
 8001126:	701a      	strb	r2, [r3, #0]
		}
		if (!is_button_pressed(1)) {
 8001128:	2001      	movs	r0, #1
 800112a:	f7ff fe2b 	bl	8000d84 <is_button_pressed>
 800112e:	4603      	mov	r3, r0
 8001130:	f083 0301 	eor.w	r3, r3, #1
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00e      	beq.n	8001158 <button1_fsm+0xc4>
			light_st = light_pre_st;
 800113a:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <button1_fsm+0xd4>)
 800113c:	781a      	ldrb	r2, [r3, #0]
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <button1_fsm+0xd0>)
 8001140:	701a      	strb	r2, [r3, #0]
			light_pre_st = INCREASE_BY_1_OVER_TIME;
 8001142:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <button1_fsm+0xd4>)
 8001144:	2206      	movs	r2, #6
 8001146:	701a      	strb	r2, [r3, #0]
			button_st[1] = release;
 8001148:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <button1_fsm+0xcc>)
 800114a:	2200      	movs	r2, #0
 800114c:	705a      	strb	r2, [r3, #1]
		}
		break;
 800114e:	e003      	b.n	8001158 <button1_fsm+0xc4>
	default:
		return 0;
 8001150:	2300      	movs	r3, #0
 8001152:	e003      	b.n	800115c <button1_fsm+0xc8>
		break;
 8001154:	bf00      	nop
 8001156:	e000      	b.n	800115a <button1_fsm+0xc6>
		break;
 8001158:	bf00      	nop
		break;
	}
	return 1;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000074 	.word	0x20000074
 8001164:	2000006e 	.word	0x2000006e
 8001168:	2000006f 	.word	0x2000006f

0800116c <traffic_light_fsm>:

/*
 * @brief: 	finite state machine to control behavior of traffic light
 * @para:	none
 * @retval:	none*/
void traffic_light_fsm(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	update_led_buf(traffic_light_timer1, traffic_light_timer2, 1);
 8001170:	4b45      	ldr	r3, [pc, #276]	@ (8001288 <traffic_light_fsm+0x11c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a45      	ldr	r2, [pc, #276]	@ (800128c <traffic_light_fsm+0x120>)
 8001176:	6811      	ldr	r1, [r2, #0]
 8001178:	2201      	movs	r2, #1
 800117a:	4618      	mov	r0, r3
 800117c:	f001 fe64 	bl	8002e48 <update_led_buf>
	switch (tl_st) {
 8001180:	4b43      	ldr	r3, [pc, #268]	@ (8001290 <traffic_light_fsm+0x124>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b03      	cmp	r3, #3
 8001186:	d873      	bhi.n	8001270 <traffic_light_fsm+0x104>
 8001188:	a201      	add	r2, pc, #4	@ (adr r2, 8001190 <traffic_light_fsm+0x24>)
 800118a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118e:	bf00      	nop
 8001190:	080011a1 	.word	0x080011a1
 8001194:	080011d1 	.word	0x080011d1
 8001198:	08001209 	.word	0x08001209
 800119c:	08001239 	.word	0x08001239
	case RED_GREEN:
		control_traffic_light(0, 1, 0, 0);
 80011a0:	2300      	movs	r3, #0
 80011a2:	2200      	movs	r2, #0
 80011a4:	2101      	movs	r1, #1
 80011a6:	2000      	movs	r0, #0
 80011a8:	f001 fd8a 	bl	8002cc0 <control_traffic_light>
		control_traffic_light(1, 0, 0, 1);
 80011ac:	2301      	movs	r3, #1
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2001      	movs	r0, #1
 80011b4:	f001 fd84 	bl	8002cc0 <control_traffic_light>
		if (traffic_light_timer2 <= 0) {
 80011b8:	4b34      	ldr	r3, [pc, #208]	@ (800128c <traffic_light_fsm+0x120>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d159      	bne.n	8001274 <traffic_light_fsm+0x108>
			traffic_light_timer2 = yellow_time;
 80011c0:	4b34      	ldr	r3, [pc, #208]	@ (8001294 <traffic_light_fsm+0x128>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a31      	ldr	r2, [pc, #196]	@ (800128c <traffic_light_fsm+0x120>)
 80011c6:	6013      	str	r3, [r2, #0]
			tl_st = RED_YELLOW;
 80011c8:	4b31      	ldr	r3, [pc, #196]	@ (8001290 <traffic_light_fsm+0x124>)
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
		}
		break;
 80011ce:	e051      	b.n	8001274 <traffic_light_fsm+0x108>
	case RED_YELLOW:
		control_traffic_light(0, 1, 0, 0);
 80011d0:	2300      	movs	r3, #0
 80011d2:	2200      	movs	r2, #0
 80011d4:	2101      	movs	r1, #1
 80011d6:	2000      	movs	r0, #0
 80011d8:	f001 fd72 	bl	8002cc0 <control_traffic_light>
		control_traffic_light(1, 0, 1, 0);
 80011dc:	2300      	movs	r3, #0
 80011de:	2201      	movs	r2, #1
 80011e0:	2100      	movs	r1, #0
 80011e2:	2001      	movs	r0, #1
 80011e4:	f001 fd6c 	bl	8002cc0 <control_traffic_light>
		if (traffic_light_timer2 <= 0) {
 80011e8:	4b28      	ldr	r3, [pc, #160]	@ (800128c <traffic_light_fsm+0x120>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d143      	bne.n	8001278 <traffic_light_fsm+0x10c>
			traffic_light_timer1 = green_time;
 80011f0:	4b29      	ldr	r3, [pc, #164]	@ (8001298 <traffic_light_fsm+0x12c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a24      	ldr	r2, [pc, #144]	@ (8001288 <traffic_light_fsm+0x11c>)
 80011f6:	6013      	str	r3, [r2, #0]
			traffic_light_timer2 = red_time;
 80011f8:	4b28      	ldr	r3, [pc, #160]	@ (800129c <traffic_light_fsm+0x130>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a23      	ldr	r2, [pc, #140]	@ (800128c <traffic_light_fsm+0x120>)
 80011fe:	6013      	str	r3, [r2, #0]
			tl_st = GREEN_RED;
 8001200:	4b23      	ldr	r3, [pc, #140]	@ (8001290 <traffic_light_fsm+0x124>)
 8001202:	2202      	movs	r2, #2
 8001204:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001206:	e037      	b.n	8001278 <traffic_light_fsm+0x10c>
	case GREEN_RED:
		control_traffic_light(0, 0, 0, 1);
 8001208:	2301      	movs	r3, #1
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	2000      	movs	r0, #0
 8001210:	f001 fd56 	bl	8002cc0 <control_traffic_light>
		control_traffic_light(1, 1, 0, 0);
 8001214:	2300      	movs	r3, #0
 8001216:	2200      	movs	r2, #0
 8001218:	2101      	movs	r1, #1
 800121a:	2001      	movs	r0, #1
 800121c:	f001 fd50 	bl	8002cc0 <control_traffic_light>
		if (traffic_light_timer1 <= 0) {
 8001220:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <traffic_light_fsm+0x11c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d129      	bne.n	800127c <traffic_light_fsm+0x110>
			traffic_light_timer1 = yellow_time;
 8001228:	4b1a      	ldr	r3, [pc, #104]	@ (8001294 <traffic_light_fsm+0x128>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a16      	ldr	r2, [pc, #88]	@ (8001288 <traffic_light_fsm+0x11c>)
 800122e:	6013      	str	r3, [r2, #0]
			tl_st = YELLOW_RED;
 8001230:	4b17      	ldr	r3, [pc, #92]	@ (8001290 <traffic_light_fsm+0x124>)
 8001232:	2203      	movs	r2, #3
 8001234:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001236:	e021      	b.n	800127c <traffic_light_fsm+0x110>
	case YELLOW_RED:
		control_traffic_light(0, 0, 1, 0);
 8001238:	2300      	movs	r3, #0
 800123a:	2201      	movs	r2, #1
 800123c:	2100      	movs	r1, #0
 800123e:	2000      	movs	r0, #0
 8001240:	f001 fd3e 	bl	8002cc0 <control_traffic_light>
		control_traffic_light(1, 1, 0, 0);
 8001244:	2300      	movs	r3, #0
 8001246:	2200      	movs	r2, #0
 8001248:	2101      	movs	r1, #1
 800124a:	2001      	movs	r0, #1
 800124c:	f001 fd38 	bl	8002cc0 <control_traffic_light>
		if (traffic_light_timer1 <= 0) {
 8001250:	4b0d      	ldr	r3, [pc, #52]	@ (8001288 <traffic_light_fsm+0x11c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d113      	bne.n	8001280 <traffic_light_fsm+0x114>
			traffic_light_timer1 = red_time;
 8001258:	4b10      	ldr	r3, [pc, #64]	@ (800129c <traffic_light_fsm+0x130>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <traffic_light_fsm+0x11c>)
 800125e:	6013      	str	r3, [r2, #0]
			traffic_light_timer2 = green_time;
 8001260:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <traffic_light_fsm+0x12c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a09      	ldr	r2, [pc, #36]	@ (800128c <traffic_light_fsm+0x120>)
 8001266:	6013      	str	r3, [r2, #0]
			tl_st = RED_GREEN;
 8001268:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <traffic_light_fsm+0x124>)
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800126e:	e007      	b.n	8001280 <traffic_light_fsm+0x114>
	default:
		break;
 8001270:	bf00      	nop
 8001272:	e006      	b.n	8001282 <traffic_light_fsm+0x116>
		break;
 8001274:	bf00      	nop
 8001276:	e004      	b.n	8001282 <traffic_light_fsm+0x116>
		break;
 8001278:	bf00      	nop
 800127a:	e002      	b.n	8001282 <traffic_light_fsm+0x116>
		break;
 800127c:	bf00      	nop
 800127e:	e000      	b.n	8001282 <traffic_light_fsm+0x116>
		break;
 8001280:	bf00      	nop
	}
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000001c 	.word	0x2000001c
 800128c:	20000020 	.word	0x20000020
 8001290:	20000070 	.word	0x20000070
 8001294:	2000000c 	.word	0x2000000c
 8001298:	20000008 	.word	0x20000008
 800129c:	20000004 	.word	0x20000004

080012a0 <traffic_run>:
/*
 * @brief  Top-layer finite state machine
 * @param  None
 * @retval None
 */
void traffic_run(void) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af04      	add	r7, sp, #16
	switch (light_st) {
 80012a6:	4b99      	ldr	r3, [pc, #612]	@ (800150c <traffic_run+0x26c>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b06      	cmp	r3, #6
 80012ac:	f200 8164 	bhi.w	8001578 <traffic_run+0x2d8>
 80012b0:	a201      	add	r2, pc, #4	@ (adr r2, 80012b8 <traffic_run+0x18>)
 80012b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b6:	bf00      	nop
 80012b8:	080012d5 	.word	0x080012d5
 80012bc:	080013bb 	.word	0x080013bb
 80012c0:	080013fd 	.word	0x080013fd
 80012c4:	0800143f 	.word	0x0800143f
 80012c8:	08001481 	.word	0x08001481
 80012cc:	080014c5 	.word	0x080014c5
 80012d0:	080014d9 	.word	0x080014d9
	case TRAFFIC_LIGHT:
		if (red_time != green_time + yellow_time) {
 80012d4:	4b8e      	ldr	r3, [pc, #568]	@ (8001510 <traffic_run+0x270>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b8e      	ldr	r3, [pc, #568]	@ (8001514 <traffic_run+0x274>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	441a      	add	r2, r3
 80012de:	4b8e      	ldr	r3, [pc, #568]	@ (8001518 <traffic_run+0x278>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d028      	beq.n	8001338 <traffic_run+0x98>
			//off all leds
			control_traffic_light(0, 0, 0, 0);
 80012e6:	2300      	movs	r3, #0
 80012e8:	2200      	movs	r2, #0
 80012ea:	2100      	movs	r1, #0
 80012ec:	2000      	movs	r0, #0
 80012ee:	f001 fce7 	bl	8002cc0 <control_traffic_light>
			control_traffic_light(1, 0, 0, 0);
 80012f2:	2300      	movs	r3, #0
 80012f4:	2200      	movs	r2, #0
 80012f6:	2100      	movs	r1, #0
 80012f8:	2001      	movs	r0, #1
 80012fa:	f001 fce1 	bl	8002cc0 <control_traffic_light>
			lcd_ShowStr(40, 130, "SYSTEM", RED, WHITE, 32, 1);
 80012fe:	2301      	movs	r3, #1
 8001300:	9302      	str	r3, [sp, #8]
 8001302:	2320      	movs	r3, #32
 8001304:	9301      	str	r3, [sp, #4]
 8001306:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001310:	4a82      	ldr	r2, [pc, #520]	@ (800151c <traffic_run+0x27c>)
 8001312:	2182      	movs	r1, #130	@ 0x82
 8001314:	2028      	movs	r0, #40	@ 0x28
 8001316:	f001 f8f5 	bl	8002504 <lcd_ShowStr>
			lcd_ShowStr(40, 162, "ERROR!!!", RED, WHITE, 32, 1);
 800131a:	2301      	movs	r3, #1
 800131c:	9302      	str	r3, [sp, #8]
 800131e:	2320      	movs	r3, #32
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800132c:	4a7c      	ldr	r2, [pc, #496]	@ (8001520 <traffic_run+0x280>)
 800132e:	21a2      	movs	r1, #162	@ 0xa2
 8001330:	2028      	movs	r0, #40	@ 0x28
 8001332:	f001 f8e7 	bl	8002504 <lcd_ShowStr>
 8001336:	e03d      	b.n	80013b4 <traffic_run+0x114>
		} else {
			// decrease timer every 1s
			lcd_ShowStr(40, 130, "SYSTEM", WHITE, WHITE, 32, 1);
 8001338:	2301      	movs	r3, #1
 800133a:	9302      	str	r3, [sp, #8]
 800133c:	2320      	movs	r3, #32
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800134a:	4a74      	ldr	r2, [pc, #464]	@ (800151c <traffic_run+0x27c>)
 800134c:	2182      	movs	r1, #130	@ 0x82
 800134e:	2028      	movs	r0, #40	@ 0x28
 8001350:	f001 f8d8 	bl	8002504 <lcd_ShowStr>
			lcd_ShowStr(40, 162, "ERROR!!!", WHITE, WHITE, 32, 1);
 8001354:	2301      	movs	r3, #1
 8001356:	9302      	str	r3, [sp, #8]
 8001358:	2320      	movs	r3, #32
 800135a:	9301      	str	r3, [sp, #4]
 800135c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001366:	4a6e      	ldr	r2, [pc, #440]	@ (8001520 <traffic_run+0x280>)
 8001368:	21a2      	movs	r1, #162	@ 0xa2
 800136a:	2028      	movs	r0, #40	@ 0x28
 800136c:	f001 f8ca 	bl	8002504 <lcd_ShowStr>
			if (!is_timer_on(1)) {
 8001370:	2001      	movs	r0, #1
 8001372:	f001 ff4f 	bl	8003214 <is_timer_on>
 8001376:	4603      	mov	r3, r0
 8001378:	f083 0301 	eor.w	r3, r3, #1
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d016      	beq.n	80013b0 <traffic_run+0x110>
				if (traffic_light_timer1 > 0)
 8001382:	4b68      	ldr	r3, [pc, #416]	@ (8001524 <traffic_run+0x284>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d004      	beq.n	8001394 <traffic_run+0xf4>
					traffic_light_timer1--;
 800138a:	4b66      	ldr	r3, [pc, #408]	@ (8001524 <traffic_run+0x284>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	3b01      	subs	r3, #1
 8001390:	4a64      	ldr	r2, [pc, #400]	@ (8001524 <traffic_run+0x284>)
 8001392:	6013      	str	r3, [r2, #0]
				if (traffic_light_timer2 > 0)
 8001394:	4b64      	ldr	r3, [pc, #400]	@ (8001528 <traffic_run+0x288>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d004      	beq.n	80013a6 <traffic_run+0x106>
					traffic_light_timer2--;
 800139c:	4b62      	ldr	r3, [pc, #392]	@ (8001528 <traffic_run+0x288>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	4a61      	ldr	r2, [pc, #388]	@ (8001528 <traffic_run+0x288>)
 80013a4:	6013      	str	r3, [r2, #0]
				set_timer(1, ONE_SECOND);
 80013a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80013aa:	2001      	movs	r0, #1
 80013ac:	f001 fed4 	bl	8003158 <set_timer>
			}
			traffic_light_fsm();
 80013b0:	f7ff fedc 	bl	800116c <traffic_light_fsm>
		}
		//button0;
		button0_fsm();
 80013b4:	f7ff fdd6 	bl	8000f64 <button0_fsm>
		break;
 80013b8:	e0df      	b.n	800157a <traffic_run+0x2da>

	case RED_ADJUSTMENT:
		// update buffer of red with the condition that previous state has to be different from changing-value states
		if (light_pre_st != INCREASE_BY_1 && light_pre_st != SET_VALUE
 80013ba:	4b5c      	ldr	r3, [pc, #368]	@ (800152c <traffic_run+0x28c>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b05      	cmp	r3, #5
 80013c0:	d00b      	beq.n	80013da <traffic_run+0x13a>
 80013c2:	4b5a      	ldr	r3, [pc, #360]	@ (800152c <traffic_run+0x28c>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b04      	cmp	r3, #4
 80013c8:	d007      	beq.n	80013da <traffic_run+0x13a>
				&& light_pre_st != INCREASE_BY_1_OVER_TIME) {
 80013ca:	4b58      	ldr	r3, [pc, #352]	@ (800152c <traffic_run+0x28c>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b06      	cmp	r3, #6
 80013d0:	d003      	beq.n	80013da <traffic_run+0x13a>
			red_time_buffer = red_time;
 80013d2:	4b51      	ldr	r3, [pc, #324]	@ (8001518 <traffic_run+0x278>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a56      	ldr	r2, [pc, #344]	@ (8001530 <traffic_run+0x290>)
 80013d8:	6013      	str	r3, [r2, #0]
		}
		// update buffer of four 7-seg leds: value of red buffer and the mode (2)
		update_led_buf(red_time_buffer, red_time_buffer, 2);
 80013da:	4b55      	ldr	r3, [pc, #340]	@ (8001530 <traffic_run+0x290>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a54      	ldr	r2, [pc, #336]	@ (8001530 <traffic_run+0x290>)
 80013e0:	6811      	ldr	r1, [r2, #0]
 80013e2:	2202      	movs	r2, #2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f001 fd2f 	bl	8002e48 <update_led_buf>
		fsm_led();
 80013ea:	f7ff fd07 	bl	8000dfc <fsm_led>
		// transition mode function
		button0_fsm();
 80013ee:	f7ff fdb9 	bl	8000f64 <button0_fsm>
		button1_fsm();
 80013f2:	f7ff fe4f 	bl	8001094 <button1_fsm>
		button2_fsm();
 80013f6:	f7ff fe0f 	bl	8001018 <button2_fsm>
		break;
 80013fa:	e0be      	b.n	800157a <traffic_run+0x2da>
	case YELLOW_ADJUSTMENT:
		// update buffer of yellow with the condition that previous state has to be different from changing-value states
		if (light_pre_st != INCREASE_BY_1 && light_pre_st != SET_VALUE
 80013fc:	4b4b      	ldr	r3, [pc, #300]	@ (800152c <traffic_run+0x28c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b05      	cmp	r3, #5
 8001402:	d00b      	beq.n	800141c <traffic_run+0x17c>
 8001404:	4b49      	ldr	r3, [pc, #292]	@ (800152c <traffic_run+0x28c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b04      	cmp	r3, #4
 800140a:	d007      	beq.n	800141c <traffic_run+0x17c>
				&& light_pre_st != INCREASE_BY_1_OVER_TIME)
 800140c:	4b47      	ldr	r3, [pc, #284]	@ (800152c <traffic_run+0x28c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b06      	cmp	r3, #6
 8001412:	d003      	beq.n	800141c <traffic_run+0x17c>
			yellow_time_buffer = yellow_time;
 8001414:	4b3f      	ldr	r3, [pc, #252]	@ (8001514 <traffic_run+0x274>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a46      	ldr	r2, [pc, #280]	@ (8001534 <traffic_run+0x294>)
 800141a:	6013      	str	r3, [r2, #0]
		// update buffer of four 7-seg leds: value of yellow buffer and the mode (3)
		update_led_buf(yellow_time_buffer, yellow_time_buffer, 3);
 800141c:	4b45      	ldr	r3, [pc, #276]	@ (8001534 <traffic_run+0x294>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a44      	ldr	r2, [pc, #272]	@ (8001534 <traffic_run+0x294>)
 8001422:	6811      	ldr	r1, [r2, #0]
 8001424:	2203      	movs	r2, #3
 8001426:	4618      	mov	r0, r3
 8001428:	f001 fd0e 	bl	8002e48 <update_led_buf>
		fsm_led();
 800142c:	f7ff fce6 	bl	8000dfc <fsm_led>
		// transition mode function
		button0_fsm();
 8001430:	f7ff fd98 	bl	8000f64 <button0_fsm>
		button1_fsm();
 8001434:	f7ff fe2e 	bl	8001094 <button1_fsm>
		button2_fsm();
 8001438:	f7ff fdee 	bl	8001018 <button2_fsm>

		break;
 800143c:	e09d      	b.n	800157a <traffic_run+0x2da>
	case GREEN_ADJUSTMENT:
		// update buffer of green with the condition that previous state has to be different from changing-value states
		if (light_pre_st != INCREASE_BY_1 && light_pre_st != SET_VALUE
 800143e:	4b3b      	ldr	r3, [pc, #236]	@ (800152c <traffic_run+0x28c>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b05      	cmp	r3, #5
 8001444:	d00b      	beq.n	800145e <traffic_run+0x1be>
 8001446:	4b39      	ldr	r3, [pc, #228]	@ (800152c <traffic_run+0x28c>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b04      	cmp	r3, #4
 800144c:	d007      	beq.n	800145e <traffic_run+0x1be>
				&& light_pre_st != INCREASE_BY_1_OVER_TIME)
 800144e:	4b37      	ldr	r3, [pc, #220]	@ (800152c <traffic_run+0x28c>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b06      	cmp	r3, #6
 8001454:	d003      	beq.n	800145e <traffic_run+0x1be>
			green_time_buffer = green_time;
 8001456:	4b2e      	ldr	r3, [pc, #184]	@ (8001510 <traffic_run+0x270>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a37      	ldr	r2, [pc, #220]	@ (8001538 <traffic_run+0x298>)
 800145c:	6013      	str	r3, [r2, #0]
		// update buffer of four 7-seg leds: value of yellow buffer and the mode (4)
		update_led_buf(green_time_buffer, green_time_buffer, 4);
 800145e:	4b36      	ldr	r3, [pc, #216]	@ (8001538 <traffic_run+0x298>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a35      	ldr	r2, [pc, #212]	@ (8001538 <traffic_run+0x298>)
 8001464:	6811      	ldr	r1, [r2, #0]
 8001466:	2204      	movs	r2, #4
 8001468:	4618      	mov	r0, r3
 800146a:	f001 fced 	bl	8002e48 <update_led_buf>
		fsm_led();
 800146e:	f7ff fcc5 	bl	8000dfc <fsm_led>
		// transition mode function
		button0_fsm();
 8001472:	f7ff fd77 	bl	8000f64 <button0_fsm>
		button1_fsm();
 8001476:	f7ff fe0d 	bl	8001094 <button1_fsm>
		button2_fsm();
 800147a:	f7ff fdcd 	bl	8001018 <button2_fsm>
		break;
 800147e:	e07c      	b.n	800157a <traffic_run+0x2da>

	case SET_VALUE:
		// update the time value based-on previous state
		if (light_pre_st == RED_ADJUSTMENT) {
 8001480:	4b2a      	ldr	r3, [pc, #168]	@ (800152c <traffic_run+0x28c>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d104      	bne.n	8001492 <traffic_run+0x1f2>
			red_time = red_time_buffer;
 8001488:	4b29      	ldr	r3, [pc, #164]	@ (8001530 <traffic_run+0x290>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a22      	ldr	r2, [pc, #136]	@ (8001518 <traffic_run+0x278>)
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	e010      	b.n	80014b4 <traffic_run+0x214>
		} else if (light_pre_st == YELLOW_ADJUSTMENT) {
 8001492:	4b26      	ldr	r3, [pc, #152]	@ (800152c <traffic_run+0x28c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d104      	bne.n	80014a4 <traffic_run+0x204>
			yellow_time = yellow_time_buffer;
 800149a:	4b26      	ldr	r3, [pc, #152]	@ (8001534 <traffic_run+0x294>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a1d      	ldr	r2, [pc, #116]	@ (8001514 <traffic_run+0x274>)
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e007      	b.n	80014b4 <traffic_run+0x214>
		} else if (light_pre_st == GREEN_ADJUSTMENT) {
 80014a4:	4b21      	ldr	r3, [pc, #132]	@ (800152c <traffic_run+0x28c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	d103      	bne.n	80014b4 <traffic_run+0x214>
			green_time = green_time_buffer;
 80014ac:	4b22      	ldr	r3, [pc, #136]	@ (8001538 <traffic_run+0x298>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a17      	ldr	r2, [pc, #92]	@ (8001510 <traffic_run+0x270>)
 80014b2:	6013      	str	r3, [r2, #0]
		}

		light_st = light_pre_st;
 80014b4:	4b1d      	ldr	r3, [pc, #116]	@ (800152c <traffic_run+0x28c>)
 80014b6:	781a      	ldrb	r2, [r3, #0]
 80014b8:	4b14      	ldr	r3, [pc, #80]	@ (800150c <traffic_run+0x26c>)
 80014ba:	701a      	strb	r2, [r3, #0]
		light_pre_st = SET_VALUE;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <traffic_run+0x28c>)
 80014be:	2204      	movs	r2, #4
 80014c0:	701a      	strb	r2, [r3, #0]
		break;
 80014c2:	e05a      	b.n	800157a <traffic_run+0x2da>
	case INCREASE_BY_1:
		// increase the time value based-on previous state (short-pressed)
		increase_value();
 80014c4:	f7ff fd0c 	bl	8000ee0 <increase_value>
		light_st = light_pre_st;
 80014c8:	4b18      	ldr	r3, [pc, #96]	@ (800152c <traffic_run+0x28c>)
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <traffic_run+0x26c>)
 80014ce:	701a      	strb	r2, [r3, #0]
		light_pre_st = INCREASE_BY_1;
 80014d0:	4b16      	ldr	r3, [pc, #88]	@ (800152c <traffic_run+0x28c>)
 80014d2:	2205      	movs	r2, #5
 80014d4:	701a      	strb	r2, [r3, #0]
		break;
 80014d6:	e050      	b.n	800157a <traffic_run+0x2da>
	case INCREASE_BY_1_OVER_TIME:
		// increase the time value every 0.25s based-on previous state (short-pressed)
		if (light_pre_st == RED_ADJUSTMENT) {
 80014d8:	4b14      	ldr	r3, [pc, #80]	@ (800152c <traffic_run+0x28c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d108      	bne.n	80014f2 <traffic_run+0x252>
			update_led_buf(red_time_buffer, red_time_buffer, 2);
 80014e0:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <traffic_run+0x290>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a12      	ldr	r2, [pc, #72]	@ (8001530 <traffic_run+0x290>)
 80014e6:	6811      	ldr	r1, [r2, #0]
 80014e8:	2202      	movs	r2, #2
 80014ea:	4618      	mov	r0, r3
 80014ec:	f001 fcac 	bl	8002e48 <update_led_buf>
 80014f0:	e030      	b.n	8001554 <traffic_run+0x2b4>
		} else if (light_pre_st == YELLOW_ADJUSTMENT) {
 80014f2:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <traffic_run+0x28c>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d120      	bne.n	800153c <traffic_run+0x29c>
			update_led_buf(yellow_time_buffer, yellow_time_buffer, 3);
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <traffic_run+0x294>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001534 <traffic_run+0x294>)
 8001500:	6811      	ldr	r1, [r2, #0]
 8001502:	2203      	movs	r2, #3
 8001504:	4618      	mov	r0, r3
 8001506:	f001 fc9f 	bl	8002e48 <update_led_buf>
 800150a:	e023      	b.n	8001554 <traffic_run+0x2b4>
 800150c:	2000006e 	.word	0x2000006e
 8001510:	20000008 	.word	0x20000008
 8001514:	2000000c 	.word	0x2000000c
 8001518:	20000004 	.word	0x20000004
 800151c:	0800598c 	.word	0x0800598c
 8001520:	08005994 	.word	0x08005994
 8001524:	2000001c 	.word	0x2000001c
 8001528:	20000020 	.word	0x20000020
 800152c:	2000006f 	.word	0x2000006f
 8001530:	20000010 	.word	0x20000010
 8001534:	20000018 	.word	0x20000018
 8001538:	20000014 	.word	0x20000014
		} else if (light_pre_st == GREEN_ADJUSTMENT) {
 800153c:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <traffic_run+0x2e4>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b03      	cmp	r3, #3
 8001542:	d107      	bne.n	8001554 <traffic_run+0x2b4>
			update_led_buf(green_time_buffer, green_time_buffer, 4);
 8001544:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <traffic_run+0x2e8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0f      	ldr	r2, [pc, #60]	@ (8001588 <traffic_run+0x2e8>)
 800154a:	6811      	ldr	r1, [r2, #0]
 800154c:	2204      	movs	r2, #4
 800154e:	4618      	mov	r0, r3
 8001550:	f001 fc7a 	bl	8002e48 <update_led_buf>
		}
		if (!is_timer_on(4)) {
 8001554:	2004      	movs	r0, #4
 8001556:	f001 fe5d 	bl	8003214 <is_timer_on>
 800155a:	4603      	mov	r3, r0
 800155c:	f083 0301 	eor.w	r3, r3, #1
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <traffic_run+0x2d2>
			increase_value();
 8001566:	f7ff fcbb 	bl	8000ee0 <increase_value>
			set_timer(4, INCREASE_TIME);
 800156a:	21fa      	movs	r1, #250	@ 0xfa
 800156c:	2004      	movs	r0, #4
 800156e:	f001 fdf3 	bl	8003158 <set_timer>
		}
		button1_fsm();
 8001572:	f7ff fd8f 	bl	8001094 <button1_fsm>
		break;
 8001576:	e000      	b.n	800157a <traffic_run+0x2da>
	default:
		break;
 8001578:	bf00      	nop
	}
	LCD_DisplayNum();
 800157a:	f001 fca3 	bl	8002ec4 <LCD_DisplayNum>
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	2000006f 	.word	0x2000006f
 8001588:	20000014 	.word	0x20000014

0800158c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08e      	sub	sp, #56	@ 0x38
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	611a      	str	r2, [r3, #16]
 80015a2:	615a      	str	r2, [r3, #20]
 80015a4:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80015a6:	463b      	mov	r3, r7
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	615a      	str	r2, [r3, #20]
 80015b6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80015b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001678 <MX_FSMC_Init+0xec>)
 80015ba:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80015be:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80015c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001678 <MX_FSMC_Init+0xec>)
 80015c2:	4a2e      	ldr	r2, [pc, #184]	@ (800167c <MX_FSMC_Init+0xf0>)
 80015c4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80015c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001678 <MX_FSMC_Init+0xec>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80015cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001678 <MX_FSMC_Init+0xec>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80015d2:	4b29      	ldr	r3, [pc, #164]	@ (8001678 <MX_FSMC_Init+0xec>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80015d8:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <MX_FSMC_Init+0xec>)
 80015da:	2210      	movs	r2, #16
 80015dc:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80015de:	4b26      	ldr	r3, [pc, #152]	@ (8001678 <MX_FSMC_Init+0xec>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80015e4:	4b24      	ldr	r3, [pc, #144]	@ (8001678 <MX_FSMC_Init+0xec>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80015ea:	4b23      	ldr	r3, [pc, #140]	@ (8001678 <MX_FSMC_Init+0xec>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80015f0:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <MX_FSMC_Init+0xec>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80015f6:	4b20      	ldr	r3, [pc, #128]	@ (8001678 <MX_FSMC_Init+0xec>)
 80015f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80015fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80015fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001678 <MX_FSMC_Init+0xec>)
 8001600:	2200      	movs	r2, #0
 8001602:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001604:	4b1c      	ldr	r3, [pc, #112]	@ (8001678 <MX_FSMC_Init+0xec>)
 8001606:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800160a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800160c:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <MX_FSMC_Init+0xec>)
 800160e:	2200      	movs	r2, #0
 8001610:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001612:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <MX_FSMC_Init+0xec>)
 8001614:	2200      	movs	r2, #0
 8001616:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001618:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <MX_FSMC_Init+0xec>)
 800161a:	2200      	movs	r2, #0
 800161c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 800161e:	230f      	movs	r3, #15
 8001620:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001622:	230f      	movs	r3, #15
 8001624:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001626:	233c      	movs	r3, #60	@ 0x3c
 8001628:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 800162e:	2310      	movs	r3, #16
 8001630:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 8001632:	2311      	movs	r3, #17
 8001634:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001636:	2300      	movs	r3, #0
 8001638:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 800163a:	2308      	movs	r3, #8
 800163c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800163e:	230f      	movs	r3, #15
 8001640:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 8001642:	2309      	movs	r3, #9
 8001644:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800164a:	2310      	movs	r3, #16
 800164c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800164e:	2311      	movs	r3, #17
 8001650:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001656:	463a      	mov	r2, r7
 8001658:	f107 031c 	add.w	r3, r7, #28
 800165c:	4619      	mov	r1, r3
 800165e:	4806      	ldr	r0, [pc, #24]	@ (8001678 <MX_FSMC_Init+0xec>)
 8001660:	f003 fbc6 	bl	8004df0 <HAL_SRAM_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800166a:	f001 fd65 	bl	8003138 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800166e:	bf00      	nop
 8001670:	3738      	adds	r7, #56	@ 0x38
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000078 	.word	0x20000078
 800167c:	a0000104 	.word	0xa0000104

08001680 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001686:	1d3b      	adds	r3, r7, #4
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001694:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <HAL_FSMC_MspInit+0x88>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d131      	bne.n	8001700 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800169c:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <HAL_FSMC_MspInit+0x88>)
 800169e:	2201      	movs	r2, #1
 80016a0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	4b19      	ldr	r3, [pc, #100]	@ (800170c <HAL_FSMC_MspInit+0x8c>)
 80016a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016aa:	4a18      	ldr	r2, [pc, #96]	@ (800170c <HAL_FSMC_MspInit+0x8c>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6393      	str	r3, [r2, #56]	@ 0x38
 80016b2:	4b16      	ldr	r3, [pc, #88]	@ (800170c <HAL_FSMC_MspInit+0x8c>)
 80016b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80016be:	f64f 7388 	movw	r3, #65416	@ 0xff88
 80016c2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016cc:	2303      	movs	r3, #3
 80016ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80016d0:	230c      	movs	r3, #12
 80016d2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	4619      	mov	r1, r3
 80016d8:	480d      	ldr	r0, [pc, #52]	@ (8001710 <HAL_FSMC_MspInit+0x90>)
 80016da:	f002 f8e1 	bl	80038a0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80016de:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 80016e2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ec:	2303      	movs	r3, #3
 80016ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80016f0:	230c      	movs	r3, #12
 80016f2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	4619      	mov	r1, r3
 80016f8:	4806      	ldr	r0, [pc, #24]	@ (8001714 <HAL_FSMC_MspInit+0x94>)
 80016fa:	f002 f8d1 	bl	80038a0 <HAL_GPIO_Init>
 80016fe:	e000      	b.n	8001702 <HAL_FSMC_MspInit+0x82>
    return;
 8001700:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200000c8 	.word	0x200000c8
 800170c:	40023800 	.word	0x40023800
 8001710:	40021000 	.word	0x40021000
 8001714:	40020c00 	.word	0x40020c00

08001718 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001720:	f7ff ffae 	bl	8001680 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08c      	sub	sp, #48	@ 0x30
 8001730:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
 8001740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
 8001746:	4b6f      	ldr	r3, [pc, #444]	@ (8001904 <MX_GPIO_Init+0x1d8>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	4a6e      	ldr	r2, [pc, #440]	@ (8001904 <MX_GPIO_Init+0x1d8>)
 800174c:	f043 0310 	orr.w	r3, r3, #16
 8001750:	6313      	str	r3, [r2, #48]	@ 0x30
 8001752:	4b6c      	ldr	r3, [pc, #432]	@ (8001904 <MX_GPIO_Init+0x1d8>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	61bb      	str	r3, [r7, #24]
 800175c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	4b68      	ldr	r3, [pc, #416]	@ (8001904 <MX_GPIO_Init+0x1d8>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	4a67      	ldr	r2, [pc, #412]	@ (8001904 <MX_GPIO_Init+0x1d8>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6313      	str	r3, [r2, #48]	@ 0x30
 800176e:	4b65      	ldr	r3, [pc, #404]	@ (8001904 <MX_GPIO_Init+0x1d8>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
 800177e:	4b61      	ldr	r3, [pc, #388]	@ (8001904 <MX_GPIO_Init+0x1d8>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a60      	ldr	r2, [pc, #384]	@ (8001904 <MX_GPIO_Init+0x1d8>)
 8001784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b5e      	ldr	r3, [pc, #376]	@ (8001904 <MX_GPIO_Init+0x1d8>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b5a      	ldr	r3, [pc, #360]	@ (8001904 <MX_GPIO_Init+0x1d8>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a59      	ldr	r2, [pc, #356]	@ (8001904 <MX_GPIO_Init+0x1d8>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b57      	ldr	r3, [pc, #348]	@ (8001904 <MX_GPIO_Init+0x1d8>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	4b53      	ldr	r3, [pc, #332]	@ (8001904 <MX_GPIO_Init+0x1d8>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a52      	ldr	r2, [pc, #328]	@ (8001904 <MX_GPIO_Init+0x1d8>)
 80017bc:	f043 0308 	orr.w	r3, r3, #8
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b50      	ldr	r3, [pc, #320]	@ (8001904 <MX_GPIO_Init+0x1d8>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	60bb      	str	r3, [r7, #8]
 80017cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001904 <MX_GPIO_Init+0x1d8>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a4b      	ldr	r2, [pc, #300]	@ (8001904 <MX_GPIO_Init+0x1d8>)
 80017d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b49      	ldr	r3, [pc, #292]	@ (8001904 <MX_GPIO_Init+0x1d8>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	4b45      	ldr	r3, [pc, #276]	@ (8001904 <MX_GPIO_Init+0x1d8>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a44      	ldr	r2, [pc, #272]	@ (8001904 <MX_GPIO_Init+0x1d8>)
 80017f4:	f043 0302 	orr.w	r3, r3, #2
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b42      	ldr	r3, [pc, #264]	@ (8001904 <MX_GPIO_Init+0x1d8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	2170      	movs	r1, #112	@ 0x70
 800180a:	483f      	ldr	r0, [pc, #252]	@ (8001908 <MX_GPIO_Init+0x1dc>)
 800180c:	f002 f9e4 	bl	8003bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001810:	2200      	movs	r2, #0
 8001812:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001816:	483d      	ldr	r0, [pc, #244]	@ (800190c <MX_GPIO_Init+0x1e0>)
 8001818:	f002 f9de 	bl	8003bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	2140      	movs	r1, #64	@ 0x40
 8001820:	483b      	ldr	r0, [pc, #236]	@ (8001910 <MX_GPIO_Init+0x1e4>)
 8001822:	f002 f9d9 	bl	8003bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800182c:	4839      	ldr	r0, [pc, #228]	@ (8001914 <MX_GPIO_Init+0x1e8>)
 800182e:	f002 f9d3 	bl	8003bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	2108      	movs	r1, #8
 8001836:	4838      	ldr	r0, [pc, #224]	@ (8001918 <MX_GPIO_Init+0x1ec>)
 8001838:	f002 f9ce 	bl	8003bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 800183c:	2370      	movs	r3, #112	@ 0x70
 800183e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001840:	2301      	movs	r3, #1
 8001842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	2300      	movs	r3, #0
 800184a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800184c:	f107 031c 	add.w	r3, r7, #28
 8001850:	4619      	mov	r1, r3
 8001852:	482d      	ldr	r0, [pc, #180]	@ (8001908 <MX_GPIO_Init+0x1dc>)
 8001854:	f002 f824 	bl	80038a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001858:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800185c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185e:	2301      	movs	r3, #1
 8001860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 031c 	add.w	r3, r7, #28
 800186e:	4619      	mov	r1, r3
 8001870:	4826      	ldr	r0, [pc, #152]	@ (800190c <MX_GPIO_Init+0x1e0>)
 8001872:	f002 f815 	bl	80038a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001876:	23c0      	movs	r3, #192	@ 0xc0
 8001878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	4619      	mov	r1, r3
 8001888:	4822      	ldr	r0, [pc, #136]	@ (8001914 <MX_GPIO_Init+0x1e8>)
 800188a:	f002 f809 	bl	80038a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 800188e:	2330      	movs	r3, #48	@ 0x30
 8001890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001892:	2300      	movs	r3, #0
 8001894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	4619      	mov	r1, r3
 80018a0:	481a      	ldr	r0, [pc, #104]	@ (800190c <MX_GPIO_Init+0x1e0>)
 80018a2:	f001 fffd 	bl	80038a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 80018a6:	2340      	movs	r3, #64	@ 0x40
 80018a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	4814      	ldr	r0, [pc, #80]	@ (8001910 <MX_GPIO_Init+0x1e4>)
 80018be:	f001 ffef 	bl	80038a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 80018c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c8:	2301      	movs	r3, #1
 80018ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f107 031c 	add.w	r3, r7, #28
 80018d8:	4619      	mov	r1, r3
 80018da:	480e      	ldr	r0, [pc, #56]	@ (8001914 <MX_GPIO_Init+0x1e8>)
 80018dc:	f001 ffe0 	bl	80038a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 80018e0:	2308      	movs	r3, #8
 80018e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 031c 	add.w	r3, r7, #28
 80018f4:	4619      	mov	r1, r3
 80018f6:	4808      	ldr	r0, [pc, #32]	@ (8001918 <MX_GPIO_Init+0x1ec>)
 80018f8:	f001 ffd2 	bl	80038a0 <HAL_GPIO_Init>

}
 80018fc:	bf00      	nop
 80018fe:	3730      	adds	r7, #48	@ 0x30
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	40021000 	.word	0x40021000
 800190c:	40020800 	.word	0x40020800
 8001910:	40021800 	.word	0x40021800
 8001914:	40020000 	.word	0x40020000
 8001918:	40020c00 	.word	0x40020c00

0800191c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8001926:	4a04      	ldr	r2, [pc, #16]	@ (8001938 <LCD_WR_REG+0x1c>)
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	8013      	strh	r3, [r2, #0]
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	600ffffe 	.word	0x600ffffe

0800193c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001946:	4a04      	ldr	r2, [pc, #16]	@ (8001958 <LCD_WR_DATA+0x1c>)
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	8053      	strh	r3, [r2, #2]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	600ffffe 	.word	0x600ffffe

0800195c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8001962:	4b06      	ldr	r3, [pc, #24]	@ (800197c <LCD_RD_DATA+0x20>)
 8001964:	885b      	ldrh	r3, [r3, #2]
 8001966:	b29b      	uxth	r3, r3
 8001968:	80fb      	strh	r3, [r7, #6]
	return ram;
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	b29b      	uxth	r3, r3
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	600ffffe 	.word	0x600ffffe

08001980 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4604      	mov	r4, r0
 8001988:	4608      	mov	r0, r1
 800198a:	4611      	mov	r1, r2
 800198c:	461a      	mov	r2, r3
 800198e:	4623      	mov	r3, r4
 8001990:	80fb      	strh	r3, [r7, #6]
 8001992:	4603      	mov	r3, r0
 8001994:	80bb      	strh	r3, [r7, #4]
 8001996:	460b      	mov	r3, r1
 8001998:	807b      	strh	r3, [r7, #2]
 800199a:	4613      	mov	r3, r2
 800199c:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800199e:	202a      	movs	r0, #42	@ 0x2a
 80019a0:	f7ff ffbc 	bl	800191c <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	0a1b      	lsrs	r3, r3, #8
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff ffc6 	bl	800193c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff ffc0 	bl	800193c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 80019bc:	887b      	ldrh	r3, [r7, #2]
 80019be:	0a1b      	lsrs	r3, r3, #8
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff ffba 	bl	800193c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 80019c8:	887b      	ldrh	r3, [r7, #2]
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff ffb4 	bl	800193c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 80019d4:	202b      	movs	r0, #43	@ 0x2b
 80019d6:	f7ff ffa1 	bl	800191c <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 80019da:	88bb      	ldrh	r3, [r7, #4]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	b29b      	uxth	r3, r3
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ffab 	bl	800193c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 80019e6:	88bb      	ldrh	r3, [r7, #4]
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff ffa5 	bl	800193c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 80019f2:	883b      	ldrh	r3, [r7, #0]
 80019f4:	0a1b      	lsrs	r3, r3, #8
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff9f 	bl	800193c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80019fe:	883b      	ldrh	r3, [r7, #0]
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff99 	bl	800193c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8001a0a:	202c      	movs	r0, #44	@ 0x2c
 8001a0c:	f7ff ff86 	bl	800191c <LCD_WR_REG>
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd90      	pop	{r4, r7, pc}

08001a18 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8001a22:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <lcd_Clear+0x60>)
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <lcd_Clear+0x60>)
 8001a2c:	885b      	ldrh	r3, [r3, #2]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	2100      	movs	r1, #0
 8001a34:	2000      	movs	r0, #0
 8001a36:	f7ff ffa3 	bl	8001980 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	81fb      	strh	r3, [r7, #14]
 8001a3e:	e011      	b.n	8001a64 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	81bb      	strh	r3, [r7, #12]
 8001a44:	e006      	b.n	8001a54 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff77 	bl	800193c <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8001a4e:	89bb      	ldrh	r3, [r7, #12]
 8001a50:	3301      	adds	r3, #1
 8001a52:	81bb      	strh	r3, [r7, #12]
 8001a54:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <lcd_Clear+0x60>)
 8001a56:	885b      	ldrh	r3, [r3, #2]
 8001a58:	89ba      	ldrh	r2, [r7, #12]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d3f3      	bcc.n	8001a46 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 8001a5e:	89fb      	ldrh	r3, [r7, #14]
 8001a60:	3301      	adds	r3, #1
 8001a62:	81fb      	strh	r3, [r7, #14]
 8001a64:	4b04      	ldr	r3, [pc, #16]	@ (8001a78 <lcd_Clear+0x60>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	89fa      	ldrh	r2, [r7, #14]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d3e8      	bcc.n	8001a40 <lcd_Clear+0x28>
		}
	}
}
 8001a6e:	bf00      	nop
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200000cc 	.word	0x200000cc

08001a7c <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001a7c:	b590      	push	{r4, r7, lr}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4604      	mov	r4, r0
 8001a84:	4608      	mov	r0, r1
 8001a86:	4611      	mov	r1, r2
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	80fb      	strh	r3, [r7, #6]
 8001a8e:	4603      	mov	r3, r0
 8001a90:	80bb      	strh	r3, [r7, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	807b      	strh	r3, [r7, #2]
 8001a96:	4613      	mov	r3, r2
 8001a98:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	883b      	ldrh	r3, [r7, #0]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	88b9      	ldrh	r1, [r7, #4]
 8001aa8:	88f8      	ldrh	r0, [r7, #6]
 8001aaa:	f7ff ff69 	bl	8001980 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8001aae:	88bb      	ldrh	r3, [r7, #4]
 8001ab0:	81fb      	strh	r3, [r7, #14]
 8001ab2:	e010      	b.n	8001ad6 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	81bb      	strh	r3, [r7, #12]
 8001ab8:	e006      	b.n	8001ac8 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001aba:	8c3b      	ldrh	r3, [r7, #32]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff3d 	bl	800193c <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8001ac2:	89bb      	ldrh	r3, [r7, #12]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	81bb      	strh	r3, [r7, #12]
 8001ac8:	89ba      	ldrh	r2, [r7, #12]
 8001aca:	887b      	ldrh	r3, [r7, #2]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d3f4      	bcc.n	8001aba <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8001ad0:	89fb      	ldrh	r3, [r7, #14]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	81fb      	strh	r3, [r7, #14]
 8001ad6:	89fa      	ldrh	r2, [r7, #14]
 8001ad8:	883b      	ldrh	r3, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d3ea      	bcc.n	8001ab4 <lcd_Fill+0x38>
		}
	}
}
 8001ade:	bf00      	nop
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd90      	pop	{r4, r7, pc}

08001ae8 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	80fb      	strh	r3, [r7, #6]
 8001af2:	460b      	mov	r3, r1
 8001af4:	80bb      	strh	r3, [r7, #4]
 8001af6:	4613      	mov	r3, r2
 8001af8:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8001afa:	88bb      	ldrh	r3, [r7, #4]
 8001afc:	88fa      	ldrh	r2, [r7, #6]
 8001afe:	88b9      	ldrh	r1, [r7, #4]
 8001b00:	88f8      	ldrh	r0, [r7, #6]
 8001b02:	f7ff ff3d 	bl	8001980 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8001b06:	887b      	ldrh	r3, [r7, #2]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff17 	bl	800193c <LCD_WR_DATA>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 8001b16:	b590      	push	{r4, r7, lr}
 8001b18:	b08d      	sub	sp, #52	@ 0x34
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4604      	mov	r4, r0
 8001b1e:	4608      	mov	r0, r1
 8001b20:	4611      	mov	r1, r2
 8001b22:	461a      	mov	r2, r3
 8001b24:	4623      	mov	r3, r4
 8001b26:	80fb      	strh	r3, [r7, #6]
 8001b28:	4603      	mov	r3, r0
 8001b2a:	80bb      	strh	r3, [r7, #4]
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	807b      	strh	r3, [r7, #2]
 8001b30:	4613      	mov	r3, r2
 8001b32:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8001b34:	2300      	movs	r3, #0
 8001b36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b38:	2300      	movs	r3, #0
 8001b3a:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 8001b3c:	887a      	ldrh	r2, [r7, #2]
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8001b44:	883a      	ldrh	r2, [r7, #0]
 8001b46:	88bb      	ldrh	r3, [r7, #4]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8001b4c:	88fb      	ldrh	r3, [r7, #6]
 8001b4e:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8001b50:	88bb      	ldrh	r3, [r7, #4]
 8001b52:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001b54:	6a3b      	ldr	r3, [r7, #32]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	dd02      	ble.n	8001b60 <lcd_DrawLine+0x4a>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	e00b      	b.n	8001b78 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d102      	bne.n	8001b6c <lcd_DrawLine+0x56>
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	e005      	b.n	8001b78 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	425b      	negs	r3, r3
 8001b76:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	dd02      	ble.n	8001b84 <lcd_DrawLine+0x6e>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	e00b      	b.n	8001b9c <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d102      	bne.n	8001b90 <lcd_DrawLine+0x7a>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	e005      	b.n	8001b9c <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	425b      	negs	r3, r3
 8001b9a:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001b9c:	6a3a      	ldr	r2, [r7, #32]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	dd02      	ble.n	8001baa <lcd_DrawLine+0x94>
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	61bb      	str	r3, [r7, #24]
 8001ba8:	e001      	b.n	8001bae <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001bb2:	e02b      	b.n	8001c0c <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	b291      	uxth	r1, r2
 8001bbc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff91 	bl	8001ae8 <lcd_DrawPoint>
		xerr+=delta_x;
 8001bc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	4413      	add	r3, r2
 8001bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr+=delta_y;
 8001bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	627b      	str	r3, [r7, #36]	@ 0x24
		if(xerr>distance)
 8001bd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	dd07      	ble.n	8001bee <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 8001bde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow+=incx;
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	4413      	add	r3, r2
 8001bec:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8001bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	dd07      	ble.n	8001c06 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 8001bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol+=incy;
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4413      	add	r3, r2
 8001c04:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 8001c06:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001c08:	3301      	adds	r3, #1
 8001c0a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001c0c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	dacf      	bge.n	8001bb4 <lcd_DrawLine+0x9e>
		}
	}
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3734      	adds	r7, #52	@ 0x34
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd90      	pop	{r4, r7, pc}

08001c1e <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 8001c1e:	b590      	push	{r4, r7, lr}
 8001c20:	b085      	sub	sp, #20
 8001c22:	af02      	add	r7, sp, #8
 8001c24:	4604      	mov	r4, r0
 8001c26:	4608      	mov	r0, r1
 8001c28:	4611      	mov	r1, r2
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	4623      	mov	r3, r4
 8001c2e:	80fb      	strh	r3, [r7, #6]
 8001c30:	4603      	mov	r3, r0
 8001c32:	80bb      	strh	r3, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 8001c3c:	88bc      	ldrh	r4, [r7, #4]
 8001c3e:	887a      	ldrh	r2, [r7, #2]
 8001c40:	88b9      	ldrh	r1, [r7, #4]
 8001c42:	88f8      	ldrh	r0, [r7, #6]
 8001c44:	8b3b      	ldrh	r3, [r7, #24]
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	4623      	mov	r3, r4
 8001c4a:	f7ff ff64 	bl	8001b16 <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 8001c4e:	883c      	ldrh	r4, [r7, #0]
 8001c50:	88fa      	ldrh	r2, [r7, #6]
 8001c52:	88b9      	ldrh	r1, [r7, #4]
 8001c54:	88f8      	ldrh	r0, [r7, #6]
 8001c56:	8b3b      	ldrh	r3, [r7, #24]
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	4623      	mov	r3, r4
 8001c5c:	f7ff ff5b 	bl	8001b16 <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 8001c60:	883c      	ldrh	r4, [r7, #0]
 8001c62:	887a      	ldrh	r2, [r7, #2]
 8001c64:	8839      	ldrh	r1, [r7, #0]
 8001c66:	88f8      	ldrh	r0, [r7, #6]
 8001c68:	8b3b      	ldrh	r3, [r7, #24]
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	4623      	mov	r3, r4
 8001c6e:	f7ff ff52 	bl	8001b16 <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 8001c72:	883c      	ldrh	r4, [r7, #0]
 8001c74:	887a      	ldrh	r2, [r7, #2]
 8001c76:	88b9      	ldrh	r1, [r7, #4]
 8001c78:	8878      	ldrh	r0, [r7, #2]
 8001c7a:	8b3b      	ldrh	r3, [r7, #24]
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	4623      	mov	r3, r4
 8001c80:	f7ff ff49 	bl	8001b16 <lcd_DrawLine>
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd90      	pop	{r4, r7, pc}

08001c8c <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4604      	mov	r4, r0
 8001c94:	4608      	mov	r0, r1
 8001c96:	4611      	mov	r1, r2
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4623      	mov	r3, r4
 8001c9c:	80fb      	strh	r3, [r7, #6]
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80bb      	strh	r3, [r7, #4]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	70fb      	strb	r3, [r7, #3]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8001cb2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001cb6:	085b      	lsrs	r3, r3, #1
 8001cb8:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	08db      	lsrs	r3, r3, #3
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	bf14      	ite	ne
 8001cce:	2301      	movne	r3, #1
 8001cd0:	2300      	moveq	r3, #0
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	fb12 f303 	smulbb	r3, r2, r3
 8001ce2:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001ce4:	78fb      	ldrb	r3, [r7, #3]
 8001ce6:	3b20      	subs	r3, #32
 8001ce8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	b29c      	uxth	r4, r3
 8001cf8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	88bb      	ldrh	r3, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	3b01      	subs	r3, #1
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	88b9      	ldrh	r1, [r7, #4]
 8001d0a:	88f8      	ldrh	r0, [r7, #6]
 8001d0c:	4622      	mov	r2, r4
 8001d0e:	f7ff fe37 	bl	8001980 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	827b      	strh	r3, [r7, #18]
 8001d16:	e07a      	b.n	8001e0e <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8001d18:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d1c:	2b0c      	cmp	r3, #12
 8001d1e:	d028      	beq.n	8001d72 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8001d20:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d24:	2b10      	cmp	r3, #16
 8001d26:	d108      	bne.n	8001d3a <lcd_ShowChar+0xae>
 8001d28:	78fa      	ldrb	r2, [r7, #3]
 8001d2a:	8a7b      	ldrh	r3, [r7, #18]
 8001d2c:	493c      	ldr	r1, [pc, #240]	@ (8001e20 <lcd_ShowChar+0x194>)
 8001d2e:	0112      	lsls	r2, r2, #4
 8001d30:	440a      	add	r2, r1
 8001d32:	4413      	add	r3, r2
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	75fb      	strb	r3, [r7, #23]
 8001d38:	e01b      	b.n	8001d72 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8001d3a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d3e:	2b18      	cmp	r3, #24
 8001d40:	d10b      	bne.n	8001d5a <lcd_ShowChar+0xce>
 8001d42:	78fa      	ldrb	r2, [r7, #3]
 8001d44:	8a79      	ldrh	r1, [r7, #18]
 8001d46:	4837      	ldr	r0, [pc, #220]	@ (8001e24 <lcd_ShowChar+0x198>)
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	4403      	add	r3, r0
 8001d52:	440b      	add	r3, r1
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	75fb      	strb	r3, [r7, #23]
 8001d58:	e00b      	b.n	8001d72 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001d5a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001d5e:	2b20      	cmp	r3, #32
 8001d60:	d15a      	bne.n	8001e18 <lcd_ShowChar+0x18c>
 8001d62:	78fa      	ldrb	r2, [r7, #3]
 8001d64:	8a7b      	ldrh	r3, [r7, #18]
 8001d66:	4930      	ldr	r1, [pc, #192]	@ (8001e28 <lcd_ShowChar+0x19c>)
 8001d68:	0192      	lsls	r2, r2, #6
 8001d6a:	440a      	add	r2, r1
 8001d6c:	4413      	add	r3, r2
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	75bb      	strb	r3, [r7, #22]
 8001d76:	e044      	b.n	8001e02 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001d78:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d120      	bne.n	8001dc2 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001d80:	7dfa      	ldrb	r2, [r7, #23]
 8001d82:	7dbb      	ldrb	r3, [r7, #22]
 8001d84:	fa42 f303 	asr.w	r3, r2, r3
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d004      	beq.n	8001d9a <lcd_ShowChar+0x10e>
 8001d90:	883b      	ldrh	r3, [r7, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fdd2 	bl	800193c <LCD_WR_DATA>
 8001d98:	e003      	b.n	8001da2 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001d9a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fdcd 	bl	800193c <LCD_WR_DATA>
				m++;
 8001da2:	7d7b      	ldrb	r3, [r7, #21]
 8001da4:	3301      	adds	r3, #1
 8001da6:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001da8:	7d7b      	ldrb	r3, [r7, #21]
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	fbb3 f1f2 	udiv	r1, r3, r2
 8001db0:	fb01 f202 	mul.w	r2, r1, r2
 8001db4:	1a9b      	subs	r3, r3, r2
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d11f      	bne.n	8001dfc <lcd_ShowChar+0x170>
				{
					m=0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	757b      	strb	r3, [r7, #21]
					break;
 8001dc0:	e022      	b.n	8001e08 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001dc2:	7dfa      	ldrb	r2, [r7, #23]
 8001dc4:	7dbb      	ldrb	r3, [r7, #22]
 8001dc6:	fa42 f303 	asr.w	r3, r2, r3
 8001dca:	f003 0301 	and.w	r3, r3, #1
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d005      	beq.n	8001dde <lcd_ShowChar+0x152>
 8001dd2:	883a      	ldrh	r2, [r7, #0]
 8001dd4:	88b9      	ldrh	r1, [r7, #4]
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fe85 	bl	8001ae8 <lcd_DrawPoint>
				x++;
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	3301      	adds	r3, #1
 8001de2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001de4:	88fa      	ldrh	r2, [r7, #6]
 8001de6:	8a3b      	ldrh	r3, [r7, #16]
 8001de8:	1ad2      	subs	r2, r2, r3
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d105      	bne.n	8001dfc <lcd_ShowChar+0x170>
				{
					x=x0;
 8001df0:	8a3b      	ldrh	r3, [r7, #16]
 8001df2:	80fb      	strh	r3, [r7, #6]
					y++;
 8001df4:	88bb      	ldrh	r3, [r7, #4]
 8001df6:	3301      	adds	r3, #1
 8001df8:	80bb      	strh	r3, [r7, #4]
					break;
 8001dfa:	e005      	b.n	8001e08 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001dfc:	7dbb      	ldrb	r3, [r7, #22]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	75bb      	strb	r3, [r7, #22]
 8001e02:	7dbb      	ldrb	r3, [r7, #22]
 8001e04:	2b07      	cmp	r3, #7
 8001e06:	d9b7      	bls.n	8001d78 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001e08:	8a7b      	ldrh	r3, [r7, #18]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	827b      	strh	r3, [r7, #18]
 8001e0e:	8a7a      	ldrh	r2, [r7, #18]
 8001e10:	89bb      	ldrh	r3, [r7, #12]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d380      	bcc.n	8001d18 <lcd_ShowChar+0x8c>
 8001e16:	e000      	b.n	8001e1a <lcd_ShowChar+0x18e>
		else return;
 8001e18:	bf00      	nop
				}
			}
		}
	}
}
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd90      	pop	{r4, r7, pc}
 8001e20:	080059b8 	.word	0x080059b8
 8001e24:	08005fa8 	.word	0x08005fa8
 8001e28:	08007178 	.word	0x08007178

08001e2c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	460a      	mov	r2, r1
 8001e36:	71fb      	strb	r3, [r7, #7]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001e40:	e004      	b.n	8001e4c <mypow+0x20>
 8001e42:	79fa      	ldrb	r2, [r7, #7]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	fb02 f303 	mul.w	r3, r2, r3
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	79bb      	ldrb	r3, [r7, #6]
 8001e4e:	1e5a      	subs	r2, r3, #1
 8001e50:	71ba      	strb	r2, [r7, #6]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f5      	bne.n	8001e42 <mypow+0x16>
	return result;
 8001e56:	68fb      	ldr	r3, [r7, #12]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001e64:	b590      	push	{r4, r7, lr}
 8001e66:	b089      	sub	sp, #36	@ 0x24
 8001e68:	af04      	add	r7, sp, #16
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	4608      	mov	r0, r1
 8001e6e:	4611      	mov	r1, r2
 8001e70:	461a      	mov	r2, r3
 8001e72:	4623      	mov	r3, r4
 8001e74:	80fb      	strh	r3, [r7, #6]
 8001e76:	4603      	mov	r3, r0
 8001e78:	80bb      	strh	r3, [r7, #4]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	807b      	strh	r3, [r7, #2]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001e86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001e8a:	085b      	lsrs	r3, r3, #1
 8001e8c:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	73fb      	strb	r3, [r7, #15]
 8001e92:	e059      	b.n	8001f48 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001e94:	887c      	ldrh	r4, [r7, #2]
 8001e96:	787a      	ldrb	r2, [r7, #1]
 8001e98:	7bfb      	ldrb	r3, [r7, #15]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	200a      	movs	r0, #10
 8001ea6:	f7ff ffc1 	bl	8001e2c <mypow>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	fbb4 f1f3 	udiv	r1, r4, r3
 8001eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f5c <lcd_ShowIntNum+0xf8>)
 8001eb2:	fba3 2301 	umull	r2, r3, r3, r1
 8001eb6:	08da      	lsrs	r2, r3, #3
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	1aca      	subs	r2, r1, r3
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001ec6:	7bbb      	ldrb	r3, [r7, #14]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d121      	bne.n	8001f10 <lcd_ShowIntNum+0xac>
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	787b      	ldrb	r3, [r7, #1]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	da1c      	bge.n	8001f10 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001ed6:	7b3b      	ldrb	r3, [r7, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d117      	bne.n	8001f0c <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	7b7b      	ldrb	r3, [r7, #13]
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	fb12 f303 	smulbb	r3, r2, r3
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	4413      	add	r3, r2
 8001eee:	b298      	uxth	r0, r3
 8001ef0:	8c3a      	ldrh	r2, [r7, #32]
 8001ef2:	88b9      	ldrh	r1, [r7, #4]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	9302      	str	r3, [sp, #8]
 8001ef8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	4613      	mov	r3, r2
 8001f04:	2220      	movs	r2, #32
 8001f06:	f7ff fec1 	bl	8001c8c <lcd_ShowChar>
				continue;
 8001f0a:	e01a      	b.n	8001f42 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	7b7b      	ldrb	r3, [r7, #13]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	fb12 f303 	smulbb	r3, r2, r3
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	4413      	add	r3, r2
 8001f22:	b298      	uxth	r0, r3
 8001f24:	7b3b      	ldrb	r3, [r7, #12]
 8001f26:	3330      	adds	r3, #48	@ 0x30
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	8c3c      	ldrh	r4, [r7, #32]
 8001f2c:	88b9      	ldrh	r1, [r7, #4]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	9302      	str	r3, [sp, #8]
 8001f32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	4623      	mov	r3, r4
 8001f3e:	f7ff fea5 	bl	8001c8c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001f42:	7bfb      	ldrb	r3, [r7, #15]
 8001f44:	3301      	adds	r3, #1
 8001f46:	73fb      	strb	r3, [r7, #15]
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	787b      	ldrb	r3, [r7, #1]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d3a1      	bcc.n	8001e94 <lcd_ShowIntNum+0x30>
	}
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd90      	pop	{r4, r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	cccccccd 	.word	0xcccccccd

08001f60 <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b087      	sub	sp, #28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4604      	mov	r4, r0
 8001f68:	4608      	mov	r0, r1
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4623      	mov	r3, r4
 8001f70:	80fb      	strh	r3, [r7, #6]
 8001f72:	4603      	mov	r3, r0
 8001f74:	80bb      	strh	r3, [r7, #4]
 8001f76:	460b      	mov	r3, r1
 8001f78:	807b      	strh	r3, [r7, #2]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8001f82:	88fa      	ldrh	r2, [r7, #6]
 8001f84:	887b      	ldrh	r3, [r7, #2]
 8001f86:	4413      	add	r3, r2
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b29c      	uxth	r4, r3
 8001f8e:	88ba      	ldrh	r2, [r7, #4]
 8001f90:	883b      	ldrh	r3, [r7, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	88b9      	ldrh	r1, [r7, #4]
 8001f9c:	88f8      	ldrh	r0, [r7, #6]
 8001f9e:	4622      	mov	r2, r4
 8001fa0:	f7ff fcee 	bl	8001980 <lcd_AddressSet>
	for(i=0;i<length;i++)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	82fb      	strh	r3, [r7, #22]
 8001fa8:	e027      	b.n	8001ffa <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	82bb      	strh	r3, [r7, #20]
 8001fae:	e01d      	b.n	8001fec <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fb6:	4413      	add	r3, r2
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fc4:	4413      	add	r3, r2
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	b21a      	sxth	r2, r3
 8001fd0:	7bbb      	ldrb	r3, [r7, #14]
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fcae 	bl	800193c <LCD_WR_DATA>
			k++;
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8001fe6:	8abb      	ldrh	r3, [r7, #20]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	82bb      	strh	r3, [r7, #20]
 8001fec:	8aba      	ldrh	r2, [r7, #20]
 8001fee:	883b      	ldrh	r3, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d3dd      	bcc.n	8001fb0 <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8001ff4:	8afb      	ldrh	r3, [r7, #22]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	82fb      	strh	r3, [r7, #22]
 8001ffa:	8afa      	ldrh	r2, [r7, #22]
 8001ffc:	887b      	ldrh	r3, [r7, #2]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d3d3      	bcc.n	8001faa <lcd_ShowPicture+0x4a>
		}
	}
}
 8002002:	bf00      	nop
 8002004:	bf00      	nop
 8002006:	371c      	adds	r7, #28
 8002008:	46bd      	mov	sp, r7
 800200a:	bd90      	pop	{r4, r7, pc}

0800200c <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	b2db      	uxtb	r3, r3
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d007      	beq.n	8002036 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8002026:	4b0a      	ldr	r3, [pc, #40]	@ (8002050 <lcd_SetDir+0x44>)
 8002028:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800202c:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800202e:	4b08      	ldr	r3, [pc, #32]	@ (8002050 <lcd_SetDir+0x44>)
 8002030:	22f0      	movs	r2, #240	@ 0xf0
 8002032:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8002034:	e006      	b.n	8002044 <lcd_SetDir+0x38>
		lcddev.width=240;
 8002036:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <lcd_SetDir+0x44>)
 8002038:	22f0      	movs	r2, #240	@ 0xf0
 800203a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800203c:	4b04      	ldr	r3, [pc, #16]	@ (8002050 <lcd_SetDir+0x44>)
 800203e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8002042:	805a      	strh	r2, [r3, #2]
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	200000cc 	.word	0x200000cc

08002054 <lcd_init>:


void lcd_init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8002058:	2200      	movs	r2, #0
 800205a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800205e:	48aa      	ldr	r0, [pc, #680]	@ (8002308 <lcd_init+0x2b4>)
 8002060:	f001 fdba 	bl	8003bd8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002064:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002068:	f001 fae4 	bl	8003634 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002072:	48a5      	ldr	r0, [pc, #660]	@ (8002308 <lcd_init+0x2b4>)
 8002074:	f001 fdb0 	bl	8003bd8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8002078:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800207c:	f001 fada 	bl	8003634 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8002080:	2000      	movs	r0, #0
 8002082:	f7ff ffc3 	bl	800200c <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8002086:	20d3      	movs	r0, #211	@ 0xd3
 8002088:	f7ff fc48 	bl	800191c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 800208c:	f7ff fc66 	bl	800195c <LCD_RD_DATA>
 8002090:	4603      	mov	r3, r0
 8002092:	461a      	mov	r2, r3
 8002094:	4b9d      	ldr	r3, [pc, #628]	@ (800230c <lcd_init+0x2b8>)
 8002096:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8002098:	f7ff fc60 	bl	800195c <LCD_RD_DATA>
 800209c:	4603      	mov	r3, r0
 800209e:	461a      	mov	r2, r3
 80020a0:	4b9a      	ldr	r3, [pc, #616]	@ (800230c <lcd_init+0x2b8>)
 80020a2:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80020a4:	f7ff fc5a 	bl	800195c <LCD_RD_DATA>
 80020a8:	4603      	mov	r3, r0
 80020aa:	461a      	mov	r2, r3
 80020ac:	4b97      	ldr	r3, [pc, #604]	@ (800230c <lcd_init+0x2b8>)
 80020ae:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80020b0:	4b96      	ldr	r3, [pc, #600]	@ (800230c <lcd_init+0x2b8>)
 80020b2:	889b      	ldrh	r3, [r3, #4]
 80020b4:	021b      	lsls	r3, r3, #8
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	4b94      	ldr	r3, [pc, #592]	@ (800230c <lcd_init+0x2b8>)
 80020ba:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80020bc:	f7ff fc4e 	bl	800195c <LCD_RD_DATA>
 80020c0:	4603      	mov	r3, r0
 80020c2:	461a      	mov	r2, r3
 80020c4:	4b91      	ldr	r3, [pc, #580]	@ (800230c <lcd_init+0x2b8>)
 80020c6:	889b      	ldrh	r3, [r3, #4]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	4b8f      	ldr	r3, [pc, #572]	@ (800230c <lcd_init+0x2b8>)
 80020ce:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 80020d0:	20cf      	movs	r0, #207	@ 0xcf
 80020d2:	f7ff fc23 	bl	800191c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80020d6:	2000      	movs	r0, #0
 80020d8:	f7ff fc30 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 80020dc:	20c1      	movs	r0, #193	@ 0xc1
 80020de:	f7ff fc2d 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 80020e2:	2030      	movs	r0, #48	@ 0x30
 80020e4:	f7ff fc2a 	bl	800193c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 80020e8:	20ed      	movs	r0, #237	@ 0xed
 80020ea:	f7ff fc17 	bl	800191c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 80020ee:	2064      	movs	r0, #100	@ 0x64
 80020f0:	f7ff fc24 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 80020f4:	2003      	movs	r0, #3
 80020f6:	f7ff fc21 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 80020fa:	2012      	movs	r0, #18
 80020fc:	f7ff fc1e 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8002100:	2081      	movs	r0, #129	@ 0x81
 8002102:	f7ff fc1b 	bl	800193c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8002106:	20e8      	movs	r0, #232	@ 0xe8
 8002108:	f7ff fc08 	bl	800191c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 800210c:	2085      	movs	r0, #133	@ 0x85
 800210e:	f7ff fc15 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8002112:	2010      	movs	r0, #16
 8002114:	f7ff fc12 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8002118:	207a      	movs	r0, #122	@ 0x7a
 800211a:	f7ff fc0f 	bl	800193c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 800211e:	20cb      	movs	r0, #203	@ 0xcb
 8002120:	f7ff fbfc 	bl	800191c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8002124:	2039      	movs	r0, #57	@ 0x39
 8002126:	f7ff fc09 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800212a:	202c      	movs	r0, #44	@ 0x2c
 800212c:	f7ff fc06 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002130:	2000      	movs	r0, #0
 8002132:	f7ff fc03 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8002136:	2034      	movs	r0, #52	@ 0x34
 8002138:	f7ff fc00 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 800213c:	2002      	movs	r0, #2
 800213e:	f7ff fbfd 	bl	800193c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8002142:	20f7      	movs	r0, #247	@ 0xf7
 8002144:	f7ff fbea 	bl	800191c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8002148:	2020      	movs	r0, #32
 800214a:	f7ff fbf7 	bl	800193c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 800214e:	20ea      	movs	r0, #234	@ 0xea
 8002150:	f7ff fbe4 	bl	800191c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002154:	2000      	movs	r0, #0
 8002156:	f7ff fbf1 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800215a:	2000      	movs	r0, #0
 800215c:	f7ff fbee 	bl	800193c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8002160:	20c0      	movs	r0, #192	@ 0xc0
 8002162:	f7ff fbdb 	bl	800191c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8002166:	201b      	movs	r0, #27
 8002168:	f7ff fbe8 	bl	800193c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 800216c:	20c1      	movs	r0, #193	@ 0xc1
 800216e:	f7ff fbd5 	bl	800191c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002172:	2001      	movs	r0, #1
 8002174:	f7ff fbe2 	bl	800193c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8002178:	20c5      	movs	r0, #197	@ 0xc5
 800217a:	f7ff fbcf 	bl	800191c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800217e:	2030      	movs	r0, #48	@ 0x30
 8002180:	f7ff fbdc 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8002184:	2030      	movs	r0, #48	@ 0x30
 8002186:	f7ff fbd9 	bl	800193c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 800218a:	20c7      	movs	r0, #199	@ 0xc7
 800218c:	f7ff fbc6 	bl	800191c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8002190:	20b7      	movs	r0, #183	@ 0xb7
 8002192:	f7ff fbd3 	bl	800193c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8002196:	2036      	movs	r0, #54	@ 0x36
 8002198:	f7ff fbc0 	bl	800191c <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 800219c:	2008      	movs	r0, #8
 800219e:	f7ff fbcd 	bl	800193c <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80021a2:	203a      	movs	r0, #58	@ 0x3a
 80021a4:	f7ff fbba 	bl	800191c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80021a8:	2055      	movs	r0, #85	@ 0x55
 80021aa:	f7ff fbc7 	bl	800193c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80021ae:	20b1      	movs	r0, #177	@ 0xb1
 80021b0:	f7ff fbb4 	bl	800191c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80021b4:	2000      	movs	r0, #0
 80021b6:	f7ff fbc1 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80021ba:	201a      	movs	r0, #26
 80021bc:	f7ff fbbe 	bl	800193c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80021c0:	20b6      	movs	r0, #182	@ 0xb6
 80021c2:	f7ff fbab 	bl	800191c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80021c6:	200a      	movs	r0, #10
 80021c8:	f7ff fbb8 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 80021cc:	20a2      	movs	r0, #162	@ 0xa2
 80021ce:	f7ff fbb5 	bl	800193c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80021d2:	20f2      	movs	r0, #242	@ 0xf2
 80021d4:	f7ff fba2 	bl	800191c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80021d8:	2000      	movs	r0, #0
 80021da:	f7ff fbaf 	bl	800193c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 80021de:	2026      	movs	r0, #38	@ 0x26
 80021e0:	f7ff fb9c 	bl	800191c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 80021e4:	2001      	movs	r0, #1
 80021e6:	f7ff fba9 	bl	800193c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 80021ea:	20e0      	movs	r0, #224	@ 0xe0
 80021ec:	f7ff fb96 	bl	800191c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 80021f0:	200f      	movs	r0, #15
 80021f2:	f7ff fba3 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 80021f6:	202a      	movs	r0, #42	@ 0x2a
 80021f8:	f7ff fba0 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 80021fc:	2028      	movs	r0, #40	@ 0x28
 80021fe:	f7ff fb9d 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8002202:	2008      	movs	r0, #8
 8002204:	f7ff fb9a 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8002208:	200e      	movs	r0, #14
 800220a:	f7ff fb97 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800220e:	2008      	movs	r0, #8
 8002210:	f7ff fb94 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8002214:	2054      	movs	r0, #84	@ 0x54
 8002216:	f7ff fb91 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800221a:	20a9      	movs	r0, #169	@ 0xa9
 800221c:	f7ff fb8e 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8002220:	2043      	movs	r0, #67	@ 0x43
 8002222:	f7ff fb8b 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8002226:	200a      	movs	r0, #10
 8002228:	f7ff fb88 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800222c:	200f      	movs	r0, #15
 800222e:	f7ff fb85 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002232:	2000      	movs	r0, #0
 8002234:	f7ff fb82 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002238:	2000      	movs	r0, #0
 800223a:	f7ff fb7f 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800223e:	2000      	movs	r0, #0
 8002240:	f7ff fb7c 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8002244:	2000      	movs	r0, #0
 8002246:	f7ff fb79 	bl	800193c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800224a:	20e1      	movs	r0, #225	@ 0xe1
 800224c:	f7ff fb66 	bl	800191c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8002250:	2000      	movs	r0, #0
 8002252:	f7ff fb73 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8002256:	2015      	movs	r0, #21
 8002258:	f7ff fb70 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 800225c:	2017      	movs	r0, #23
 800225e:	f7ff fb6d 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8002262:	2007      	movs	r0, #7
 8002264:	f7ff fb6a 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8002268:	2011      	movs	r0, #17
 800226a:	f7ff fb67 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 800226e:	2006      	movs	r0, #6
 8002270:	f7ff fb64 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8002274:	202b      	movs	r0, #43	@ 0x2b
 8002276:	f7ff fb61 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 800227a:	2056      	movs	r0, #86	@ 0x56
 800227c:	f7ff fb5e 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8002280:	203c      	movs	r0, #60	@ 0x3c
 8002282:	f7ff fb5b 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8002286:	2005      	movs	r0, #5
 8002288:	f7ff fb58 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800228c:	2010      	movs	r0, #16
 800228e:	f7ff fb55 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8002292:	200f      	movs	r0, #15
 8002294:	f7ff fb52 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8002298:	203f      	movs	r0, #63	@ 0x3f
 800229a:	f7ff fb4f 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800229e:	203f      	movs	r0, #63	@ 0x3f
 80022a0:	f7ff fb4c 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80022a4:	200f      	movs	r0, #15
 80022a6:	f7ff fb49 	bl	800193c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80022aa:	202b      	movs	r0, #43	@ 0x2b
 80022ac:	f7ff fb36 	bl	800191c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80022b0:	2000      	movs	r0, #0
 80022b2:	f7ff fb43 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80022b6:	2000      	movs	r0, #0
 80022b8:	f7ff fb40 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80022bc:	2001      	movs	r0, #1
 80022be:	f7ff fb3d 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80022c2:	203f      	movs	r0, #63	@ 0x3f
 80022c4:	f7ff fb3a 	bl	800193c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80022c8:	202a      	movs	r0, #42	@ 0x2a
 80022ca:	f7ff fb27 	bl	800191c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80022ce:	2000      	movs	r0, #0
 80022d0:	f7ff fb34 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80022d4:	2000      	movs	r0, #0
 80022d6:	f7ff fb31 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80022da:	2000      	movs	r0, #0
 80022dc:	f7ff fb2e 	bl	800193c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 80022e0:	20ef      	movs	r0, #239	@ 0xef
 80022e2:	f7ff fb2b 	bl	800193c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 80022e6:	2011      	movs	r0, #17
 80022e8:	f7ff fb18 	bl	800191c <LCD_WR_REG>
	HAL_Delay(120);
 80022ec:	2078      	movs	r0, #120	@ 0x78
 80022ee:	f001 f9a1 	bl	8003634 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 80022f2:	2029      	movs	r0, #41	@ 0x29
 80022f4:	f7ff fb12 	bl	800191c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 80022f8:	2201      	movs	r2, #1
 80022fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022fe:	4804      	ldr	r0, [pc, #16]	@ (8002310 <lcd_init+0x2bc>)
 8002300:	f001 fc6a 	bl	8003bd8 <HAL_GPIO_WritePin>
}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40020800 	.word	0x40020800
 800230c:	200000cc 	.word	0x200000cc
 8002310:	40020000 	.word	0x40020000

08002314 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	b29a      	uxth	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	b29b      	uxth	r3, r3
 800232a:	4413      	add	r3, r2
 800232c:	b298      	uxth	r0, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	b29a      	uxth	r2, r3
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	b29b      	uxth	r3, r3
 8002336:	4413      	add	r3, r2
 8002338:	b29b      	uxth	r3, r3
 800233a:	8b3a      	ldrh	r2, [r7, #24]
 800233c:	4619      	mov	r1, r3
 800233e:	f7ff fbd3 	bl	8001ae8 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	b29a      	uxth	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	b29b      	uxth	r3, r3
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	b298      	uxth	r0, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	b29a      	uxth	r2, r3
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	b29b      	uxth	r3, r3
 8002356:	4413      	add	r3, r2
 8002358:	b29b      	uxth	r3, r3
 800235a:	8b3a      	ldrh	r2, [r7, #24]
 800235c:	4619      	mov	r1, r3
 800235e:	f7ff fbc3 	bl	8001ae8 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	b29a      	uxth	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	b29b      	uxth	r3, r3
 800236a:	4413      	add	r3, r2
 800236c:	b298      	uxth	r0, r3
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	b29a      	uxth	r2, r3
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	b29b      	uxth	r3, r3
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	b29b      	uxth	r3, r3
 800237a:	8b3a      	ldrh	r2, [r7, #24]
 800237c:	4619      	mov	r1, r3
 800237e:	f7ff fbb3 	bl	8001ae8 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	b29a      	uxth	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	b29b      	uxth	r3, r3
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	b298      	uxth	r0, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	b29a      	uxth	r2, r3
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	b29b      	uxth	r3, r3
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	b29b      	uxth	r3, r3
 800239a:	8b3a      	ldrh	r2, [r7, #24]
 800239c:	4619      	mov	r1, r3
 800239e:	f7ff fba3 	bl	8001ae8 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	4413      	add	r3, r2
 80023ac:	b298      	uxth	r0, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	4413      	add	r3, r2
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	8b3a      	ldrh	r2, [r7, #24]
 80023bc:	4619      	mov	r1, r3
 80023be:	f7ff fb93 	bl	8001ae8 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	b298      	uxth	r0, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	b29b      	uxth	r3, r3
 80023da:	8b3a      	ldrh	r2, [r7, #24]
 80023dc:	4619      	mov	r1, r3
 80023de:	f7ff fb83 	bl	8001ae8 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	4413      	add	r3, r2
 80023ec:	b298      	uxth	r0, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	8b3a      	ldrh	r2, [r7, #24]
 80023fc:	4619      	mov	r1, r3
 80023fe:	f7ff fb73 	bl	8001ae8 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	b29a      	uxth	r2, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	b29b      	uxth	r3, r3
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	b298      	uxth	r0, r3
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	b29a      	uxth	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	b29b      	uxth	r3, r3
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	b29b      	uxth	r3, r3
 800241a:	8b3a      	ldrh	r2, [r7, #24]
 800241c:	4619      	mov	r1, r3
 800241e:	f7ff fb63 	bl	8001ae8 <lcd_DrawPoint>
}
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b08a      	sub	sp, #40	@ 0x28
 800242e:	af02      	add	r7, sp, #8
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	4613      	mov	r3, r2
 8002438:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	f1c3 0303 	rsb	r3, r3, #3
 800244a:	613b      	str	r3, [r7, #16]


	if (fill)
 800244c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244e:	2b00      	cmp	r3, #0
 8002450:	d04f      	beq.n	80024f2 <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 8002452:	e029      	b.n	80024a8 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	617b      	str	r3, [r7, #20]
 8002458:	e00a      	b.n	8002470 <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f7ff ff55 	bl	8002314 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	3301      	adds	r3, #1
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	429a      	cmp	r2, r3
 8002476:	ddf0      	ble.n	800245a <lcd_DrawCircle+0x30>

			if (d < 0) {
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	da06      	bge.n	800248c <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	009a      	lsls	r2, r3, #2
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4413      	add	r3, r2
 8002486:	3306      	adds	r3, #6
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	e00a      	b.n	80024a2 <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 800248c:	69fa      	ldr	r2, [r7, #28]
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	009a      	lsls	r2, r3, #2
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4413      	add	r3, r2
 8002498:	330a      	adds	r3, #10
 800249a:	613b      	str	r3, [r7, #16]
				y--;
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	3b01      	subs	r3, #1
 80024a0:	61bb      	str	r3, [r7, #24]
			}
			x++;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3301      	adds	r3, #1
 80024a6:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80024a8:	69fa      	ldr	r2, [r7, #28]
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	ddd1      	ble.n	8002454 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 80024b0:	e023      	b.n	80024fa <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	69fa      	ldr	r2, [r7, #28]
 80024ba:	68b9      	ldr	r1, [r7, #8]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f7ff ff29 	bl	8002314 <_draw_circle_8>
			if (d < 0) {
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	da06      	bge.n	80024d6 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	009a      	lsls	r2, r3, #2
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4413      	add	r3, r2
 80024d0:	3306      	adds	r3, #6
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	e00a      	b.n	80024ec <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	009a      	lsls	r2, r3, #2
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4413      	add	r3, r2
 80024e2:	330a      	adds	r3, #10
 80024e4:	613b      	str	r3, [r7, #16]
				y--;
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	61bb      	str	r3, [r7, #24]
			x++;
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	3301      	adds	r3, #1
 80024f0:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	dddb      	ble.n	80024b2 <lcd_DrawCircle+0x88>
}
 80024fa:	bf00      	nop
 80024fc:	3720      	adds	r7, #32
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b08b      	sub	sp, #44	@ 0x2c
 8002508:	af04      	add	r7, sp, #16
 800250a:	60ba      	str	r2, [r7, #8]
 800250c:	461a      	mov	r2, r3
 800250e:	4603      	mov	r3, r0
 8002510:	81fb      	strh	r3, [r7, #14]
 8002512:	460b      	mov	r3, r1
 8002514:	81bb      	strh	r3, [r7, #12]
 8002516:	4613      	mov	r3, r2
 8002518:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800251a:	89fb      	ldrh	r3, [r7, #14]
 800251c:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 800251e:	2300      	movs	r3, #0
 8002520:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8002522:	e048      	b.n	80025b6 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8002524:	7dfb      	ldrb	r3, [r7, #23]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d145      	bne.n	80025b6 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800252a:	89fa      	ldrh	r2, [r7, #14]
 800252c:	4b26      	ldr	r3, [pc, #152]	@ (80025c8 <lcd_ShowStr+0xc4>)
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	4619      	mov	r1, r3
 8002532:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002536:	085b      	lsrs	r3, r3, #1
 8002538:	b2db      	uxtb	r3, r3
 800253a:	1acb      	subs	r3, r1, r3
 800253c:	429a      	cmp	r2, r3
 800253e:	dc3f      	bgt.n	80025c0 <lcd_ShowStr+0xbc>
 8002540:	89ba      	ldrh	r2, [r7, #12]
 8002542:	4b21      	ldr	r3, [pc, #132]	@ (80025c8 <lcd_ShowStr+0xc4>)
 8002544:	885b      	ldrh	r3, [r3, #2]
 8002546:	4619      	mov	r1, r3
 8002548:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800254c:	1acb      	subs	r3, r1, r3
 800254e:	429a      	cmp	r2, r3
 8002550:	dc36      	bgt.n	80025c0 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b80      	cmp	r3, #128	@ 0x80
 8002558:	d902      	bls.n	8002560 <lcd_ShowStr+0x5c>
 800255a:	2301      	movs	r3, #1
 800255c:	75fb      	strb	r3, [r7, #23]
 800255e:	e02a      	b.n	80025b6 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b0d      	cmp	r3, #13
 8002566:	d10b      	bne.n	8002580 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002568:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800256c:	b29a      	uxth	r2, r3
 800256e:	89bb      	ldrh	r3, [r7, #12]
 8002570:	4413      	add	r3, r2
 8002572:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002574:	8abb      	ldrh	r3, [r7, #20]
 8002576:	81fb      	strh	r3, [r7, #14]
					str++;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	3301      	adds	r3, #1
 800257c:	60bb      	str	r3, [r7, #8]
 800257e:	e017      	b.n	80025b0 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	781a      	ldrb	r2, [r3, #0]
 8002584:	88fc      	ldrh	r4, [r7, #6]
 8002586:	89b9      	ldrh	r1, [r7, #12]
 8002588:	89f8      	ldrh	r0, [r7, #14]
 800258a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800258e:	9302      	str	r3, [sp, #8]
 8002590:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	4623      	mov	r3, r4
 800259c:	f7ff fb76 	bl	8001c8c <lcd_ShowChar>
					x+=sizey/2;
 80025a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80025a4:	085b      	lsrs	r3, r3, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	89fb      	ldrh	r3, [r7, #14]
 80025ac:	4413      	add	r3, r2
 80025ae:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	3301      	adds	r3, #1
 80025b4:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1b2      	bne.n	8002524 <lcd_ShowStr+0x20>
 80025be:	e000      	b.n	80025c2 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80025c0:	bf00      	nop
			}
		}
	}
}
 80025c2:	371c      	adds	r7, #28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd90      	pop	{r4, r7, pc}
 80025c8:	200000cc 	.word	0x200000cc

080025cc <box_rec>:

// draw a rectangle-box
void box_rec(uint8_t box_idx, uint16_t x_start, uint16_t y_start,
			 uint16_t width, uint16_t height, uint16_t color_edge,
			 uint16_t color_fill, uint8_t is_fill)
{
 80025cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	4604      	mov	r4, r0
 80025d4:	4608      	mov	r0, r1
 80025d6:	4611      	mov	r1, r2
 80025d8:	461a      	mov	r2, r3
 80025da:	4623      	mov	r3, r4
 80025dc:	71fb      	strb	r3, [r7, #7]
 80025de:	4603      	mov	r3, r0
 80025e0:	80bb      	strh	r3, [r7, #4]
 80025e2:	460b      	mov	r3, r1
 80025e4:	807b      	strh	r3, [r7, #2]
 80025e6:	4613      	mov	r3, r2
 80025e8:	803b      	strh	r3, [r7, #0]
	BOX[box_idx].X = x_start;
 80025ea:	79fa      	ldrb	r2, [r7, #7]
 80025ec:	4970      	ldr	r1, [pc, #448]	@ (80027b0 <box_rec+0x1e4>)
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	1a9b      	subs	r3, r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	440b      	add	r3, r1
 80025f8:	88ba      	ldrh	r2, [r7, #4]
 80025fa:	801a      	strh	r2, [r3, #0]
	BOX[box_idx].Y = y_start;
 80025fc:	79fa      	ldrb	r2, [r7, #7]
 80025fe:	496c      	ldr	r1, [pc, #432]	@ (80027b0 <box_rec+0x1e4>)
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	440b      	add	r3, r1
 800260a:	3302      	adds	r3, #2
 800260c:	887a      	ldrh	r2, [r7, #2]
 800260e:	801a      	strh	r2, [r3, #0]
	BOX[box_idx].height = height;
 8002610:	79fa      	ldrb	r2, [r7, #7]
 8002612:	4967      	ldr	r1, [pc, #412]	@ (80027b0 <box_rec+0x1e4>)
 8002614:	4613      	mov	r3, r2
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	440b      	add	r3, r1
 800261e:	3304      	adds	r3, #4
 8002620:	8c3a      	ldrh	r2, [r7, #32]
 8002622:	801a      	strh	r2, [r3, #0]
	BOX[box_idx].width = width;
 8002624:	79fa      	ldrb	r2, [r7, #7]
 8002626:	4962      	ldr	r1, [pc, #392]	@ (80027b0 <box_rec+0x1e4>)
 8002628:	4613      	mov	r3, r2
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	1a9b      	subs	r3, r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	440b      	add	r3, r1
 8002632:	3306      	adds	r3, #6
 8002634:	883a      	ldrh	r2, [r7, #0]
 8002636:	801a      	strh	r2, [r3, #0]
	BOX[box_idx].COLOR_EDGE = color_edge;
 8002638:	79fa      	ldrb	r2, [r7, #7]
 800263a:	495d      	ldr	r1, [pc, #372]	@ (80027b0 <box_rec+0x1e4>)
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	1a9b      	subs	r3, r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	440b      	add	r3, r1
 8002646:	3308      	adds	r3, #8
 8002648:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800264a:	801a      	strh	r2, [r3, #0]
	BOX[box_idx].COLOR_FILL = color_fill;
 800264c:	79fa      	ldrb	r2, [r7, #7]
 800264e:	4958      	ldr	r1, [pc, #352]	@ (80027b0 <box_rec+0x1e4>)
 8002650:	4613      	mov	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	440b      	add	r3, r1
 800265a:	330a      	adds	r3, #10
 800265c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800265e:	801a      	strh	r2, [r3, #0]
	BOX[box_idx].is_fill = is_fill;
 8002660:	79fa      	ldrb	r2, [r7, #7]
 8002662:	4953      	ldr	r1, [pc, #332]	@ (80027b0 <box_rec+0x1e4>)
 8002664:	4613      	mov	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	440b      	add	r3, r1
 800266e:	330c      	adds	r3, #12
 8002670:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002674:	701a      	strb	r2, [r3, #0]
	lcd_DrawRectangle(BOX[box_idx].X, BOX[box_idx].Y,
 8002676:	79fa      	ldrb	r2, [r7, #7]
 8002678:	494d      	ldr	r1, [pc, #308]	@ (80027b0 <box_rec+0x1e4>)
 800267a:	4613      	mov	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	440b      	add	r3, r1
 8002684:	8818      	ldrh	r0, [r3, #0]
 8002686:	79fa      	ldrb	r2, [r7, #7]
 8002688:	4949      	ldr	r1, [pc, #292]	@ (80027b0 <box_rec+0x1e4>)
 800268a:	4613      	mov	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	1a9b      	subs	r3, r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	440b      	add	r3, r1
 8002694:	3302      	adds	r3, #2
 8002696:	881c      	ldrh	r4, [r3, #0]
					  BOX[box_idx].X + BOX[box_idx].width,
 8002698:	79fa      	ldrb	r2, [r7, #7]
 800269a:	4945      	ldr	r1, [pc, #276]	@ (80027b0 <box_rec+0x1e4>)
 800269c:	4613      	mov	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	440b      	add	r3, r1
 80026a6:	8819      	ldrh	r1, [r3, #0]
 80026a8:	79fa      	ldrb	r2, [r7, #7]
 80026aa:	4d41      	ldr	r5, [pc, #260]	@ (80027b0 <box_rec+0x1e4>)
 80026ac:	4613      	mov	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	442b      	add	r3, r5
 80026b6:	3306      	adds	r3, #6
 80026b8:	881b      	ldrh	r3, [r3, #0]
	lcd_DrawRectangle(BOX[box_idx].X, BOX[box_idx].Y,
 80026ba:	440b      	add	r3, r1
 80026bc:	b29d      	uxth	r5, r3
					  BOX[box_idx].Y + BOX[box_idx].height, BOX[box_idx].COLOR_EDGE);
 80026be:	79fa      	ldrb	r2, [r7, #7]
 80026c0:	493b      	ldr	r1, [pc, #236]	@ (80027b0 <box_rec+0x1e4>)
 80026c2:	4613      	mov	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	1a9b      	subs	r3, r3, r2
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	440b      	add	r3, r1
 80026cc:	3302      	adds	r3, #2
 80026ce:	8819      	ldrh	r1, [r3, #0]
 80026d0:	79fa      	ldrb	r2, [r7, #7]
 80026d2:	4e37      	ldr	r6, [pc, #220]	@ (80027b0 <box_rec+0x1e4>)
 80026d4:	4613      	mov	r3, r2
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4433      	add	r3, r6
 80026de:	3304      	adds	r3, #4
 80026e0:	881b      	ldrh	r3, [r3, #0]
	lcd_DrawRectangle(BOX[box_idx].X, BOX[box_idx].Y,
 80026e2:	440b      	add	r3, r1
 80026e4:	b299      	uxth	r1, r3
 80026e6:	79fa      	ldrb	r2, [r7, #7]
 80026e8:	4e31      	ldr	r6, [pc, #196]	@ (80027b0 <box_rec+0x1e4>)
 80026ea:	4613      	mov	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4433      	add	r3, r6
 80026f4:	3308      	adds	r3, #8
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	460b      	mov	r3, r1
 80026fc:	462a      	mov	r2, r5
 80026fe:	4621      	mov	r1, r4
 8002700:	f7ff fa8d 	bl	8001c1e <lcd_DrawRectangle>
	if (BOX[box_idx].is_fill)
 8002704:	79fa      	ldrb	r2, [r7, #7]
 8002706:	492a      	ldr	r1, [pc, #168]	@ (80027b0 <box_rec+0x1e4>)
 8002708:	4613      	mov	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	440b      	add	r3, r1
 8002712:	330c      	adds	r3, #12
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d046      	beq.n	80027a8 <box_rec+0x1dc>
	{
		lcd_Fill(BOX[box_idx].X, BOX[box_idx].Y,
 800271a:	79fa      	ldrb	r2, [r7, #7]
 800271c:	4924      	ldr	r1, [pc, #144]	@ (80027b0 <box_rec+0x1e4>)
 800271e:	4613      	mov	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	1a9b      	subs	r3, r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	440b      	add	r3, r1
 8002728:	8818      	ldrh	r0, [r3, #0]
 800272a:	79fa      	ldrb	r2, [r7, #7]
 800272c:	4920      	ldr	r1, [pc, #128]	@ (80027b0 <box_rec+0x1e4>)
 800272e:	4613      	mov	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	440b      	add	r3, r1
 8002738:	3302      	adds	r3, #2
 800273a:	881c      	ldrh	r4, [r3, #0]
				 BOX[box_idx].X + BOX[box_idx].width,
 800273c:	79fa      	ldrb	r2, [r7, #7]
 800273e:	491c      	ldr	r1, [pc, #112]	@ (80027b0 <box_rec+0x1e4>)
 8002740:	4613      	mov	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	1a9b      	subs	r3, r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	440b      	add	r3, r1
 800274a:	8819      	ldrh	r1, [r3, #0]
 800274c:	79fa      	ldrb	r2, [r7, #7]
 800274e:	4d18      	ldr	r5, [pc, #96]	@ (80027b0 <box_rec+0x1e4>)
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	442b      	add	r3, r5
 800275a:	3306      	adds	r3, #6
 800275c:	881b      	ldrh	r3, [r3, #0]
		lcd_Fill(BOX[box_idx].X, BOX[box_idx].Y,
 800275e:	440b      	add	r3, r1
 8002760:	b29d      	uxth	r5, r3
				 BOX[box_idx].Y + BOX[box_idx].height, BOX[box_idx].COLOR_FILL);
 8002762:	79fa      	ldrb	r2, [r7, #7]
 8002764:	4912      	ldr	r1, [pc, #72]	@ (80027b0 <box_rec+0x1e4>)
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	1a9b      	subs	r3, r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	440b      	add	r3, r1
 8002770:	3302      	adds	r3, #2
 8002772:	8819      	ldrh	r1, [r3, #0]
 8002774:	79fa      	ldrb	r2, [r7, #7]
 8002776:	4e0e      	ldr	r6, [pc, #56]	@ (80027b0 <box_rec+0x1e4>)
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	4433      	add	r3, r6
 8002782:	3304      	adds	r3, #4
 8002784:	881b      	ldrh	r3, [r3, #0]
		lcd_Fill(BOX[box_idx].X, BOX[box_idx].Y,
 8002786:	440b      	add	r3, r1
 8002788:	b299      	uxth	r1, r3
 800278a:	79fa      	ldrb	r2, [r7, #7]
 800278c:	4e08      	ldr	r6, [pc, #32]	@ (80027b0 <box_rec+0x1e4>)
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	1a9b      	subs	r3, r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4433      	add	r3, r6
 8002798:	330a      	adds	r3, #10
 800279a:	881b      	ldrh	r3, [r3, #0]
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	460b      	mov	r3, r1
 80027a0:	462a      	mov	r2, r5
 80027a2:	4621      	mov	r1, r4
 80027a4:	f7ff f96a 	bl	8001a7c <lcd_Fill>
	}
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027b0:	20000144 	.word	0x20000144

080027b4 <init_traffic_light>:

/*@brief:	function to init traffic light
 * @para:	none
 * @retval:	none*/
void init_traffic_light(void)
{
 80027b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af04      	add	r7, sp, #16
	/*init WE-----------------------------------------------------------------*/
	traffic_WE.x = 40;
 80027ba:	4b60      	ldr	r3, [pc, #384]	@ (800293c <init_traffic_light+0x188>)
 80027bc:	2228      	movs	r2, #40	@ 0x28
 80027be:	801a      	strh	r2, [r3, #0]
	traffic_WE.y = 60;
 80027c0:	4b5e      	ldr	r3, [pc, #376]	@ (800293c <init_traffic_light+0x188>)
 80027c2:	223c      	movs	r2, #60	@ 0x3c
 80027c4:	805a      	strh	r2, [r3, #2]
	traffic_WE.width = 120;
 80027c6:	4b5d      	ldr	r3, [pc, #372]	@ (800293c <init_traffic_light+0x188>)
 80027c8:	2278      	movs	r2, #120	@ 0x78
 80027ca:	80da      	strh	r2, [r3, #6]
	traffic_WE.height = 40;
 80027cc:	4b5b      	ldr	r3, [pc, #364]	@ (800293c <init_traffic_light+0x188>)
 80027ce:	2228      	movs	r2, #40	@ 0x28
 80027d0:	809a      	strh	r2, [r3, #4]
	traffic_WE.COLOR_FILL = GRAY;
 80027d2:	4b5a      	ldr	r3, [pc, #360]	@ (800293c <init_traffic_light+0x188>)
 80027d4:	f248 4230 	movw	r2, #33840	@ 0x8430
 80027d8:	811a      	strh	r2, [r3, #8]
	// draw a black box
	lcd_DrawRectangle(traffic_WE.x, traffic_WE.y, traffic_WE.x + traffic_WE.width, traffic_WE.y + traffic_WE.height, traffic_WE.COLOR_FILL);
 80027da:	4b58      	ldr	r3, [pc, #352]	@ (800293c <init_traffic_light+0x188>)
 80027dc:	8818      	ldrh	r0, [r3, #0]
 80027de:	4b57      	ldr	r3, [pc, #348]	@ (800293c <init_traffic_light+0x188>)
 80027e0:	8859      	ldrh	r1, [r3, #2]
 80027e2:	4b56      	ldr	r3, [pc, #344]	@ (800293c <init_traffic_light+0x188>)
 80027e4:	881a      	ldrh	r2, [r3, #0]
 80027e6:	4b55      	ldr	r3, [pc, #340]	@ (800293c <init_traffic_light+0x188>)
 80027e8:	88db      	ldrh	r3, [r3, #6]
 80027ea:	4413      	add	r3, r2
 80027ec:	b29c      	uxth	r4, r3
 80027ee:	4b53      	ldr	r3, [pc, #332]	@ (800293c <init_traffic_light+0x188>)
 80027f0:	885a      	ldrh	r2, [r3, #2]
 80027f2:	4b52      	ldr	r3, [pc, #328]	@ (800293c <init_traffic_light+0x188>)
 80027f4:	889b      	ldrh	r3, [r3, #4]
 80027f6:	4413      	add	r3, r2
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	4b50      	ldr	r3, [pc, #320]	@ (800293c <init_traffic_light+0x188>)
 80027fc:	891b      	ldrh	r3, [r3, #8]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	4613      	mov	r3, r2
 8002802:	4622      	mov	r2, r4
 8002804:	f7ff fa0b 	bl	8001c1e <lcd_DrawRectangle>
	lcd_Fill(traffic_WE.x, traffic_WE.y, traffic_WE.x + traffic_WE.width, traffic_WE.y + traffic_WE.height, traffic_WE.COLOR_FILL);
 8002808:	4b4c      	ldr	r3, [pc, #304]	@ (800293c <init_traffic_light+0x188>)
 800280a:	8818      	ldrh	r0, [r3, #0]
 800280c:	4b4b      	ldr	r3, [pc, #300]	@ (800293c <init_traffic_light+0x188>)
 800280e:	8859      	ldrh	r1, [r3, #2]
 8002810:	4b4a      	ldr	r3, [pc, #296]	@ (800293c <init_traffic_light+0x188>)
 8002812:	881a      	ldrh	r2, [r3, #0]
 8002814:	4b49      	ldr	r3, [pc, #292]	@ (800293c <init_traffic_light+0x188>)
 8002816:	88db      	ldrh	r3, [r3, #6]
 8002818:	4413      	add	r3, r2
 800281a:	b29c      	uxth	r4, r3
 800281c:	4b47      	ldr	r3, [pc, #284]	@ (800293c <init_traffic_light+0x188>)
 800281e:	885a      	ldrh	r2, [r3, #2]
 8002820:	4b46      	ldr	r3, [pc, #280]	@ (800293c <init_traffic_light+0x188>)
 8002822:	889b      	ldrh	r3, [r3, #4]
 8002824:	4413      	add	r3, r2
 8002826:	b29a      	uxth	r2, r3
 8002828:	4b44      	ldr	r3, [pc, #272]	@ (800293c <init_traffic_light+0x188>)
 800282a:	891b      	ldrh	r3, [r3, #8]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	4613      	mov	r3, r2
 8002830:	4622      	mov	r2, r4
 8002832:	f7ff f923 	bl	8001a7c <lcd_Fill>

	// calculate center and radius of each light inside above black box
	traffic_WE.red.center_x = traffic_WE.x + traffic_WE.width / 6;
 8002836:	4b41      	ldr	r3, [pc, #260]	@ (800293c <init_traffic_light+0x188>)
 8002838:	881a      	ldrh	r2, [r3, #0]
 800283a:	4b40      	ldr	r3, [pc, #256]	@ (800293c <init_traffic_light+0x188>)
 800283c:	88db      	ldrh	r3, [r3, #6]
 800283e:	4940      	ldr	r1, [pc, #256]	@ (8002940 <init_traffic_light+0x18c>)
 8002840:	fba1 1303 	umull	r1, r3, r1, r3
 8002844:	089b      	lsrs	r3, r3, #2
 8002846:	b29b      	uxth	r3, r3
 8002848:	4413      	add	r3, r2
 800284a:	b29a      	uxth	r2, r3
 800284c:	4b3b      	ldr	r3, [pc, #236]	@ (800293c <init_traffic_light+0x188>)
 800284e:	815a      	strh	r2, [r3, #10]
	traffic_WE.yellow.center_x = traffic_WE.x + 3 * traffic_WE.width / 6;
 8002850:	4b3a      	ldr	r3, [pc, #232]	@ (800293c <init_traffic_light+0x188>)
 8002852:	881a      	ldrh	r2, [r3, #0]
 8002854:	4b39      	ldr	r3, [pc, #228]	@ (800293c <init_traffic_light+0x188>)
 8002856:	88db      	ldrh	r3, [r3, #6]
 8002858:	0fd9      	lsrs	r1, r3, #31
 800285a:	440b      	add	r3, r1
 800285c:	105b      	asrs	r3, r3, #1
 800285e:	b29b      	uxth	r3, r3
 8002860:	4413      	add	r3, r2
 8002862:	b29a      	uxth	r2, r3
 8002864:	4b35      	ldr	r3, [pc, #212]	@ (800293c <init_traffic_light+0x188>)
 8002866:	829a      	strh	r2, [r3, #20]
	traffic_WE.green.center_x = traffic_WE.x + 5 * traffic_WE.width / 6;
 8002868:	4b34      	ldr	r3, [pc, #208]	@ (800293c <init_traffic_light+0x188>)
 800286a:	881a      	ldrh	r2, [r3, #0]
 800286c:	4b33      	ldr	r3, [pc, #204]	@ (800293c <init_traffic_light+0x188>)
 800286e:	88db      	ldrh	r3, [r3, #6]
 8002870:	4619      	mov	r1, r3
 8002872:	460b      	mov	r3, r1
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	4932      	ldr	r1, [pc, #200]	@ (8002944 <init_traffic_light+0x190>)
 800287a:	fb81 0103 	smull	r0, r1, r1, r3
 800287e:	17db      	asrs	r3, r3, #31
 8002880:	1acb      	subs	r3, r1, r3
 8002882:	b29b      	uxth	r3, r3
 8002884:	4413      	add	r3, r2
 8002886:	b29a      	uxth	r2, r3
 8002888:	4b2c      	ldr	r3, [pc, #176]	@ (800293c <init_traffic_light+0x188>)
 800288a:	83da      	strh	r2, [r3, #30]

	traffic_WE.red.center_y = traffic_WE.y + traffic_WE.height / 2;
 800288c:	4b2b      	ldr	r3, [pc, #172]	@ (800293c <init_traffic_light+0x188>)
 800288e:	885a      	ldrh	r2, [r3, #2]
 8002890:	4b2a      	ldr	r3, [pc, #168]	@ (800293c <init_traffic_light+0x188>)
 8002892:	889b      	ldrh	r3, [r3, #4]
 8002894:	085b      	lsrs	r3, r3, #1
 8002896:	b29b      	uxth	r3, r3
 8002898:	4413      	add	r3, r2
 800289a:	b29a      	uxth	r2, r3
 800289c:	4b27      	ldr	r3, [pc, #156]	@ (800293c <init_traffic_light+0x188>)
 800289e:	819a      	strh	r2, [r3, #12]
	traffic_WE.yellow.center_y = traffic_WE.red.center_y;
 80028a0:	4b26      	ldr	r3, [pc, #152]	@ (800293c <init_traffic_light+0x188>)
 80028a2:	899a      	ldrh	r2, [r3, #12]
 80028a4:	4b25      	ldr	r3, [pc, #148]	@ (800293c <init_traffic_light+0x188>)
 80028a6:	82da      	strh	r2, [r3, #22]
	traffic_WE.green.center_y = traffic_WE.red.center_y;
 80028a8:	4b24      	ldr	r3, [pc, #144]	@ (800293c <init_traffic_light+0x188>)
 80028aa:	899a      	ldrh	r2, [r3, #12]
 80028ac:	4b23      	ldr	r3, [pc, #140]	@ (800293c <init_traffic_light+0x188>)
 80028ae:	841a      	strh	r2, [r3, #32]

	traffic_WE.red.radius = (traffic_WE.height / 2) * 90 / 100;
 80028b0:	4b22      	ldr	r3, [pc, #136]	@ (800293c <init_traffic_light+0x188>)
 80028b2:	889b      	ldrh	r3, [r3, #4]
 80028b4:	085b      	lsrs	r3, r3, #1
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	461a      	mov	r2, r3
 80028ba:	235a      	movs	r3, #90	@ 0x5a
 80028bc:	fb02 f303 	mul.w	r3, r2, r3
 80028c0:	4a21      	ldr	r2, [pc, #132]	@ (8002948 <init_traffic_light+0x194>)
 80028c2:	fb82 1203 	smull	r1, r2, r2, r3
 80028c6:	1152      	asrs	r2, r2, #5
 80028c8:	17db      	asrs	r3, r3, #31
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	4b1b      	ldr	r3, [pc, #108]	@ (800293c <init_traffic_light+0x188>)
 80028d0:	821a      	strh	r2, [r3, #16]
	traffic_WE.yellow.radius = traffic_WE.red.radius;
 80028d2:	4b1a      	ldr	r3, [pc, #104]	@ (800293c <init_traffic_light+0x188>)
 80028d4:	8a1a      	ldrh	r2, [r3, #16]
 80028d6:	4b19      	ldr	r3, [pc, #100]	@ (800293c <init_traffic_light+0x188>)
 80028d8:	835a      	strh	r2, [r3, #26]
	traffic_WE.green.radius = traffic_WE.red.radius;
 80028da:	4b18      	ldr	r3, [pc, #96]	@ (800293c <init_traffic_light+0x188>)
 80028dc:	8a1a      	ldrh	r2, [r3, #16]
 80028de:	4b17      	ldr	r3, [pc, #92]	@ (800293c <init_traffic_light+0x188>)
 80028e0:	849a      	strh	r2, [r3, #36]	@ 0x24

	traffic_WE.red.is_fill = 1;
 80028e2:	4b16      	ldr	r3, [pc, #88]	@ (800293c <init_traffic_light+0x188>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	749a      	strb	r2, [r3, #18]
	if (traffic_WE.red.is_fill == 1)
 80028e8:	4b14      	ldr	r3, [pc, #80]	@ (800293c <init_traffic_light+0x188>)
 80028ea:	7c9b      	ldrb	r3, [r3, #18]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d104      	bne.n	80028fa <init_traffic_light+0x146>
	{
		traffic_WE.red.COLOR_FILL = RED;
 80028f0:	4b12      	ldr	r3, [pc, #72]	@ (800293c <init_traffic_light+0x188>)
 80028f2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80028f6:	81da      	strh	r2, [r3, #14]
 80028f8:	e002      	b.n	8002900 <init_traffic_light+0x14c>
	}
	else
	{
		traffic_WE.red.COLOR_FILL = BLACK;
 80028fa:	4b10      	ldr	r3, [pc, #64]	@ (800293c <init_traffic_light+0x188>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	81da      	strh	r2, [r3, #14]
	}
	traffic_WE.yellow.is_fill = 1;
 8002900:	4b0e      	ldr	r3, [pc, #56]	@ (800293c <init_traffic_light+0x188>)
 8002902:	2201      	movs	r2, #1
 8002904:	771a      	strb	r2, [r3, #28]
	if (traffic_WE.yellow.is_fill == 1)
 8002906:	4b0d      	ldr	r3, [pc, #52]	@ (800293c <init_traffic_light+0x188>)
 8002908:	7f1b      	ldrb	r3, [r3, #28]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d104      	bne.n	8002918 <init_traffic_light+0x164>
	{
		traffic_WE.yellow.COLOR_FILL = YELLOW;
 800290e:	4b0b      	ldr	r3, [pc, #44]	@ (800293c <init_traffic_light+0x188>)
 8002910:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002914:	831a      	strh	r2, [r3, #24]
 8002916:	e002      	b.n	800291e <init_traffic_light+0x16a>
	}
	else
	{
		traffic_WE.yellow.COLOR_FILL = BLACK;
 8002918:	4b08      	ldr	r3, [pc, #32]	@ (800293c <init_traffic_light+0x188>)
 800291a:	2200      	movs	r2, #0
 800291c:	831a      	strh	r2, [r3, #24]
	}
	traffic_WE.green.is_fill = 1;
 800291e:	4b07      	ldr	r3, [pc, #28]	@ (800293c <init_traffic_light+0x188>)
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	if (traffic_WE.green.is_fill == 1)
 8002926:	4b05      	ldr	r3, [pc, #20]	@ (800293c <init_traffic_light+0x188>)
 8002928:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800292c:	2b01      	cmp	r3, #1
 800292e:	d10d      	bne.n	800294c <init_traffic_light+0x198>
	{
		traffic_WE.green.COLOR_FILL = GREEN;
 8002930:	4b02      	ldr	r3, [pc, #8]	@ (800293c <init_traffic_light+0x188>)
 8002932:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002936:	845a      	strh	r2, [r3, #34]	@ 0x22
 8002938:	e00b      	b.n	8002952 <init_traffic_light+0x19e>
 800293a:	bf00      	nop
 800293c:	200000d4 	.word	0x200000d4
 8002940:	aaaaaaab 	.word	0xaaaaaaab
 8002944:	2aaaaaab 	.word	0x2aaaaaab
 8002948:	51eb851f 	.word	0x51eb851f
	}
	else
	{
		traffic_WE.green.COLOR_FILL = BLACK;
 800294c:	4b94      	ldr	r3, [pc, #592]	@ (8002ba0 <init_traffic_light+0x3ec>)
 800294e:	2200      	movs	r2, #0
 8002950:	845a      	strh	r2, [r3, #34]	@ 0x22
	}
	// draw red
	lcd_DrawCircle(traffic_WE.red.center_x, traffic_WE.red.center_y, traffic_WE.red.COLOR_FILL, traffic_WE.red.radius, traffic_WE.red.is_fill);
 8002952:	4b93      	ldr	r3, [pc, #588]	@ (8002ba0 <init_traffic_light+0x3ec>)
 8002954:	895b      	ldrh	r3, [r3, #10]
 8002956:	4618      	mov	r0, r3
 8002958:	4b91      	ldr	r3, [pc, #580]	@ (8002ba0 <init_traffic_light+0x3ec>)
 800295a:	899b      	ldrh	r3, [r3, #12]
 800295c:	4619      	mov	r1, r3
 800295e:	4b90      	ldr	r3, [pc, #576]	@ (8002ba0 <init_traffic_light+0x3ec>)
 8002960:	89da      	ldrh	r2, [r3, #14]
 8002962:	4b8f      	ldr	r3, [pc, #572]	@ (8002ba0 <init_traffic_light+0x3ec>)
 8002964:	8a1b      	ldrh	r3, [r3, #16]
 8002966:	461c      	mov	r4, r3
 8002968:	4b8d      	ldr	r3, [pc, #564]	@ (8002ba0 <init_traffic_light+0x3ec>)
 800296a:	7c9b      	ldrb	r3, [r3, #18]
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	4623      	mov	r3, r4
 8002970:	f7ff fd5b 	bl	800242a <lcd_DrawCircle>
	// draw yellow
	lcd_DrawCircle(traffic_WE.yellow.center_x, traffic_WE.yellow.center_y, traffic_WE.yellow.COLOR_FILL, traffic_WE.yellow.radius, traffic_WE.yellow.is_fill);
 8002974:	4b8a      	ldr	r3, [pc, #552]	@ (8002ba0 <init_traffic_light+0x3ec>)
 8002976:	8a9b      	ldrh	r3, [r3, #20]
 8002978:	4618      	mov	r0, r3
 800297a:	4b89      	ldr	r3, [pc, #548]	@ (8002ba0 <init_traffic_light+0x3ec>)
 800297c:	8adb      	ldrh	r3, [r3, #22]
 800297e:	4619      	mov	r1, r3
 8002980:	4b87      	ldr	r3, [pc, #540]	@ (8002ba0 <init_traffic_light+0x3ec>)
 8002982:	8b1a      	ldrh	r2, [r3, #24]
 8002984:	4b86      	ldr	r3, [pc, #536]	@ (8002ba0 <init_traffic_light+0x3ec>)
 8002986:	8b5b      	ldrh	r3, [r3, #26]
 8002988:	461c      	mov	r4, r3
 800298a:	4b85      	ldr	r3, [pc, #532]	@ (8002ba0 <init_traffic_light+0x3ec>)
 800298c:	7f1b      	ldrb	r3, [r3, #28]
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	4623      	mov	r3, r4
 8002992:	f7ff fd4a 	bl	800242a <lcd_DrawCircle>
	// draw green
	lcd_DrawCircle(traffic_WE.green.center_x, traffic_WE.green.center_y, traffic_WE.green.COLOR_FILL, traffic_WE.green.radius, traffic_WE.green.is_fill);
 8002996:	4b82      	ldr	r3, [pc, #520]	@ (8002ba0 <init_traffic_light+0x3ec>)
 8002998:	8bdb      	ldrh	r3, [r3, #30]
 800299a:	4618      	mov	r0, r3
 800299c:	4b80      	ldr	r3, [pc, #512]	@ (8002ba0 <init_traffic_light+0x3ec>)
 800299e:	8c1b      	ldrh	r3, [r3, #32]
 80029a0:	4619      	mov	r1, r3
 80029a2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ba0 <init_traffic_light+0x3ec>)
 80029a4:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 80029a6:	4b7e      	ldr	r3, [pc, #504]	@ (8002ba0 <init_traffic_light+0x3ec>)
 80029a8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80029aa:	461c      	mov	r4, r3
 80029ac:	4b7c      	ldr	r3, [pc, #496]	@ (8002ba0 <init_traffic_light+0x3ec>)
 80029ae:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	4623      	mov	r3, r4
 80029b6:	f7ff fd38 	bl	800242a <lcd_DrawCircle>

	// init num
	traffic_WE.num.len = 2;
 80029ba:	4b79      	ldr	r3, [pc, #484]	@ (8002ba0 <init_traffic_light+0x3ec>)
 80029bc:	2202      	movs	r2, #2
 80029be:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	traffic_WE.num.fc = WHITE;
 80029c2:	4b77      	ldr	r3, [pc, #476]	@ (8002ba0 <init_traffic_light+0x3ec>)
 80029c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029c8:	861a      	strh	r2, [r3, #48]	@ 0x30
	traffic_WE.num.bc = BLACK;
 80029ca:	4b75      	ldr	r3, [pc, #468]	@ (8002ba0 <init_traffic_light+0x3ec>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	865a      	strh	r2, [r3, #50]	@ 0x32
	traffic_WE.num.sizey = 32;
 80029d0:	4b73      	ldr	r3, [pc, #460]	@ (8002ba0 <init_traffic_light+0x3ec>)
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	traffic_WE.num.x = traffic_WE.x - traffic_WE.num.len * traffic_WE.num.sizey / 2;
 80029d8:	4b71      	ldr	r3, [pc, #452]	@ (8002ba0 <init_traffic_light+0x3ec>)
 80029da:	881a      	ldrh	r2, [r3, #0]
 80029dc:	4b70      	ldr	r3, [pc, #448]	@ (8002ba0 <init_traffic_light+0x3ec>)
 80029de:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80029e2:	4619      	mov	r1, r3
 80029e4:	4b6e      	ldr	r3, [pc, #440]	@ (8002ba0 <init_traffic_light+0x3ec>)
 80029e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	0fd9      	lsrs	r1, r3, #31
 80029f0:	440b      	add	r3, r1
 80029f2:	105b      	asrs	r3, r3, #1
 80029f4:	425b      	negs	r3, r3
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	4413      	add	r3, r2
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	4b68      	ldr	r3, [pc, #416]	@ (8002ba0 <init_traffic_light+0x3ec>)
 80029fe:	851a      	strh	r2, [r3, #40]	@ 0x28
	traffic_WE.num.y = traffic_WE.y;
 8002a00:	4b67      	ldr	r3, [pc, #412]	@ (8002ba0 <init_traffic_light+0x3ec>)
 8002a02:	885a      	ldrh	r2, [r3, #2]
 8002a04:	4b66      	ldr	r3, [pc, #408]	@ (8002ba0 <init_traffic_light+0x3ec>)
 8002a06:	855a      	strh	r2, [r3, #42]	@ 0x2a
	traffic_WE.num.num = 10;
 8002a08:	4b65      	ldr	r3, [pc, #404]	@ (8002ba0 <init_traffic_light+0x3ec>)
 8002a0a:	220a      	movs	r2, #10
 8002a0c:	859a      	strh	r2, [r3, #44]	@ 0x2c
	lcd_ShowIntNum(traffic_WE.num.x, traffic_WE.num.y, traffic_WE.num.num, traffic_WE.num.len, traffic_WE.num.fc, traffic_WE.num.bc, traffic_WE.num.sizey);
 8002a0e:	4b64      	ldr	r3, [pc, #400]	@ (8002ba0 <init_traffic_light+0x3ec>)
 8002a10:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
 8002a12:	4b63      	ldr	r3, [pc, #396]	@ (8002ba0 <init_traffic_light+0x3ec>)
 8002a14:	8d5c      	ldrh	r4, [r3, #42]	@ 0x2a
 8002a16:	4b62      	ldr	r3, [pc, #392]	@ (8002ba0 <init_traffic_light+0x3ec>)
 8002a18:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8002a1a:	4b61      	ldr	r3, [pc, #388]	@ (8002ba0 <init_traffic_light+0x3ec>)
 8002a1c:	f893 602e 	ldrb.w	r6, [r3, #46]	@ 0x2e
 8002a20:	4b5f      	ldr	r3, [pc, #380]	@ (8002ba0 <init_traffic_light+0x3ec>)
 8002a22:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002a24:	4a5e      	ldr	r2, [pc, #376]	@ (8002ba0 <init_traffic_light+0x3ec>)
 8002a26:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8002a28:	495d      	ldr	r1, [pc, #372]	@ (8002ba0 <init_traffic_light+0x3ec>)
 8002a2a:	f891 1034 	ldrb.w	r1, [r1, #52]	@ 0x34
 8002a2e:	9102      	str	r1, [sp, #8]
 8002a30:	9201      	str	r2, [sp, #4]
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	4633      	mov	r3, r6
 8002a36:	462a      	mov	r2, r5
 8002a38:	4621      	mov	r1, r4
 8002a3a:	f7ff fa13 	bl	8001e64 <lcd_ShowIntNum>
	/*End init WE-------------------------------------------------------------*/

	/*init NS    -------------------------------------------------------------*/
	traffic_NS.x = 180;
 8002a3e:	4b59      	ldr	r3, [pc, #356]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002a40:	22b4      	movs	r2, #180	@ 0xb4
 8002a42:	801a      	strh	r2, [r3, #0]
	traffic_NS.y = 120;
 8002a44:	4b57      	ldr	r3, [pc, #348]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002a46:	2278      	movs	r2, #120	@ 0x78
 8002a48:	805a      	strh	r2, [r3, #2]
	traffic_NS.width = traffic_WE.height;
 8002a4a:	4b55      	ldr	r3, [pc, #340]	@ (8002ba0 <init_traffic_light+0x3ec>)
 8002a4c:	889a      	ldrh	r2, [r3, #4]
 8002a4e:	4b55      	ldr	r3, [pc, #340]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002a50:	80da      	strh	r2, [r3, #6]
	traffic_NS.height = traffic_WE.width;
 8002a52:	4b53      	ldr	r3, [pc, #332]	@ (8002ba0 <init_traffic_light+0x3ec>)
 8002a54:	88da      	ldrh	r2, [r3, #6]
 8002a56:	4b53      	ldr	r3, [pc, #332]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002a58:	809a      	strh	r2, [r3, #4]
	traffic_NS.COLOR_FILL = GRAY;
 8002a5a:	4b52      	ldr	r3, [pc, #328]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002a5c:	f248 4230 	movw	r2, #33840	@ 0x8430
 8002a60:	811a      	strh	r2, [r3, #8]
	// draw a black box
	lcd_DrawRectangle(traffic_NS.x, traffic_NS.y, traffic_NS.x + traffic_NS.width, traffic_NS.y + traffic_NS.height, traffic_NS.COLOR_FILL);
 8002a62:	4b50      	ldr	r3, [pc, #320]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002a64:	8818      	ldrh	r0, [r3, #0]
 8002a66:	4b4f      	ldr	r3, [pc, #316]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002a68:	8859      	ldrh	r1, [r3, #2]
 8002a6a:	4b4e      	ldr	r3, [pc, #312]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002a6c:	881a      	ldrh	r2, [r3, #0]
 8002a6e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002a70:	88db      	ldrh	r3, [r3, #6]
 8002a72:	4413      	add	r3, r2
 8002a74:	b29c      	uxth	r4, r3
 8002a76:	4b4b      	ldr	r3, [pc, #300]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002a78:	885a      	ldrh	r2, [r3, #2]
 8002a7a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002a7c:	889b      	ldrh	r3, [r3, #4]
 8002a7e:	4413      	add	r3, r2
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	4b48      	ldr	r3, [pc, #288]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002a84:	891b      	ldrh	r3, [r3, #8]
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	4622      	mov	r2, r4
 8002a8c:	f7ff f8c7 	bl	8001c1e <lcd_DrawRectangle>
	lcd_Fill(traffic_NS.x, traffic_NS.y, traffic_NS.x + traffic_NS.width, traffic_NS.y + traffic_NS.height, traffic_NS.COLOR_FILL);
 8002a90:	4b44      	ldr	r3, [pc, #272]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002a92:	8818      	ldrh	r0, [r3, #0]
 8002a94:	4b43      	ldr	r3, [pc, #268]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002a96:	8859      	ldrh	r1, [r3, #2]
 8002a98:	4b42      	ldr	r3, [pc, #264]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002a9a:	881a      	ldrh	r2, [r3, #0]
 8002a9c:	4b41      	ldr	r3, [pc, #260]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002a9e:	88db      	ldrh	r3, [r3, #6]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	b29c      	uxth	r4, r3
 8002aa4:	4b3f      	ldr	r3, [pc, #252]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002aa6:	885a      	ldrh	r2, [r3, #2]
 8002aa8:	4b3e      	ldr	r3, [pc, #248]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002aaa:	889b      	ldrh	r3, [r3, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002ab2:	891b      	ldrh	r3, [r3, #8]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	4622      	mov	r2, r4
 8002aba:	f7fe ffdf 	bl	8001a7c <lcd_Fill>

	// calculate center and radius of each light inside above black box
	traffic_NS.red.center_y = traffic_NS.y + traffic_NS.height / 6;
 8002abe:	4b39      	ldr	r3, [pc, #228]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002ac0:	885a      	ldrh	r2, [r3, #2]
 8002ac2:	4b38      	ldr	r3, [pc, #224]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002ac4:	889b      	ldrh	r3, [r3, #4]
 8002ac6:	4938      	ldr	r1, [pc, #224]	@ (8002ba8 <init_traffic_light+0x3f4>)
 8002ac8:	fba1 1303 	umull	r1, r3, r1, r3
 8002acc:	089b      	lsrs	r3, r3, #2
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	4b33      	ldr	r3, [pc, #204]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002ad6:	819a      	strh	r2, [r3, #12]
	traffic_NS.yellow.center_y = traffic_NS.y + 3 * traffic_NS.height / 6;
 8002ad8:	4b32      	ldr	r3, [pc, #200]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002ada:	885a      	ldrh	r2, [r3, #2]
 8002adc:	4b31      	ldr	r3, [pc, #196]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002ade:	889b      	ldrh	r3, [r3, #4]
 8002ae0:	0fd9      	lsrs	r1, r3, #31
 8002ae2:	440b      	add	r3, r1
 8002ae4:	105b      	asrs	r3, r3, #1
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002aee:	82da      	strh	r2, [r3, #22]
	traffic_NS.green.center_y = traffic_NS.y + 5 * traffic_NS.height / 6;
 8002af0:	4b2c      	ldr	r3, [pc, #176]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002af2:	885a      	ldrh	r2, [r3, #2]
 8002af4:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002af6:	889b      	ldrh	r3, [r3, #4]
 8002af8:	4619      	mov	r1, r3
 8002afa:	460b      	mov	r3, r1
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	440b      	add	r3, r1
 8002b00:	492a      	ldr	r1, [pc, #168]	@ (8002bac <init_traffic_light+0x3f8>)
 8002b02:	fb81 0103 	smull	r0, r1, r1, r3
 8002b06:	17db      	asrs	r3, r3, #31
 8002b08:	1acb      	subs	r3, r1, r3
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	4b24      	ldr	r3, [pc, #144]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002b12:	841a      	strh	r2, [r3, #32]

	traffic_NS.red.center_x = traffic_NS.x + traffic_NS.width / 2;
 8002b14:	4b23      	ldr	r3, [pc, #140]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002b16:	881a      	ldrh	r2, [r3, #0]
 8002b18:	4b22      	ldr	r3, [pc, #136]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002b1a:	88db      	ldrh	r3, [r3, #6]
 8002b1c:	085b      	lsrs	r3, r3, #1
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	4413      	add	r3, r2
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002b26:	815a      	strh	r2, [r3, #10]
	traffic_NS.yellow.center_x = traffic_NS.red.center_x;
 8002b28:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002b2a:	895a      	ldrh	r2, [r3, #10]
 8002b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002b2e:	829a      	strh	r2, [r3, #20]
	traffic_NS.green.center_x = traffic_NS.red.center_x;
 8002b30:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002b32:	895a      	ldrh	r2, [r3, #10]
 8002b34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002b36:	83da      	strh	r2, [r3, #30]

	traffic_NS.red.radius = (traffic_NS.width / 2) * 90 / 100;
 8002b38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002b3a:	88db      	ldrh	r3, [r3, #6]
 8002b3c:	085b      	lsrs	r3, r3, #1
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	461a      	mov	r2, r3
 8002b42:	235a      	movs	r3, #90	@ 0x5a
 8002b44:	fb02 f303 	mul.w	r3, r2, r3
 8002b48:	4a19      	ldr	r2, [pc, #100]	@ (8002bb0 <init_traffic_light+0x3fc>)
 8002b4a:	fb82 1203 	smull	r1, r2, r2, r3
 8002b4e:	1152      	asrs	r2, r2, #5
 8002b50:	17db      	asrs	r3, r3, #31
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	4b13      	ldr	r3, [pc, #76]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002b58:	821a      	strh	r2, [r3, #16]
	traffic_NS.yellow.radius = traffic_NS.red.radius;
 8002b5a:	4b12      	ldr	r3, [pc, #72]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002b5c:	8a1a      	ldrh	r2, [r3, #16]
 8002b5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002b60:	835a      	strh	r2, [r3, #26]
	traffic_NS.green.radius = traffic_NS.red.radius;
 8002b62:	4b10      	ldr	r3, [pc, #64]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002b64:	8a1a      	ldrh	r2, [r3, #16]
 8002b66:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002b68:	849a      	strh	r2, [r3, #36]	@ 0x24

	traffic_NS.red.is_fill = 1;
 8002b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	749a      	strb	r2, [r3, #18]
	if (traffic_NS.red.is_fill == 1)
 8002b70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002b72:	7c9b      	ldrb	r3, [r3, #18]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d104      	bne.n	8002b82 <init_traffic_light+0x3ce>
	{
		traffic_NS.red.COLOR_FILL = RED;
 8002b78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002b7a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002b7e:	81da      	strh	r2, [r3, #14]
 8002b80:	e002      	b.n	8002b88 <init_traffic_light+0x3d4>
	}
	else
	{
		traffic_NS.red.COLOR_FILL = BLACK;
 8002b82:	4b08      	ldr	r3, [pc, #32]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	81da      	strh	r2, [r3, #14]
	}
	traffic_NS.yellow.is_fill = 1;
 8002b88:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	771a      	strb	r2, [r3, #28]
	if (traffic_NS.yellow.is_fill == 1)
 8002b8e:	4b05      	ldr	r3, [pc, #20]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002b90:	7f1b      	ldrb	r3, [r3, #28]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d10e      	bne.n	8002bb4 <init_traffic_light+0x400>
	{
		traffic_NS.yellow.COLOR_FILL = YELLOW;
 8002b96:	4b03      	ldr	r3, [pc, #12]	@ (8002ba4 <init_traffic_light+0x3f0>)
 8002b98:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002b9c:	831a      	strh	r2, [r3, #24]
 8002b9e:	e00c      	b.n	8002bba <init_traffic_light+0x406>
 8002ba0:	200000d4 	.word	0x200000d4
 8002ba4:	2000010c 	.word	0x2000010c
 8002ba8:	aaaaaaab 	.word	0xaaaaaaab
 8002bac:	2aaaaaab 	.word	0x2aaaaaab
 8002bb0:	51eb851f 	.word	0x51eb851f
	}
	else
	{
		traffic_NS.yellow.COLOR_FILL = BLACK;
 8002bb4:	4b41      	ldr	r3, [pc, #260]	@ (8002cbc <init_traffic_light+0x508>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	831a      	strh	r2, [r3, #24]
	}
	traffic_NS.green.is_fill = 1;
 8002bba:	4b40      	ldr	r3, [pc, #256]	@ (8002cbc <init_traffic_light+0x508>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	if (traffic_NS.green.is_fill == 1)
 8002bc2:	4b3e      	ldr	r3, [pc, #248]	@ (8002cbc <init_traffic_light+0x508>)
 8002bc4:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d104      	bne.n	8002bd6 <init_traffic_light+0x422>
	{
		traffic_NS.green.COLOR_FILL = GREEN;
 8002bcc:	4b3b      	ldr	r3, [pc, #236]	@ (8002cbc <init_traffic_light+0x508>)
 8002bce:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002bd2:	845a      	strh	r2, [r3, #34]	@ 0x22
 8002bd4:	e002      	b.n	8002bdc <init_traffic_light+0x428>
	}
	else
	{
		traffic_NS.green.COLOR_FILL = BLACK;
 8002bd6:	4b39      	ldr	r3, [pc, #228]	@ (8002cbc <init_traffic_light+0x508>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	845a      	strh	r2, [r3, #34]	@ 0x22
	}
	// draw red
	lcd_DrawCircle(traffic_NS.red.center_x, traffic_NS.red.center_y, traffic_NS.red.COLOR_FILL, traffic_NS.red.radius, traffic_NS.red.is_fill);
 8002bdc:	4b37      	ldr	r3, [pc, #220]	@ (8002cbc <init_traffic_light+0x508>)
 8002bde:	895b      	ldrh	r3, [r3, #10]
 8002be0:	4618      	mov	r0, r3
 8002be2:	4b36      	ldr	r3, [pc, #216]	@ (8002cbc <init_traffic_light+0x508>)
 8002be4:	899b      	ldrh	r3, [r3, #12]
 8002be6:	4619      	mov	r1, r3
 8002be8:	4b34      	ldr	r3, [pc, #208]	@ (8002cbc <init_traffic_light+0x508>)
 8002bea:	89da      	ldrh	r2, [r3, #14]
 8002bec:	4b33      	ldr	r3, [pc, #204]	@ (8002cbc <init_traffic_light+0x508>)
 8002bee:	8a1b      	ldrh	r3, [r3, #16]
 8002bf0:	461c      	mov	r4, r3
 8002bf2:	4b32      	ldr	r3, [pc, #200]	@ (8002cbc <init_traffic_light+0x508>)
 8002bf4:	7c9b      	ldrb	r3, [r3, #18]
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	4623      	mov	r3, r4
 8002bfa:	f7ff fc16 	bl	800242a <lcd_DrawCircle>
	// draw yellow
	lcd_DrawCircle(traffic_NS.yellow.center_x, traffic_NS.yellow.center_y, traffic_NS.yellow.COLOR_FILL, traffic_NS.yellow.radius, traffic_NS.yellow.is_fill);
 8002bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8002cbc <init_traffic_light+0x508>)
 8002c00:	8a9b      	ldrh	r3, [r3, #20]
 8002c02:	4618      	mov	r0, r3
 8002c04:	4b2d      	ldr	r3, [pc, #180]	@ (8002cbc <init_traffic_light+0x508>)
 8002c06:	8adb      	ldrh	r3, [r3, #22]
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4b2c      	ldr	r3, [pc, #176]	@ (8002cbc <init_traffic_light+0x508>)
 8002c0c:	8b1a      	ldrh	r2, [r3, #24]
 8002c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8002cbc <init_traffic_light+0x508>)
 8002c10:	8b5b      	ldrh	r3, [r3, #26]
 8002c12:	461c      	mov	r4, r3
 8002c14:	4b29      	ldr	r3, [pc, #164]	@ (8002cbc <init_traffic_light+0x508>)
 8002c16:	7f1b      	ldrb	r3, [r3, #28]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	4623      	mov	r3, r4
 8002c1c:	f7ff fc05 	bl	800242a <lcd_DrawCircle>
	// draw green
	lcd_DrawCircle(traffic_NS.green.center_x, traffic_NS.green.center_y, traffic_NS.green.COLOR_FILL, traffic_NS.green.radius, traffic_NS.green.is_fill);
 8002c20:	4b26      	ldr	r3, [pc, #152]	@ (8002cbc <init_traffic_light+0x508>)
 8002c22:	8bdb      	ldrh	r3, [r3, #30]
 8002c24:	4618      	mov	r0, r3
 8002c26:	4b25      	ldr	r3, [pc, #148]	@ (8002cbc <init_traffic_light+0x508>)
 8002c28:	8c1b      	ldrh	r3, [r3, #32]
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4b23      	ldr	r3, [pc, #140]	@ (8002cbc <init_traffic_light+0x508>)
 8002c2e:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8002c30:	4b22      	ldr	r3, [pc, #136]	@ (8002cbc <init_traffic_light+0x508>)
 8002c32:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002c34:	461c      	mov	r4, r3
 8002c36:	4b21      	ldr	r3, [pc, #132]	@ (8002cbc <init_traffic_light+0x508>)
 8002c38:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	4623      	mov	r3, r4
 8002c40:	f7ff fbf3 	bl	800242a <lcd_DrawCircle>

	// init num
	traffic_NS.num.len = 2;
 8002c44:	4b1d      	ldr	r3, [pc, #116]	@ (8002cbc <init_traffic_light+0x508>)
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	traffic_NS.num.fc = WHITE;
 8002c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cbc <init_traffic_light+0x508>)
 8002c4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c52:	861a      	strh	r2, [r3, #48]	@ 0x30
	traffic_NS.num.bc = BLACK;
 8002c54:	4b19      	ldr	r3, [pc, #100]	@ (8002cbc <init_traffic_light+0x508>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	865a      	strh	r2, [r3, #50]	@ 0x32
	traffic_NS.num.sizey = 32;
 8002c5a:	4b18      	ldr	r3, [pc, #96]	@ (8002cbc <init_traffic_light+0x508>)
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	traffic_NS.num.x = traffic_NS.x;
 8002c62:	4b16      	ldr	r3, [pc, #88]	@ (8002cbc <init_traffic_light+0x508>)
 8002c64:	881a      	ldrh	r2, [r3, #0]
 8002c66:	4b15      	ldr	r3, [pc, #84]	@ (8002cbc <init_traffic_light+0x508>)
 8002c68:	851a      	strh	r2, [r3, #40]	@ 0x28
	traffic_NS.num.y = traffic_NS.y - traffic_NS.num.sizey;
 8002c6a:	4b14      	ldr	r3, [pc, #80]	@ (8002cbc <init_traffic_light+0x508>)
 8002c6c:	885b      	ldrh	r3, [r3, #2]
 8002c6e:	4a13      	ldr	r2, [pc, #76]	@ (8002cbc <init_traffic_light+0x508>)
 8002c70:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	4b10      	ldr	r3, [pc, #64]	@ (8002cbc <init_traffic_light+0x508>)
 8002c7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
	traffic_NS.num.num = 99;
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002cbc <init_traffic_light+0x508>)
 8002c7e:	2263      	movs	r2, #99	@ 0x63
 8002c80:	859a      	strh	r2, [r3, #44]	@ 0x2c
	lcd_ShowIntNum(traffic_NS.num.x, traffic_NS.num.y, traffic_NS.num.num, traffic_NS.num.len, traffic_NS.num.fc, traffic_NS.num.bc, traffic_NS.num.sizey);
 8002c82:	4b0e      	ldr	r3, [pc, #56]	@ (8002cbc <init_traffic_light+0x508>)
 8002c84:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
 8002c86:	4b0d      	ldr	r3, [pc, #52]	@ (8002cbc <init_traffic_light+0x508>)
 8002c88:	8d5c      	ldrh	r4, [r3, #42]	@ 0x2a
 8002c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002cbc <init_traffic_light+0x508>)
 8002c8c:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8002cbc <init_traffic_light+0x508>)
 8002c90:	f893 602e 	ldrb.w	r6, [r3, #46]	@ 0x2e
 8002c94:	4b09      	ldr	r3, [pc, #36]	@ (8002cbc <init_traffic_light+0x508>)
 8002c96:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002c98:	4a08      	ldr	r2, [pc, #32]	@ (8002cbc <init_traffic_light+0x508>)
 8002c9a:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8002c9c:	4907      	ldr	r1, [pc, #28]	@ (8002cbc <init_traffic_light+0x508>)
 8002c9e:	f891 1034 	ldrb.w	r1, [r1, #52]	@ 0x34
 8002ca2:	9102      	str	r1, [sp, #8]
 8002ca4:	9201      	str	r2, [sp, #4]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	4633      	mov	r3, r6
 8002caa:	462a      	mov	r2, r5
 8002cac:	4621      	mov	r1, r4
 8002cae:	f7ff f8d9 	bl	8001e64 <lcd_ShowIntNum>
	/*End init NS-------------------------------------------------------------*/
}
 8002cb2:	bf00      	nop
 8002cb4:	3704      	adds	r7, #4
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	2000010c 	.word	0x2000010c

08002cc0 <control_traffic_light>:
 * @brief: 	display traffic light function
 * @para:	i - id of traffic light(0: WE, 1: NS)
 * 			red, yellow, green - state of red, yellow and green led (1: on, 0: off)
 * @retval:	none*/
void control_traffic_light(uint8_t i, uint8_t red, uint8_t yellow, uint8_t green)
{
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af02      	add	r7, sp, #8
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	4608      	mov	r0, r1
 8002cca:	4611      	mov	r1, r2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4623      	mov	r3, r4
 8002cd0:	71fb      	strb	r3, [r7, #7]
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	71bb      	strb	r3, [r7, #6]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	717b      	strb	r3, [r7, #5]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	713b      	strb	r3, [r7, #4]
	if (i == 0)
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d154      	bne.n	8002d8e <control_traffic_light+0xce>
	{
		// draw red
		if (!red)
 8002ce4:	79bb      	ldrb	r3, [r7, #6]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d104      	bne.n	8002cf4 <control_traffic_light+0x34>
		{
			traffic_WE.red.COLOR_FILL = GRAY;
 8002cea:	4b55      	ldr	r3, [pc, #340]	@ (8002e40 <control_traffic_light+0x180>)
 8002cec:	f248 4230 	movw	r2, #33840	@ 0x8430
 8002cf0:	81da      	strh	r2, [r3, #14]
 8002cf2:	e003      	b.n	8002cfc <control_traffic_light+0x3c>
		}
		else
		{
			traffic_WE.red.COLOR_FILL = RED;
 8002cf4:	4b52      	ldr	r3, [pc, #328]	@ (8002e40 <control_traffic_light+0x180>)
 8002cf6:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002cfa:	81da      	strh	r2, [r3, #14]
		}
		if (!yellow)
 8002cfc:	797b      	ldrb	r3, [r7, #5]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d104      	bne.n	8002d0c <control_traffic_light+0x4c>
		{
			traffic_WE.yellow.COLOR_FILL = GRAY;
 8002d02:	4b4f      	ldr	r3, [pc, #316]	@ (8002e40 <control_traffic_light+0x180>)
 8002d04:	f248 4230 	movw	r2, #33840	@ 0x8430
 8002d08:	831a      	strh	r2, [r3, #24]
 8002d0a:	e003      	b.n	8002d14 <control_traffic_light+0x54>
		}
		else
		{
			traffic_WE.yellow.COLOR_FILL = YELLOW;
 8002d0c:	4b4c      	ldr	r3, [pc, #304]	@ (8002e40 <control_traffic_light+0x180>)
 8002d0e:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002d12:	831a      	strh	r2, [r3, #24]
		}
		if (!green)
 8002d14:	793b      	ldrb	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d104      	bne.n	8002d24 <control_traffic_light+0x64>
		{
			traffic_WE.green.COLOR_FILL = GRAY;
 8002d1a:	4b49      	ldr	r3, [pc, #292]	@ (8002e40 <control_traffic_light+0x180>)
 8002d1c:	f248 4230 	movw	r2, #33840	@ 0x8430
 8002d20:	845a      	strh	r2, [r3, #34]	@ 0x22
 8002d22:	e003      	b.n	8002d2c <control_traffic_light+0x6c>
		}
		else
		{
			traffic_WE.green.COLOR_FILL = GREEN;
 8002d24:	4b46      	ldr	r3, [pc, #280]	@ (8002e40 <control_traffic_light+0x180>)
 8002d26:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002d2a:	845a      	strh	r2, [r3, #34]	@ 0x22
		}
		lcd_DrawCircle(traffic_WE.red.center_x, traffic_WE.red.center_y, traffic_WE.red.COLOR_FILL, traffic_WE.red.radius, 1);
 8002d2c:	4b44      	ldr	r3, [pc, #272]	@ (8002e40 <control_traffic_light+0x180>)
 8002d2e:	895b      	ldrh	r3, [r3, #10]
 8002d30:	4618      	mov	r0, r3
 8002d32:	4b43      	ldr	r3, [pc, #268]	@ (8002e40 <control_traffic_light+0x180>)
 8002d34:	899b      	ldrh	r3, [r3, #12]
 8002d36:	4619      	mov	r1, r3
 8002d38:	4b41      	ldr	r3, [pc, #260]	@ (8002e40 <control_traffic_light+0x180>)
 8002d3a:	89da      	ldrh	r2, [r3, #14]
 8002d3c:	4b40      	ldr	r3, [pc, #256]	@ (8002e40 <control_traffic_light+0x180>)
 8002d3e:	8a1b      	ldrh	r3, [r3, #16]
 8002d40:	461c      	mov	r4, r3
 8002d42:	2301      	movs	r3, #1
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	4623      	mov	r3, r4
 8002d48:	f7ff fb6f 	bl	800242a <lcd_DrawCircle>
		// draw yellow
		lcd_DrawCircle(traffic_WE.yellow.center_x, traffic_WE.yellow.center_y, traffic_WE.yellow.COLOR_FILL, traffic_WE.yellow.radius, 1);
 8002d4c:	4b3c      	ldr	r3, [pc, #240]	@ (8002e40 <control_traffic_light+0x180>)
 8002d4e:	8a9b      	ldrh	r3, [r3, #20]
 8002d50:	4618      	mov	r0, r3
 8002d52:	4b3b      	ldr	r3, [pc, #236]	@ (8002e40 <control_traffic_light+0x180>)
 8002d54:	8adb      	ldrh	r3, [r3, #22]
 8002d56:	4619      	mov	r1, r3
 8002d58:	4b39      	ldr	r3, [pc, #228]	@ (8002e40 <control_traffic_light+0x180>)
 8002d5a:	8b1a      	ldrh	r2, [r3, #24]
 8002d5c:	4b38      	ldr	r3, [pc, #224]	@ (8002e40 <control_traffic_light+0x180>)
 8002d5e:	8b5b      	ldrh	r3, [r3, #26]
 8002d60:	461c      	mov	r4, r3
 8002d62:	2301      	movs	r3, #1
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	4623      	mov	r3, r4
 8002d68:	f7ff fb5f 	bl	800242a <lcd_DrawCircle>
		// draw green
		lcd_DrawCircle(traffic_WE.green.center_x, traffic_WE.green.center_y, traffic_WE.green.COLOR_FILL, traffic_WE.green.radius, 1);
 8002d6c:	4b34      	ldr	r3, [pc, #208]	@ (8002e40 <control_traffic_light+0x180>)
 8002d6e:	8bdb      	ldrh	r3, [r3, #30]
 8002d70:	4618      	mov	r0, r3
 8002d72:	4b33      	ldr	r3, [pc, #204]	@ (8002e40 <control_traffic_light+0x180>)
 8002d74:	8c1b      	ldrh	r3, [r3, #32]
 8002d76:	4619      	mov	r1, r3
 8002d78:	4b31      	ldr	r3, [pc, #196]	@ (8002e40 <control_traffic_light+0x180>)
 8002d7a:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8002d7c:	4b30      	ldr	r3, [pc, #192]	@ (8002e40 <control_traffic_light+0x180>)
 8002d7e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002d80:	461c      	mov	r4, r3
 8002d82:	2301      	movs	r3, #1
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	4623      	mov	r3, r4
 8002d88:	f7ff fb4f 	bl	800242a <lcd_DrawCircle>
		// draw yellow
		lcd_DrawCircle(traffic_NS.yellow.center_x, traffic_NS.yellow.center_y, traffic_NS.yellow.COLOR_FILL, traffic_NS.yellow.radius, 1);
		// draw green
		lcd_DrawCircle(traffic_NS.green.center_x, traffic_NS.green.center_y, traffic_NS.green.COLOR_FILL, traffic_NS.green.radius, 1);
	}
}
 8002d8c:	e053      	b.n	8002e36 <control_traffic_light+0x176>
		if (!red)
 8002d8e:	79bb      	ldrb	r3, [r7, #6]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d104      	bne.n	8002d9e <control_traffic_light+0xde>
			traffic_NS.red.COLOR_FILL = GRAY;
 8002d94:	4b2b      	ldr	r3, [pc, #172]	@ (8002e44 <control_traffic_light+0x184>)
 8002d96:	f248 4230 	movw	r2, #33840	@ 0x8430
 8002d9a:	81da      	strh	r2, [r3, #14]
 8002d9c:	e003      	b.n	8002da6 <control_traffic_light+0xe6>
			traffic_NS.red.COLOR_FILL = RED;
 8002d9e:	4b29      	ldr	r3, [pc, #164]	@ (8002e44 <control_traffic_light+0x184>)
 8002da0:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002da4:	81da      	strh	r2, [r3, #14]
		if (!yellow)
 8002da6:	797b      	ldrb	r3, [r7, #5]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d104      	bne.n	8002db6 <control_traffic_light+0xf6>
			traffic_NS.yellow.COLOR_FILL = GRAY;
 8002dac:	4b25      	ldr	r3, [pc, #148]	@ (8002e44 <control_traffic_light+0x184>)
 8002dae:	f248 4230 	movw	r2, #33840	@ 0x8430
 8002db2:	831a      	strh	r2, [r3, #24]
 8002db4:	e003      	b.n	8002dbe <control_traffic_light+0xfe>
			traffic_NS.yellow.COLOR_FILL = YELLOW;
 8002db6:	4b23      	ldr	r3, [pc, #140]	@ (8002e44 <control_traffic_light+0x184>)
 8002db8:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002dbc:	831a      	strh	r2, [r3, #24]
		if (!green)
 8002dbe:	793b      	ldrb	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d104      	bne.n	8002dce <control_traffic_light+0x10e>
			traffic_NS.green.COLOR_FILL = GRAY;
 8002dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e44 <control_traffic_light+0x184>)
 8002dc6:	f248 4230 	movw	r2, #33840	@ 0x8430
 8002dca:	845a      	strh	r2, [r3, #34]	@ 0x22
 8002dcc:	e003      	b.n	8002dd6 <control_traffic_light+0x116>
			traffic_NS.green.COLOR_FILL = GREEN;
 8002dce:	4b1d      	ldr	r3, [pc, #116]	@ (8002e44 <control_traffic_light+0x184>)
 8002dd0:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002dd4:	845a      	strh	r2, [r3, #34]	@ 0x22
		lcd_DrawCircle(traffic_NS.red.center_x, traffic_NS.red.center_y, traffic_NS.red.COLOR_FILL, traffic_NS.red.radius, 1);
 8002dd6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e44 <control_traffic_light+0x184>)
 8002dd8:	895b      	ldrh	r3, [r3, #10]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	4b19      	ldr	r3, [pc, #100]	@ (8002e44 <control_traffic_light+0x184>)
 8002dde:	899b      	ldrh	r3, [r3, #12]
 8002de0:	4619      	mov	r1, r3
 8002de2:	4b18      	ldr	r3, [pc, #96]	@ (8002e44 <control_traffic_light+0x184>)
 8002de4:	89da      	ldrh	r2, [r3, #14]
 8002de6:	4b17      	ldr	r3, [pc, #92]	@ (8002e44 <control_traffic_light+0x184>)
 8002de8:	8a1b      	ldrh	r3, [r3, #16]
 8002dea:	461c      	mov	r4, r3
 8002dec:	2301      	movs	r3, #1
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	4623      	mov	r3, r4
 8002df2:	f7ff fb1a 	bl	800242a <lcd_DrawCircle>
		lcd_DrawCircle(traffic_NS.yellow.center_x, traffic_NS.yellow.center_y, traffic_NS.yellow.COLOR_FILL, traffic_NS.yellow.radius, 1);
 8002df6:	4b13      	ldr	r3, [pc, #76]	@ (8002e44 <control_traffic_light+0x184>)
 8002df8:	8a9b      	ldrh	r3, [r3, #20]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	4b11      	ldr	r3, [pc, #68]	@ (8002e44 <control_traffic_light+0x184>)
 8002dfe:	8adb      	ldrh	r3, [r3, #22]
 8002e00:	4619      	mov	r1, r3
 8002e02:	4b10      	ldr	r3, [pc, #64]	@ (8002e44 <control_traffic_light+0x184>)
 8002e04:	8b1a      	ldrh	r2, [r3, #24]
 8002e06:	4b0f      	ldr	r3, [pc, #60]	@ (8002e44 <control_traffic_light+0x184>)
 8002e08:	8b5b      	ldrh	r3, [r3, #26]
 8002e0a:	461c      	mov	r4, r3
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	4623      	mov	r3, r4
 8002e12:	f7ff fb0a 	bl	800242a <lcd_DrawCircle>
		lcd_DrawCircle(traffic_NS.green.center_x, traffic_NS.green.center_y, traffic_NS.green.COLOR_FILL, traffic_NS.green.radius, 1);
 8002e16:	4b0b      	ldr	r3, [pc, #44]	@ (8002e44 <control_traffic_light+0x184>)
 8002e18:	8bdb      	ldrh	r3, [r3, #30]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	4b09      	ldr	r3, [pc, #36]	@ (8002e44 <control_traffic_light+0x184>)
 8002e1e:	8c1b      	ldrh	r3, [r3, #32]
 8002e20:	4619      	mov	r1, r3
 8002e22:	4b08      	ldr	r3, [pc, #32]	@ (8002e44 <control_traffic_light+0x184>)
 8002e24:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8002e26:	4b07      	ldr	r3, [pc, #28]	@ (8002e44 <control_traffic_light+0x184>)
 8002e28:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002e2a:	461c      	mov	r4, r3
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	4623      	mov	r3, r4
 8002e32:	f7ff fafa 	bl	800242a <lcd_DrawCircle>
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd90      	pop	{r4, r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	200000d4 	.word	0x200000d4
 8002e44:	2000010c 	.word	0x2000010c

08002e48 <update_led_buf>:
 * @brief: 	update traffic light time value and show mode function
 * @para:	val1 is value of WE time, val2 is value of NS time
 * 			mode is mode of traffic system described in the request
 * @retval:	none*/
void update_led_buf(unsigned val1, unsigned val2, unsigned mode)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af04      	add	r7, sp, #16
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
	if (mode == 4 || mode == 3 || mode == 2)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d005      	beq.n	8002e66 <update_led_buf+0x1e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d002      	beq.n	8002e66 <update_led_buf+0x1e>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d10f      	bne.n	8002e86 <update_led_buf+0x3e>
	{
		lcd_ShowIntNum(140, 280, mode, 1, WHITE, BLACK, 32);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	2320      	movs	r3, #32
 8002e6c:	9302      	str	r3, [sp, #8]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	9301      	str	r3, [sp, #4]
 8002e72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	2301      	movs	r3, #1
 8002e7a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8002e7e:	208c      	movs	r0, #140	@ 0x8c
 8002e80:	f7fe fff0 	bl	8001e64 <lcd_ShowIntNum>
 8002e84:	e00e      	b.n	8002ea4 <update_led_buf+0x5c>
	}
	else
	{
		lcd_ShowIntNum(140, 280, mode, 1, WHITE, BLACK, 32);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	2320      	movs	r3, #32
 8002e8c:	9302      	str	r3, [sp, #8]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8002e9e:	208c      	movs	r0, #140	@ 0x8c
 8002ea0:	f7fe ffe0 	bl	8001e64 <lcd_ShowIntNum>
	}
	traffic_WE.num.num = val1;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	4b04      	ldr	r3, [pc, #16]	@ (8002ebc <update_led_buf+0x74>)
 8002eaa:	859a      	strh	r2, [r3, #44]	@ 0x2c
	traffic_NS.num.num = val2;
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	4b03      	ldr	r3, [pc, #12]	@ (8002ec0 <update_led_buf+0x78>)
 8002eb2:	859a      	strh	r2, [r3, #44]	@ 0x2c
}
 8002eb4:	bf00      	nop
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	200000d4 	.word	0x200000d4
 8002ec0:	2000010c 	.word	0x2000010c

08002ec4 <LCD_DisplayNum>:
/*
 * @brief: 	display number function
 * @para:	noe
 * @retval:	none*/
void LCD_DisplayNum()
{
 8002ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af04      	add	r7, sp, #16
	lcd_ShowStr(60, 280, "MODE:", WHITE, GRAY, 32, 0);
 8002eca:	2300      	movs	r3, #0
 8002ecc:	9302      	str	r3, [sp, #8]
 8002ece:	2320      	movs	r3, #32
 8002ed0:	9301      	str	r3, [sp, #4]
 8002ed2:	f248 4330 	movw	r3, #33840	@ 0x8430
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002edc:	4a1c      	ldr	r2, [pc, #112]	@ (8002f50 <LCD_DisplayNum+0x8c>)
 8002ede:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8002ee2:	203c      	movs	r0, #60	@ 0x3c
 8002ee4:	f7ff fb0e 	bl	8002504 <lcd_ShowStr>
	lcd_ShowIntNum(traffic_WE.num.x, traffic_WE.num.y, traffic_WE.num.num, traffic_WE.num.len, traffic_WE.num.fc, traffic_WE.num.bc, traffic_WE.num.sizey);
 8002ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f54 <LCD_DisplayNum+0x90>)
 8002eea:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
 8002eec:	4b19      	ldr	r3, [pc, #100]	@ (8002f54 <LCD_DisplayNum+0x90>)
 8002eee:	8d5c      	ldrh	r4, [r3, #42]	@ 0x2a
 8002ef0:	4b18      	ldr	r3, [pc, #96]	@ (8002f54 <LCD_DisplayNum+0x90>)
 8002ef2:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8002ef4:	4b17      	ldr	r3, [pc, #92]	@ (8002f54 <LCD_DisplayNum+0x90>)
 8002ef6:	f893 602e 	ldrb.w	r6, [r3, #46]	@ 0x2e
 8002efa:	4b16      	ldr	r3, [pc, #88]	@ (8002f54 <LCD_DisplayNum+0x90>)
 8002efc:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002efe:	4a15      	ldr	r2, [pc, #84]	@ (8002f54 <LCD_DisplayNum+0x90>)
 8002f00:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8002f02:	4914      	ldr	r1, [pc, #80]	@ (8002f54 <LCD_DisplayNum+0x90>)
 8002f04:	f891 1034 	ldrb.w	r1, [r1, #52]	@ 0x34
 8002f08:	9102      	str	r1, [sp, #8]
 8002f0a:	9201      	str	r2, [sp, #4]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	4633      	mov	r3, r6
 8002f10:	462a      	mov	r2, r5
 8002f12:	4621      	mov	r1, r4
 8002f14:	f7fe ffa6 	bl	8001e64 <lcd_ShowIntNum>
	lcd_ShowIntNum(traffic_NS.num.x, traffic_NS.num.y, traffic_NS.num.num, traffic_NS.num.len, traffic_NS.num.fc, traffic_NS.num.bc, traffic_NS.num.sizey);
 8002f18:	4b0f      	ldr	r3, [pc, #60]	@ (8002f58 <LCD_DisplayNum+0x94>)
 8002f1a:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
 8002f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f58 <LCD_DisplayNum+0x94>)
 8002f1e:	8d5c      	ldrh	r4, [r3, #42]	@ 0x2a
 8002f20:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <LCD_DisplayNum+0x94>)
 8002f22:	8d9d      	ldrh	r5, [r3, #44]	@ 0x2c
 8002f24:	4b0c      	ldr	r3, [pc, #48]	@ (8002f58 <LCD_DisplayNum+0x94>)
 8002f26:	f893 602e 	ldrb.w	r6, [r3, #46]	@ 0x2e
 8002f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f58 <LCD_DisplayNum+0x94>)
 8002f2c:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f58 <LCD_DisplayNum+0x94>)
 8002f30:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8002f32:	4909      	ldr	r1, [pc, #36]	@ (8002f58 <LCD_DisplayNum+0x94>)
 8002f34:	f891 1034 	ldrb.w	r1, [r1, #52]	@ 0x34
 8002f38:	9102      	str	r1, [sp, #8]
 8002f3a:	9201      	str	r2, [sp, #4]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	4633      	mov	r3, r6
 8002f40:	462a      	mov	r2, r5
 8002f42:	4621      	mov	r1, r4
 8002f44:	f7fe ff8e 	bl	8001e64 <lcd_ShowIntNum>
}
 8002f48:	bf00      	nop
 8002f4a:	3704      	adds	r7, #4
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f50:	080059a0 	.word	0x080059a0
 8002f54:	200000d4 	.word	0x200000d4
 8002f58:	2000010c 	.word	0x2000010c

08002f5c <init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim2);
 8002f60:	480b      	ldr	r0, [pc, #44]	@ (8002f90 <init+0x34>)
 8002f62:	f001 ffdd 	bl	8004f20 <HAL_TIM_Base_Start_IT>
  set_timer(2, READ_BUTTON_TIME);
 8002f66:	210a      	movs	r1, #10
 8002f68:	2002      	movs	r0, #2
 8002f6a:	f000 f8f5 	bl	8003158 <set_timer>
  set_timer(1, ONE_SECOND);
 8002f6e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002f72:	2001      	movs	r0, #1
 8002f74:	f000 f8f0 	bl	8003158 <set_timer>
  button_init();
 8002f78:	f7fd fe8c 	bl	8000c94 <button_init>
  lcd_init();
 8002f7c:	f7ff f86a 	bl	8002054 <lcd_init>
  lcd_Clear(WHITE);
 8002f80:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002f84:	f7fe fd48 	bl	8001a18 <lcd_Clear>
  init_traffic_light();
 8002f88:	f7ff fc14 	bl	80027b4 <init_traffic_light>
}
 8002f8c:	bf00      	nop
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	2000020c 	.word	0x2000020c

08002f94 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f9a:	f000 fad9 	bl	8003550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f9e:	f000 f861 	bl	8003064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fa2:	f7fe fbc3 	bl	800172c <MX_GPIO_Init>
  MX_SPI1_Init();
 8002fa6:	f000 f945 	bl	8003234 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002faa:	f000 fa35 	bl	8003418 <MX_TIM2_Init>
  MX_FSMC_Init();
 8002fae:	f7fe faed 	bl	800158c <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  init();
 8002fb2:	f7ff ffd3 	bl	8002f5c <init>
  box_rec(0, 0, 0, 240, 50, BLACK, BLACK, 0);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	9303      	str	r3, [sp, #12]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	9302      	str	r3, [sp, #8]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	9301      	str	r3, [sp, #4]
 8002fc2:	2332      	movs	r3, #50	@ 0x32
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	23f0      	movs	r3, #240	@ 0xf0
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2100      	movs	r1, #0
 8002fcc:	2000      	movs	r0, #0
 8002fce:	f7ff fafd 	bl	80025cc <box_rec>
  box_rec(1, 0, 50, 240, 220, BLACK, RED, 0);
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	9303      	str	r3, [sp, #12]
 8002fd6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002fda:	9302      	str	r3, [sp, #8]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	9301      	str	r3, [sp, #4]
 8002fe0:	23dc      	movs	r3, #220	@ 0xdc
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	23f0      	movs	r3, #240	@ 0xf0
 8002fe6:	2232      	movs	r2, #50	@ 0x32
 8002fe8:	2100      	movs	r1, #0
 8002fea:	2001      	movs	r0, #1
 8002fec:	f7ff faee 	bl	80025cc <box_rec>
  box_rec(2, 0, 270, 240, 50, BLACK, BLUE, 0);
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	9303      	str	r3, [sp, #12]
 8002ff4:	231f      	movs	r3, #31
 8002ff6:	9302      	str	r3, [sp, #8]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	9301      	str	r3, [sp, #4]
 8002ffc:	2332      	movs	r3, #50	@ 0x32
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	23f0      	movs	r3, #240	@ 0xf0
 8003002:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8003006:	2100      	movs	r1, #0
 8003008:	2002      	movs	r0, #2
 800300a:	f7ff fadf 	bl	80025cc <box_rec>
  lcd_ShowPicture(10, 0, 50, 50, gImage_logo_hcmut);
 800300e:	4b13      	ldr	r3, [pc, #76]	@ (800305c <main+0xc8>)
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	2332      	movs	r3, #50	@ 0x32
 8003014:	2232      	movs	r2, #50	@ 0x32
 8003016:	2100      	movs	r1, #0
 8003018:	200a      	movs	r0, #10
 800301a:	f7fe ffa1 	bl	8001f60 <lcd_ShowPicture>
  lcd_ShowStr(60, 20, "Lab3_TRAFFIC", BLACK, WHITE, 24, 1);
 800301e:	2301      	movs	r3, #1
 8003020:	9302      	str	r3, [sp, #8]
 8003022:	2318      	movs	r3, #24
 8003024:	9301      	str	r3, [sp, #4]
 8003026:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	2300      	movs	r3, #0
 800302e:	4a0c      	ldr	r2, [pc, #48]	@ (8003060 <main+0xcc>)
 8003030:	2114      	movs	r1, #20
 8003032:	203c      	movs	r0, #60	@ 0x3c
 8003034:	f7ff fa66 	bl	8002504 <lcd_ShowStr>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // read button every READ_BUTTON_TIME
    if (!is_timer_on(2))
 8003038:	2002      	movs	r0, #2
 800303a:	f000 f8eb 	bl	8003214 <is_timer_on>
 800303e:	4603      	mov	r3, r0
 8003040:	f083 0301 	eor.w	r3, r3, #1
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <main+0xc2>
    {
      set_timer(2, READ_BUTTON_TIME);
 800304a:	210a      	movs	r1, #10
 800304c:	2002      	movs	r0, #2
 800304e:	f000 f883 	bl	8003158 <set_timer>
      button_Scan();
 8003052:	f7fd fe2b 	bl	8000cac <button_Scan>
    }

    traffic_run();
 8003056:	f7fe f923 	bl	80012a0 <traffic_run>
    if (!is_timer_on(2))
 800305a:	e7ed      	b.n	8003038 <main+0xa4>
 800305c:	08008938 	.word	0x08008938
 8003060:	080059a8 	.word	0x080059a8

08003064 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b094      	sub	sp, #80	@ 0x50
 8003068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800306a:	f107 0320 	add.w	r3, r7, #32
 800306e:	2230      	movs	r2, #48	@ 0x30
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f002 fc52 	bl	800591c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003078:	f107 030c 	add.w	r3, r7, #12
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
 8003086:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003088:	2300      	movs	r3, #0
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	4b28      	ldr	r3, [pc, #160]	@ (8003130 <SystemClock_Config+0xcc>)
 800308e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003090:	4a27      	ldr	r2, [pc, #156]	@ (8003130 <SystemClock_Config+0xcc>)
 8003092:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003096:	6413      	str	r3, [r2, #64]	@ 0x40
 8003098:	4b25      	ldr	r3, [pc, #148]	@ (8003130 <SystemClock_Config+0xcc>)
 800309a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030a4:	2300      	movs	r3, #0
 80030a6:	607b      	str	r3, [r7, #4]
 80030a8:	4b22      	ldr	r3, [pc, #136]	@ (8003134 <SystemClock_Config+0xd0>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a21      	ldr	r2, [pc, #132]	@ (8003134 <SystemClock_Config+0xd0>)
 80030ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003134 <SystemClock_Config+0xd0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030bc:	607b      	str	r3, [r7, #4]
 80030be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030c0:	2302      	movs	r3, #2
 80030c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030c4:	2301      	movs	r3, #1
 80030c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030c8:	2310      	movs	r3, #16
 80030ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030cc:	2302      	movs	r3, #2
 80030ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030d0:	2300      	movs	r3, #0
 80030d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80030d4:	2308      	movs	r3, #8
 80030d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80030d8:	23a8      	movs	r3, #168	@ 0xa8
 80030da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030dc:	2302      	movs	r3, #2
 80030de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80030e0:	2304      	movs	r3, #4
 80030e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030e4:	f107 0320 	add.w	r3, r7, #32
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fd8f 	bl	8003c0c <HAL_RCC_OscConfig>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80030f4:	f000 f820 	bl	8003138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030f8:	230f      	movs	r3, #15
 80030fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030fc:	2302      	movs	r3, #2
 80030fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003104:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003108:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800310a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800310e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003110:	f107 030c 	add.w	r3, r7, #12
 8003114:	2105      	movs	r1, #5
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fff0 	bl	80040fc <HAL_RCC_ClockConfig>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003122:	f000 f809 	bl	8003138 <Error_Handler>
  }
}
 8003126:	bf00      	nop
 8003128:	3750      	adds	r7, #80	@ 0x50
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800
 8003134:	40007000 	.word	0x40007000

08003138 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800313c:	b672      	cpsid	i
}
 800313e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003140:	bf00      	nop
 8003142:	e7fd      	b.n	8003140 <Error_Handler+0x8>

08003144 <HAL_TIM_PeriodElapsedCallback>:
 * timer[3]: to toggle led
 * timer[4]: to increase value by 1 over time
 * */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
	run_timer();
 800314c:	f000 f830 	bl	80031b0 <run_timer>
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <set_timer>:
 * @para:	i: id of timer
 * 			time: unit is ms
 * @retval:	none
 * */
void set_timer(unsigned i, unsigned int time)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
	timer[i].count = time * FREQUENCY_OF_TIM / 1000.0;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003168:	fb02 f303 	mul.w	r3, r2, r3
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd f96d 	bl	800044c <__aeabi_ui2d>
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	4b0c      	ldr	r3, [pc, #48]	@ (80031a8 <set_timer+0x50>)
 8003178:	f7fd fb0c 	bl	8000794 <__aeabi_ddiv>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4610      	mov	r0, r2
 8003182:	4619      	mov	r1, r3
 8003184:	f7fd fbee 	bl	8000964 <__aeabi_d2uiz>
 8003188:	4602      	mov	r2, r0
 800318a:	4908      	ldr	r1, [pc, #32]	@ (80031ac <set_timer+0x54>)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	440b      	add	r3, r1
 8003192:	605a      	str	r2, [r3, #4]
	timer[i].state = 1;
 8003194:	4a05      	ldr	r2, [pc, #20]	@ (80031ac <set_timer+0x54>)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2101      	movs	r1, #1
 800319a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	408f4000 	.word	0x408f4000
 80031ac:	2000018c 	.word	0x2000018c

080031b0 <run_timer>:
 * @brief:	run all timers that is on
 * @para:	none
 * @retval:	none
 * */
void run_timer(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
	for (unsigned i = 0; i < NUMBER_OF_TIMER; i++)
 80031b6:	2300      	movs	r3, #0
 80031b8:	607b      	str	r3, [r7, #4]
 80031ba:	e01f      	b.n	80031fc <run_timer+0x4c>
	{
		if (timer[i].state)
 80031bc:	4a14      	ldr	r2, [pc, #80]	@ (8003210 <run_timer+0x60>)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d016      	beq.n	80031f6 <run_timer+0x46>
		{
			timer[i].count--;
 80031c8:	4a11      	ldr	r2, [pc, #68]	@ (8003210 <run_timer+0x60>)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4413      	add	r3, r2
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	1e5a      	subs	r2, r3, #1
 80031d4:	490e      	ldr	r1, [pc, #56]	@ (8003210 <run_timer+0x60>)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	440b      	add	r3, r1
 80031dc:	605a      	str	r2, [r3, #4]
			if (timer[i].count <= 0)
 80031de:	4a0c      	ldr	r2, [pc, #48]	@ (8003210 <run_timer+0x60>)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d104      	bne.n	80031f6 <run_timer+0x46>
			{
				timer[i].state = 0;
 80031ec:	4a08      	ldr	r2, [pc, #32]	@ (8003210 <run_timer+0x60>)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2100      	movs	r1, #0
 80031f2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (unsigned i = 0; i < NUMBER_OF_TIMER; i++)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	3301      	adds	r3, #1
 80031fa:	607b      	str	r3, [r7, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d9dc      	bls.n	80031bc <run_timer+0xc>
			}
		}
	}
}
 8003202:	bf00      	nop
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	2000018c 	.word	0x2000018c

08003214 <is_timer_on>:
bool is_timer_on(unsigned i)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
	return (timer[i].state == 1);
 800321c:	4a04      	ldr	r2, [pc, #16]	@ (8003230 <is_timer_on+0x1c>)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
}
 8003224:	4618      	mov	r0, r3
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	2000018c 	.word	0x2000018c

08003234 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003238:	4b17      	ldr	r3, [pc, #92]	@ (8003298 <MX_SPI1_Init+0x64>)
 800323a:	4a18      	ldr	r2, [pc, #96]	@ (800329c <MX_SPI1_Init+0x68>)
 800323c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800323e:	4b16      	ldr	r3, [pc, #88]	@ (8003298 <MX_SPI1_Init+0x64>)
 8003240:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003244:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003246:	4b14      	ldr	r3, [pc, #80]	@ (8003298 <MX_SPI1_Init+0x64>)
 8003248:	2200      	movs	r2, #0
 800324a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800324c:	4b12      	ldr	r3, [pc, #72]	@ (8003298 <MX_SPI1_Init+0x64>)
 800324e:	2200      	movs	r2, #0
 8003250:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003252:	4b11      	ldr	r3, [pc, #68]	@ (8003298 <MX_SPI1_Init+0x64>)
 8003254:	2200      	movs	r2, #0
 8003256:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003258:	4b0f      	ldr	r3, [pc, #60]	@ (8003298 <MX_SPI1_Init+0x64>)
 800325a:	2200      	movs	r2, #0
 800325c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800325e:	4b0e      	ldr	r3, [pc, #56]	@ (8003298 <MX_SPI1_Init+0x64>)
 8003260:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003264:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003266:	4b0c      	ldr	r3, [pc, #48]	@ (8003298 <MX_SPI1_Init+0x64>)
 8003268:	2200      	movs	r2, #0
 800326a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800326c:	4b0a      	ldr	r3, [pc, #40]	@ (8003298 <MX_SPI1_Init+0x64>)
 800326e:	2200      	movs	r2, #0
 8003270:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003272:	4b09      	ldr	r3, [pc, #36]	@ (8003298 <MX_SPI1_Init+0x64>)
 8003274:	2200      	movs	r2, #0
 8003276:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003278:	4b07      	ldr	r3, [pc, #28]	@ (8003298 <MX_SPI1_Init+0x64>)
 800327a:	2200      	movs	r2, #0
 800327c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800327e:	4b06      	ldr	r3, [pc, #24]	@ (8003298 <MX_SPI1_Init+0x64>)
 8003280:	220a      	movs	r2, #10
 8003282:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003284:	4804      	ldr	r0, [pc, #16]	@ (8003298 <MX_SPI1_Init+0x64>)
 8003286:	f001 f925 	bl	80044d4 <HAL_SPI_Init>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003290:	f7ff ff52 	bl	8003138 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003294:	bf00      	nop
 8003296:	bd80      	pop	{r7, pc}
 8003298:	200001b4 	.word	0x200001b4
 800329c:	40013000 	.word	0x40013000

080032a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b08a      	sub	sp, #40	@ 0x28
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032a8:	f107 0314 	add.w	r3, r7, #20
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	605a      	str	r2, [r3, #4]
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	60da      	str	r2, [r3, #12]
 80032b6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a19      	ldr	r2, [pc, #100]	@ (8003324 <HAL_SPI_MspInit+0x84>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d12b      	bne.n	800331a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	4b18      	ldr	r3, [pc, #96]	@ (8003328 <HAL_SPI_MspInit+0x88>)
 80032c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ca:	4a17      	ldr	r2, [pc, #92]	@ (8003328 <HAL_SPI_MspInit+0x88>)
 80032cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80032d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80032d2:	4b15      	ldr	r3, [pc, #84]	@ (8003328 <HAL_SPI_MspInit+0x88>)
 80032d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032da:	613b      	str	r3, [r7, #16]
 80032dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	4b11      	ldr	r3, [pc, #68]	@ (8003328 <HAL_SPI_MspInit+0x88>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e6:	4a10      	ldr	r2, [pc, #64]	@ (8003328 <HAL_SPI_MspInit+0x88>)
 80032e8:	f043 0302 	orr.w	r3, r3, #2
 80032ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80032ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003328 <HAL_SPI_MspInit+0x88>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80032fa:	2338      	movs	r3, #56	@ 0x38
 80032fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fe:	2302      	movs	r3, #2
 8003300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003306:	2303      	movs	r3, #3
 8003308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800330a:	2305      	movs	r3, #5
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800330e:	f107 0314 	add.w	r3, r7, #20
 8003312:	4619      	mov	r1, r3
 8003314:	4805      	ldr	r0, [pc, #20]	@ (800332c <HAL_SPI_MspInit+0x8c>)
 8003316:	f000 fac3 	bl	80038a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800331a:	bf00      	nop
 800331c:	3728      	adds	r7, #40	@ 0x28
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40013000 	.word	0x40013000
 8003328:	40023800 	.word	0x40023800
 800332c:	40020400 	.word	0x40020400

08003330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	607b      	str	r3, [r7, #4]
 800333a:	4b10      	ldr	r3, [pc, #64]	@ (800337c <HAL_MspInit+0x4c>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333e:	4a0f      	ldr	r2, [pc, #60]	@ (800337c <HAL_MspInit+0x4c>)
 8003340:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003344:	6453      	str	r3, [r2, #68]	@ 0x44
 8003346:	4b0d      	ldr	r3, [pc, #52]	@ (800337c <HAL_MspInit+0x4c>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800334e:	607b      	str	r3, [r7, #4]
 8003350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	603b      	str	r3, [r7, #0]
 8003356:	4b09      	ldr	r3, [pc, #36]	@ (800337c <HAL_MspInit+0x4c>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	4a08      	ldr	r2, [pc, #32]	@ (800337c <HAL_MspInit+0x4c>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003360:	6413      	str	r3, [r2, #64]	@ 0x40
 8003362:	4b06      	ldr	r3, [pc, #24]	@ (800337c <HAL_MspInit+0x4c>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40023800 	.word	0x40023800

08003380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <NMI_Handler+0x4>

08003388 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003388:	b480      	push	{r7}
 800338a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800338c:	bf00      	nop
 800338e:	e7fd      	b.n	800338c <HardFault_Handler+0x4>

08003390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003394:	bf00      	nop
 8003396:	e7fd      	b.n	8003394 <MemManage_Handler+0x4>

08003398 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800339c:	bf00      	nop
 800339e:	e7fd      	b.n	800339c <BusFault_Handler+0x4>

080033a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033a4:	bf00      	nop
 80033a6:	e7fd      	b.n	80033a4 <UsageFault_Handler+0x4>

080033a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033b6:	b480      	push	{r7}
 80033b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033c8:	bf00      	nop
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033d6:	f000 f90d 	bl	80035f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033e4:	4802      	ldr	r0, [pc, #8]	@ (80033f0 <TIM2_IRQHandler+0x10>)
 80033e6:	f001 fe0b 	bl	8005000 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033ea:	bf00      	nop
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	2000020c 	.word	0x2000020c

080033f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033f8:	4b06      	ldr	r3, [pc, #24]	@ (8003414 <SystemInit+0x20>)
 80033fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fe:	4a05      	ldr	r2, [pc, #20]	@ (8003414 <SystemInit+0x20>)
 8003400:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003404:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003408:	bf00      	nop
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800341e:	f107 0308 	add.w	r3, r7, #8
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
 8003426:	605a      	str	r2, [r3, #4]
 8003428:	609a      	str	r2, [r3, #8]
 800342a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800342c:	463b      	mov	r3, r7
 800342e:	2200      	movs	r2, #0
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003434:	4b1d      	ldr	r3, [pc, #116]	@ (80034ac <MX_TIM2_Init+0x94>)
 8003436:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800343a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800343c:	4b1b      	ldr	r3, [pc, #108]	@ (80034ac <MX_TIM2_Init+0x94>)
 800343e:	f240 3247 	movw	r2, #839	@ 0x347
 8003442:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003444:	4b19      	ldr	r3, [pc, #100]	@ (80034ac <MX_TIM2_Init+0x94>)
 8003446:	2200      	movs	r2, #0
 8003448:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800344a:	4b18      	ldr	r3, [pc, #96]	@ (80034ac <MX_TIM2_Init+0x94>)
 800344c:	2263      	movs	r2, #99	@ 0x63
 800344e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003450:	4b16      	ldr	r3, [pc, #88]	@ (80034ac <MX_TIM2_Init+0x94>)
 8003452:	2200      	movs	r2, #0
 8003454:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003456:	4b15      	ldr	r3, [pc, #84]	@ (80034ac <MX_TIM2_Init+0x94>)
 8003458:	2200      	movs	r2, #0
 800345a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800345c:	4813      	ldr	r0, [pc, #76]	@ (80034ac <MX_TIM2_Init+0x94>)
 800345e:	f001 fd0f 	bl	8004e80 <HAL_TIM_Base_Init>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003468:	f7ff fe66 	bl	8003138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800346c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003470:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003472:	f107 0308 	add.w	r3, r7, #8
 8003476:	4619      	mov	r1, r3
 8003478:	480c      	ldr	r0, [pc, #48]	@ (80034ac <MX_TIM2_Init+0x94>)
 800347a:	f001 feb1 	bl	80051e0 <HAL_TIM_ConfigClockSource>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003484:	f7ff fe58 	bl	8003138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003488:	2300      	movs	r3, #0
 800348a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800348c:	2300      	movs	r3, #0
 800348e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003490:	463b      	mov	r3, r7
 8003492:	4619      	mov	r1, r3
 8003494:	4805      	ldr	r0, [pc, #20]	@ (80034ac <MX_TIM2_Init+0x94>)
 8003496:	f002 f8d9 	bl	800564c <HAL_TIMEx_MasterConfigSynchronization>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80034a0:	f7ff fe4a 	bl	8003138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80034a4:	bf00      	nop
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	2000020c 	.word	0x2000020c

080034b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c0:	d115      	bne.n	80034ee <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	4b0c      	ldr	r3, [pc, #48]	@ (80034f8 <HAL_TIM_Base_MspInit+0x48>)
 80034c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ca:	4a0b      	ldr	r2, [pc, #44]	@ (80034f8 <HAL_TIM_Base_MspInit+0x48>)
 80034cc:	f043 0301 	orr.w	r3, r3, #1
 80034d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80034d2:	4b09      	ldr	r3, [pc, #36]	@ (80034f8 <HAL_TIM_Base_MspInit+0x48>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80034de:	2200      	movs	r2, #0
 80034e0:	2100      	movs	r1, #0
 80034e2:	201c      	movs	r0, #28
 80034e4:	f000 f9a5 	bl	8003832 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034e8:	201c      	movs	r0, #28
 80034ea:	f000 f9be 	bl	800386a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80034ee:	bf00      	nop
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800

080034fc <Reset_Handler>:
 80034fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003534 <LoopFillZerobss+0x12>
 8003500:	480d      	ldr	r0, [pc, #52]	@ (8003538 <LoopFillZerobss+0x16>)
 8003502:	490e      	ldr	r1, [pc, #56]	@ (800353c <LoopFillZerobss+0x1a>)
 8003504:	4a0e      	ldr	r2, [pc, #56]	@ (8003540 <LoopFillZerobss+0x1e>)
 8003506:	2300      	movs	r3, #0
 8003508:	e002      	b.n	8003510 <LoopCopyDataInit>

0800350a <CopyDataInit>:
 800350a:	58d4      	ldr	r4, [r2, r3]
 800350c:	50c4      	str	r4, [r0, r3]
 800350e:	3304      	adds	r3, #4

08003510 <LoopCopyDataInit>:
 8003510:	18c4      	adds	r4, r0, r3
 8003512:	428c      	cmp	r4, r1
 8003514:	d3f9      	bcc.n	800350a <CopyDataInit>
 8003516:	4a0b      	ldr	r2, [pc, #44]	@ (8003544 <LoopFillZerobss+0x22>)
 8003518:	4c0b      	ldr	r4, [pc, #44]	@ (8003548 <LoopFillZerobss+0x26>)
 800351a:	2300      	movs	r3, #0
 800351c:	e001      	b.n	8003522 <LoopFillZerobss>

0800351e <FillZerobss>:
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	3204      	adds	r2, #4

08003522 <LoopFillZerobss>:
 8003522:	42a2      	cmp	r2, r4
 8003524:	d3fb      	bcc.n	800351e <FillZerobss>
 8003526:	f7ff ff65 	bl	80033f4 <SystemInit>
 800352a:	f002 f9ff 	bl	800592c <__libc_init_array>
 800352e:	f7ff fd31 	bl	8002f94 <main>
 8003532:	4770      	bx	lr
 8003534:	20020000 	.word	0x20020000
 8003538:	20000000 	.word	0x20000000
 800353c:	20000030 	.word	0x20000030
 8003540:	08009ce0 	.word	0x08009ce0
 8003544:	20000030 	.word	0x20000030
 8003548:	20000258 	.word	0x20000258

0800354c <ADC_IRQHandler>:
 800354c:	e7fe      	b.n	800354c <ADC_IRQHandler>
	...

08003550 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003554:	4b0e      	ldr	r3, [pc, #56]	@ (8003590 <HAL_Init+0x40>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a0d      	ldr	r2, [pc, #52]	@ (8003590 <HAL_Init+0x40>)
 800355a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800355e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003560:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <HAL_Init+0x40>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a0a      	ldr	r2, [pc, #40]	@ (8003590 <HAL_Init+0x40>)
 8003566:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800356a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800356c:	4b08      	ldr	r3, [pc, #32]	@ (8003590 <HAL_Init+0x40>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a07      	ldr	r2, [pc, #28]	@ (8003590 <HAL_Init+0x40>)
 8003572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003576:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003578:	2003      	movs	r0, #3
 800357a:	f000 f94f 	bl	800381c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800357e:	200f      	movs	r0, #15
 8003580:	f000 f808 	bl	8003594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003584:	f7ff fed4 	bl	8003330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40023c00 	.word	0x40023c00

08003594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800359c:	4b12      	ldr	r3, [pc, #72]	@ (80035e8 <HAL_InitTick+0x54>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b12      	ldr	r3, [pc, #72]	@ (80035ec <HAL_InitTick+0x58>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	4619      	mov	r1, r3
 80035a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80035ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f967 	bl	8003886 <HAL_SYSTICK_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e00e      	b.n	80035e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b0f      	cmp	r3, #15
 80035c6:	d80a      	bhi.n	80035de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035c8:	2200      	movs	r2, #0
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295
 80035d0:	f000 f92f 	bl	8003832 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035d4:	4a06      	ldr	r2, [pc, #24]	@ (80035f0 <HAL_InitTick+0x5c>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035da:	2300      	movs	r3, #0
 80035dc:	e000      	b.n	80035e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000024 	.word	0x20000024
 80035ec:	2000002c 	.word	0x2000002c
 80035f0:	20000028 	.word	0x20000028

080035f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035f8:	4b06      	ldr	r3, [pc, #24]	@ (8003614 <HAL_IncTick+0x20>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	461a      	mov	r2, r3
 80035fe:	4b06      	ldr	r3, [pc, #24]	@ (8003618 <HAL_IncTick+0x24>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4413      	add	r3, r2
 8003604:	4a04      	ldr	r2, [pc, #16]	@ (8003618 <HAL_IncTick+0x24>)
 8003606:	6013      	str	r3, [r2, #0]
}
 8003608:	bf00      	nop
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	2000002c 	.word	0x2000002c
 8003618:	20000254 	.word	0x20000254

0800361c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return uwTick;
 8003620:	4b03      	ldr	r3, [pc, #12]	@ (8003630 <HAL_GetTick+0x14>)
 8003622:	681b      	ldr	r3, [r3, #0]
}
 8003624:	4618      	mov	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20000254 	.word	0x20000254

08003634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800363c:	f7ff ffee 	bl	800361c <HAL_GetTick>
 8003640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364c:	d005      	beq.n	800365a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800364e:	4b0a      	ldr	r3, [pc, #40]	@ (8003678 <HAL_Delay+0x44>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4413      	add	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800365a:	bf00      	nop
 800365c:	f7ff ffde 	bl	800361c <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	429a      	cmp	r2, r3
 800366a:	d8f7      	bhi.n	800365c <HAL_Delay+0x28>
  {
  }
}
 800366c:	bf00      	nop
 800366e:	bf00      	nop
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	2000002c 	.word	0x2000002c

0800367c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800368c:	4b0c      	ldr	r3, [pc, #48]	@ (80036c0 <__NVIC_SetPriorityGrouping+0x44>)
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003698:	4013      	ands	r3, r2
 800369a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ae:	4a04      	ldr	r2, [pc, #16]	@ (80036c0 <__NVIC_SetPriorityGrouping+0x44>)
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	60d3      	str	r3, [r2, #12]
}
 80036b4:	bf00      	nop
 80036b6:	3714      	adds	r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	e000ed00 	.word	0xe000ed00

080036c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036c8:	4b04      	ldr	r3, [pc, #16]	@ (80036dc <__NVIC_GetPriorityGrouping+0x18>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	0a1b      	lsrs	r3, r3, #8
 80036ce:	f003 0307 	and.w	r3, r3, #7
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	e000ed00 	.word	0xe000ed00

080036e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	db0b      	blt.n	800370a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	f003 021f 	and.w	r2, r3, #31
 80036f8:	4907      	ldr	r1, [pc, #28]	@ (8003718 <__NVIC_EnableIRQ+0x38>)
 80036fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	2001      	movs	r0, #1
 8003702:	fa00 f202 	lsl.w	r2, r0, r2
 8003706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	e000e100 	.word	0xe000e100

0800371c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	6039      	str	r1, [r7, #0]
 8003726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372c:	2b00      	cmp	r3, #0
 800372e:	db0a      	blt.n	8003746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	b2da      	uxtb	r2, r3
 8003734:	490c      	ldr	r1, [pc, #48]	@ (8003768 <__NVIC_SetPriority+0x4c>)
 8003736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373a:	0112      	lsls	r2, r2, #4
 800373c:	b2d2      	uxtb	r2, r2
 800373e:	440b      	add	r3, r1
 8003740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003744:	e00a      	b.n	800375c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	b2da      	uxtb	r2, r3
 800374a:	4908      	ldr	r1, [pc, #32]	@ (800376c <__NVIC_SetPriority+0x50>)
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	3b04      	subs	r3, #4
 8003754:	0112      	lsls	r2, r2, #4
 8003756:	b2d2      	uxtb	r2, r2
 8003758:	440b      	add	r3, r1
 800375a:	761a      	strb	r2, [r3, #24]
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	e000e100 	.word	0xe000e100
 800376c:	e000ed00 	.word	0xe000ed00

08003770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003770:	b480      	push	{r7}
 8003772:	b089      	sub	sp, #36	@ 0x24
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f1c3 0307 	rsb	r3, r3, #7
 800378a:	2b04      	cmp	r3, #4
 800378c:	bf28      	it	cs
 800378e:	2304      	movcs	r3, #4
 8003790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	3304      	adds	r3, #4
 8003796:	2b06      	cmp	r3, #6
 8003798:	d902      	bls.n	80037a0 <NVIC_EncodePriority+0x30>
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	3b03      	subs	r3, #3
 800379e:	e000      	b.n	80037a2 <NVIC_EncodePriority+0x32>
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a4:	f04f 32ff 	mov.w	r2, #4294967295
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43da      	mvns	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	401a      	ands	r2, r3
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037b8:	f04f 31ff 	mov.w	r1, #4294967295
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	fa01 f303 	lsl.w	r3, r1, r3
 80037c2:	43d9      	mvns	r1, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037c8:	4313      	orrs	r3, r2
         );
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3724      	adds	r7, #36	@ 0x24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037e8:	d301      	bcc.n	80037ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ea:	2301      	movs	r3, #1
 80037ec:	e00f      	b.n	800380e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003818 <SysTick_Config+0x40>)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037f6:	210f      	movs	r1, #15
 80037f8:	f04f 30ff 	mov.w	r0, #4294967295
 80037fc:	f7ff ff8e 	bl	800371c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003800:	4b05      	ldr	r3, [pc, #20]	@ (8003818 <SysTick_Config+0x40>)
 8003802:	2200      	movs	r2, #0
 8003804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003806:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <SysTick_Config+0x40>)
 8003808:	2207      	movs	r2, #7
 800380a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	e000e010 	.word	0xe000e010

0800381c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff ff29 	bl	800367c <__NVIC_SetPriorityGrouping>
}
 800382a:	bf00      	nop
 800382c:	3708      	adds	r7, #8
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003832:	b580      	push	{r7, lr}
 8003834:	b086      	sub	sp, #24
 8003836:	af00      	add	r7, sp, #0
 8003838:	4603      	mov	r3, r0
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
 800383e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003840:	2300      	movs	r3, #0
 8003842:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003844:	f7ff ff3e 	bl	80036c4 <__NVIC_GetPriorityGrouping>
 8003848:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	68b9      	ldr	r1, [r7, #8]
 800384e:	6978      	ldr	r0, [r7, #20]
 8003850:	f7ff ff8e 	bl	8003770 <NVIC_EncodePriority>
 8003854:	4602      	mov	r2, r0
 8003856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800385a:	4611      	mov	r1, r2
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff ff5d 	bl	800371c <__NVIC_SetPriority>
}
 8003862:	bf00      	nop
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	4603      	mov	r3, r0
 8003872:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff ff31 	bl	80036e0 <__NVIC_EnableIRQ>
}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7ff ffa2 	bl	80037d8 <SysTick_Config>
 8003894:	4603      	mov	r3, r0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b089      	sub	sp, #36	@ 0x24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038b6:	2300      	movs	r3, #0
 80038b8:	61fb      	str	r3, [r7, #28]
 80038ba:	e16b      	b.n	8003b94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038bc:	2201      	movs	r2, #1
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	f040 815a 	bne.w	8003b8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d005      	beq.n	80038f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d130      	bne.n	8003954 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	2203      	movs	r2, #3
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4013      	ands	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4313      	orrs	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003928:	2201      	movs	r2, #1
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	091b      	lsrs	r3, r3, #4
 800393e:	f003 0201 	and.w	r2, r3, #1
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	2b03      	cmp	r3, #3
 800395e:	d017      	beq.n	8003990 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	2203      	movs	r2, #3
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4313      	orrs	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d123      	bne.n	80039e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	08da      	lsrs	r2, r3, #3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3208      	adds	r2, #8
 80039a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	220f      	movs	r2, #15
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	43db      	mvns	r3, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4013      	ands	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	08da      	lsrs	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3208      	adds	r2, #8
 80039de:	69b9      	ldr	r1, [r7, #24]
 80039e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	2203      	movs	r2, #3
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f003 0203 	and.w	r2, r3, #3
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80b4 	beq.w	8003b8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	4b60      	ldr	r3, [pc, #384]	@ (8003bac <HAL_GPIO_Init+0x30c>)
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2e:	4a5f      	ldr	r2, [pc, #380]	@ (8003bac <HAL_GPIO_Init+0x30c>)
 8003a30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a34:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a36:	4b5d      	ldr	r3, [pc, #372]	@ (8003bac <HAL_GPIO_Init+0x30c>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a42:	4a5b      	ldr	r2, [pc, #364]	@ (8003bb0 <HAL_GPIO_Init+0x310>)
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	089b      	lsrs	r3, r3, #2
 8003a48:	3302      	adds	r3, #2
 8003a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	220f      	movs	r2, #15
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	4013      	ands	r3, r2
 8003a64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a52      	ldr	r2, [pc, #328]	@ (8003bb4 <HAL_GPIO_Init+0x314>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d02b      	beq.n	8003ac6 <HAL_GPIO_Init+0x226>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a51      	ldr	r2, [pc, #324]	@ (8003bb8 <HAL_GPIO_Init+0x318>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d025      	beq.n	8003ac2 <HAL_GPIO_Init+0x222>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a50      	ldr	r2, [pc, #320]	@ (8003bbc <HAL_GPIO_Init+0x31c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d01f      	beq.n	8003abe <HAL_GPIO_Init+0x21e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a4f      	ldr	r2, [pc, #316]	@ (8003bc0 <HAL_GPIO_Init+0x320>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d019      	beq.n	8003aba <HAL_GPIO_Init+0x21a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a4e      	ldr	r2, [pc, #312]	@ (8003bc4 <HAL_GPIO_Init+0x324>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <HAL_GPIO_Init+0x216>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a4d      	ldr	r2, [pc, #308]	@ (8003bc8 <HAL_GPIO_Init+0x328>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00d      	beq.n	8003ab2 <HAL_GPIO_Init+0x212>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a4c      	ldr	r2, [pc, #304]	@ (8003bcc <HAL_GPIO_Init+0x32c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d007      	beq.n	8003aae <HAL_GPIO_Init+0x20e>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a4b      	ldr	r2, [pc, #300]	@ (8003bd0 <HAL_GPIO_Init+0x330>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d101      	bne.n	8003aaa <HAL_GPIO_Init+0x20a>
 8003aa6:	2307      	movs	r3, #7
 8003aa8:	e00e      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003aaa:	2308      	movs	r3, #8
 8003aac:	e00c      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003aae:	2306      	movs	r3, #6
 8003ab0:	e00a      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003ab2:	2305      	movs	r3, #5
 8003ab4:	e008      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	e006      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003aba:	2303      	movs	r3, #3
 8003abc:	e004      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e002      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <HAL_GPIO_Init+0x228>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	f002 0203 	and.w	r2, r2, #3
 8003ace:	0092      	lsls	r2, r2, #2
 8003ad0:	4093      	lsls	r3, r2
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ad8:	4935      	ldr	r1, [pc, #212]	@ (8003bb0 <HAL_GPIO_Init+0x310>)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	089b      	lsrs	r3, r3, #2
 8003ade:	3302      	adds	r3, #2
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	43db      	mvns	r3, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4013      	ands	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b0a:	4a32      	ldr	r2, [pc, #200]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b10:	4b30      	ldr	r3, [pc, #192]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b34:	4a27      	ldr	r2, [pc, #156]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b3a:	4b26      	ldr	r3, [pc, #152]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	43db      	mvns	r3, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4013      	ands	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b5e:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b64:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b88:	4a12      	ldr	r2, [pc, #72]	@ (8003bd4 <HAL_GPIO_Init+0x334>)
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	3301      	adds	r3, #1
 8003b92:	61fb      	str	r3, [r7, #28]
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	2b0f      	cmp	r3, #15
 8003b98:	f67f ae90 	bls.w	80038bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	3724      	adds	r7, #36	@ 0x24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40013800 	.word	0x40013800
 8003bb4:	40020000 	.word	0x40020000
 8003bb8:	40020400 	.word	0x40020400
 8003bbc:	40020800 	.word	0x40020800
 8003bc0:	40020c00 	.word	0x40020c00
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40021400 	.word	0x40021400
 8003bcc:	40021800 	.word	0x40021800
 8003bd0:	40021c00 	.word	0x40021c00
 8003bd4:	40013c00 	.word	0x40013c00

08003bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	460b      	mov	r3, r1
 8003be2:	807b      	strh	r3, [r7, #2]
 8003be4:	4613      	mov	r3, r2
 8003be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003be8:	787b      	ldrb	r3, [r7, #1]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bee:	887a      	ldrh	r2, [r7, #2]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bf4:	e003      	b.n	8003bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bf6:	887b      	ldrh	r3, [r7, #2]
 8003bf8:	041a      	lsls	r2, r3, #16
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	619a      	str	r2, [r3, #24]
}
 8003bfe:	bf00      	nop
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
	...

08003c0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e267      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d075      	beq.n	8003d16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c2a:	4b88      	ldr	r3, [pc, #544]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d00c      	beq.n	8003c50 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c36:	4b85      	ldr	r3, [pc, #532]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c3e:	2b08      	cmp	r3, #8
 8003c40:	d112      	bne.n	8003c68 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c42:	4b82      	ldr	r3, [pc, #520]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c4e:	d10b      	bne.n	8003c68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c50:	4b7e      	ldr	r3, [pc, #504]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d05b      	beq.n	8003d14 <HAL_RCC_OscConfig+0x108>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d157      	bne.n	8003d14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e242      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c70:	d106      	bne.n	8003c80 <HAL_RCC_OscConfig+0x74>
 8003c72:	4b76      	ldr	r3, [pc, #472]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a75      	ldr	r2, [pc, #468]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	e01d      	b.n	8003cbc <HAL_RCC_OscConfig+0xb0>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x98>
 8003c8a:	4b70      	ldr	r3, [pc, #448]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a6f      	ldr	r2, [pc, #444]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003c90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	4b6d      	ldr	r3, [pc, #436]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a6c      	ldr	r2, [pc, #432]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	e00b      	b.n	8003cbc <HAL_RCC_OscConfig+0xb0>
 8003ca4:	4b69      	ldr	r3, [pc, #420]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a68      	ldr	r2, [pc, #416]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	4b66      	ldr	r3, [pc, #408]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a65      	ldr	r2, [pc, #404]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d013      	beq.n	8003cec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc4:	f7ff fcaa 	bl	800361c <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ccc:	f7ff fca6 	bl	800361c <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b64      	cmp	r3, #100	@ 0x64
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e207      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cde:	4b5b      	ldr	r3, [pc, #364]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0xc0>
 8003cea:	e014      	b.n	8003d16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cec:	f7ff fc96 	bl	800361c <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf4:	f7ff fc92 	bl	800361c <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b64      	cmp	r3, #100	@ 0x64
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e1f3      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d06:	4b51      	ldr	r3, [pc, #324]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f0      	bne.n	8003cf4 <HAL_RCC_OscConfig+0xe8>
 8003d12:	e000      	b.n	8003d16 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d063      	beq.n	8003dea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d22:	4b4a      	ldr	r3, [pc, #296]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 030c 	and.w	r3, r3, #12
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00b      	beq.n	8003d46 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d2e:	4b47      	ldr	r3, [pc, #284]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d11c      	bne.n	8003d74 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d3a:	4b44      	ldr	r3, [pc, #272]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d116      	bne.n	8003d74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d46:	4b41      	ldr	r3, [pc, #260]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d005      	beq.n	8003d5e <HAL_RCC_OscConfig+0x152>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d001      	beq.n	8003d5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e1c7      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4937      	ldr	r1, [pc, #220]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d72:	e03a      	b.n	8003dea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d020      	beq.n	8003dbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d7c:	4b34      	ldr	r3, [pc, #208]	@ (8003e50 <HAL_RCC_OscConfig+0x244>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d82:	f7ff fc4b 	bl	800361c <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d8a:	f7ff fc47 	bl	800361c <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e1a8      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0f0      	beq.n	8003d8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da8:	4b28      	ldr	r3, [pc, #160]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	4925      	ldr	r1, [pc, #148]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	600b      	str	r3, [r1, #0]
 8003dbc:	e015      	b.n	8003dea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dbe:	4b24      	ldr	r3, [pc, #144]	@ (8003e50 <HAL_RCC_OscConfig+0x244>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7ff fc2a 	bl	800361c <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dcc:	f7ff fc26 	bl	800361c <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e187      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dde:	4b1b      	ldr	r3, [pc, #108]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d036      	beq.n	8003e64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d016      	beq.n	8003e2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dfe:	4b15      	ldr	r3, [pc, #84]	@ (8003e54 <HAL_RCC_OscConfig+0x248>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e04:	f7ff fc0a 	bl	800361c <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e0c:	f7ff fc06 	bl	800361c <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e167      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e4c <HAL_RCC_OscConfig+0x240>)
 8003e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0x200>
 8003e2a:	e01b      	b.n	8003e64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e2c:	4b09      	ldr	r3, [pc, #36]	@ (8003e54 <HAL_RCC_OscConfig+0x248>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e32:	f7ff fbf3 	bl	800361c <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e38:	e00e      	b.n	8003e58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e3a:	f7ff fbef 	bl	800361c <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d907      	bls.n	8003e58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e150      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	42470000 	.word	0x42470000
 8003e54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e58:	4b88      	ldr	r3, [pc, #544]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1ea      	bne.n	8003e3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	f000 8097 	beq.w	8003fa0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e72:	2300      	movs	r3, #0
 8003e74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e76:	4b81      	ldr	r3, [pc, #516]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10f      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	4b7d      	ldr	r3, [pc, #500]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8a:	4a7c      	ldr	r2, [pc, #496]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e92:	4b7a      	ldr	r3, [pc, #488]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e9a:	60bb      	str	r3, [r7, #8]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea2:	4b77      	ldr	r3, [pc, #476]	@ (8004080 <HAL_RCC_OscConfig+0x474>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d118      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eae:	4b74      	ldr	r3, [pc, #464]	@ (8004080 <HAL_RCC_OscConfig+0x474>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a73      	ldr	r2, [pc, #460]	@ (8004080 <HAL_RCC_OscConfig+0x474>)
 8003eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eba:	f7ff fbaf 	bl	800361c <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec2:	f7ff fbab 	bl	800361c <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e10c      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed4:	4b6a      	ldr	r3, [pc, #424]	@ (8004080 <HAL_RCC_OscConfig+0x474>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d0f0      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d106      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x2ea>
 8003ee8:	4b64      	ldr	r3, [pc, #400]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eec:	4a63      	ldr	r2, [pc, #396]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003eee:	f043 0301 	orr.w	r3, r3, #1
 8003ef2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ef4:	e01c      	b.n	8003f30 <HAL_RCC_OscConfig+0x324>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b05      	cmp	r3, #5
 8003efc:	d10c      	bne.n	8003f18 <HAL_RCC_OscConfig+0x30c>
 8003efe:	4b5f      	ldr	r3, [pc, #380]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f02:	4a5e      	ldr	r2, [pc, #376]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f04:	f043 0304 	orr.w	r3, r3, #4
 8003f08:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f0a:	4b5c      	ldr	r3, [pc, #368]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0e:	4a5b      	ldr	r2, [pc, #364]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f10:	f043 0301 	orr.w	r3, r3, #1
 8003f14:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f16:	e00b      	b.n	8003f30 <HAL_RCC_OscConfig+0x324>
 8003f18:	4b58      	ldr	r3, [pc, #352]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f1c:	4a57      	ldr	r2, [pc, #348]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f1e:	f023 0301 	bic.w	r3, r3, #1
 8003f22:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f24:	4b55      	ldr	r3, [pc, #340]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f28:	4a54      	ldr	r2, [pc, #336]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f2a:	f023 0304 	bic.w	r3, r3, #4
 8003f2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d015      	beq.n	8003f64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f38:	f7ff fb70 	bl	800361c <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f40:	f7ff fb6c 	bl	800361c <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e0cb      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f56:	4b49      	ldr	r3, [pc, #292]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0ee      	beq.n	8003f40 <HAL_RCC_OscConfig+0x334>
 8003f62:	e014      	b.n	8003f8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f64:	f7ff fb5a 	bl	800361c <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f6a:	e00a      	b.n	8003f82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6c:	f7ff fb56 	bl	800361c <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e0b5      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f82:	4b3e      	ldr	r3, [pc, #248]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1ee      	bne.n	8003f6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f8e:	7dfb      	ldrb	r3, [r7, #23]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d105      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f94:	4b39      	ldr	r3, [pc, #228]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f98:	4a38      	ldr	r2, [pc, #224]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003f9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 80a1 	beq.w	80040ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003faa:	4b34      	ldr	r3, [pc, #208]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d05c      	beq.n	8004070 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d141      	bne.n	8004042 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fbe:	4b31      	ldr	r3, [pc, #196]	@ (8004084 <HAL_RCC_OscConfig+0x478>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc4:	f7ff fb2a 	bl	800361c <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fcc:	f7ff fb26 	bl	800361c <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e087      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fde:	4b27      	ldr	r3, [pc, #156]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1f0      	bne.n	8003fcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69da      	ldr	r2, [r3, #28]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	019b      	lsls	r3, r3, #6
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004000:	085b      	lsrs	r3, r3, #1
 8004002:	3b01      	subs	r3, #1
 8004004:	041b      	lsls	r3, r3, #16
 8004006:	431a      	orrs	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400c:	061b      	lsls	r3, r3, #24
 800400e:	491b      	ldr	r1, [pc, #108]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8004010:	4313      	orrs	r3, r2
 8004012:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004014:	4b1b      	ldr	r3, [pc, #108]	@ (8004084 <HAL_RCC_OscConfig+0x478>)
 8004016:	2201      	movs	r2, #1
 8004018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401a:	f7ff faff 	bl	800361c <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004022:	f7ff fafb 	bl	800361c <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e05c      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004034:	4b11      	ldr	r3, [pc, #68]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f0      	beq.n	8004022 <HAL_RCC_OscConfig+0x416>
 8004040:	e054      	b.n	80040ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004042:	4b10      	ldr	r3, [pc, #64]	@ (8004084 <HAL_RCC_OscConfig+0x478>)
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004048:	f7ff fae8 	bl	800361c <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004050:	f7ff fae4 	bl	800361c <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e045      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004062:	4b06      	ldr	r3, [pc, #24]	@ (800407c <HAL_RCC_OscConfig+0x470>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f0      	bne.n	8004050 <HAL_RCC_OscConfig+0x444>
 800406e:	e03d      	b.n	80040ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d107      	bne.n	8004088 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e038      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
 800407c:	40023800 	.word	0x40023800
 8004080:	40007000 	.word	0x40007000
 8004084:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004088:	4b1b      	ldr	r3, [pc, #108]	@ (80040f8 <HAL_RCC_OscConfig+0x4ec>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d028      	beq.n	80040e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d121      	bne.n	80040e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d11a      	bne.n	80040e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040b8:	4013      	ands	r3, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d111      	bne.n	80040e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ce:	085b      	lsrs	r3, r3, #1
 80040d0:	3b01      	subs	r3, #1
 80040d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d107      	bne.n	80040e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d001      	beq.n	80040ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e000      	b.n	80040ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	40023800 	.word	0x40023800

080040fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0cc      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004110:	4b68      	ldr	r3, [pc, #416]	@ (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d90c      	bls.n	8004138 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411e:	4b65      	ldr	r3, [pc, #404]	@ (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004126:	4b63      	ldr	r3, [pc, #396]	@ (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d001      	beq.n	8004138 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0b8      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d020      	beq.n	8004186 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004150:	4b59      	ldr	r3, [pc, #356]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	4a58      	ldr	r2, [pc, #352]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800415a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b00      	cmp	r3, #0
 8004166:	d005      	beq.n	8004174 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004168:	4b53      	ldr	r3, [pc, #332]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	4a52      	ldr	r2, [pc, #328]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004172:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004174:	4b50      	ldr	r3, [pc, #320]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	494d      	ldr	r1, [pc, #308]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	4313      	orrs	r3, r2
 8004184:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d044      	beq.n	800421c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d107      	bne.n	80041aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419a:	4b47      	ldr	r3, [pc, #284]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d119      	bne.n	80041da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e07f      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d003      	beq.n	80041ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d107      	bne.n	80041ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ba:	4b3f      	ldr	r3, [pc, #252]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e06f      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ca:	4b3b      	ldr	r3, [pc, #236]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e067      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041da:	4b37      	ldr	r3, [pc, #220]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f023 0203 	bic.w	r2, r3, #3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	4934      	ldr	r1, [pc, #208]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041ec:	f7ff fa16 	bl	800361c <HAL_GetTick>
 80041f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f2:	e00a      	b.n	800420a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041f4:	f7ff fa12 	bl	800361c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004202:	4293      	cmp	r3, r2
 8004204:	d901      	bls.n	800420a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e04f      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800420a:	4b2b      	ldr	r3, [pc, #172]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 020c 	and.w	r2, r3, #12
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	429a      	cmp	r2, r3
 800421a:	d1eb      	bne.n	80041f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800421c:	4b25      	ldr	r3, [pc, #148]	@ (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0307 	and.w	r3, r3, #7
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	429a      	cmp	r2, r3
 8004228:	d20c      	bcs.n	8004244 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422a:	4b22      	ldr	r3, [pc, #136]	@ (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	b2d2      	uxtb	r2, r2
 8004230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004232:	4b20      	ldr	r3, [pc, #128]	@ (80042b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	429a      	cmp	r2, r3
 800423e:	d001      	beq.n	8004244 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e032      	b.n	80042aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	d008      	beq.n	8004262 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004250:	4b19      	ldr	r3, [pc, #100]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4916      	ldr	r1, [pc, #88]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800425e:	4313      	orrs	r3, r2
 8004260:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0308 	and.w	r3, r3, #8
 800426a:	2b00      	cmp	r3, #0
 800426c:	d009      	beq.n	8004282 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800426e:	4b12      	ldr	r3, [pc, #72]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	490e      	ldr	r1, [pc, #56]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	4313      	orrs	r3, r2
 8004280:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004282:	f000 f821 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8004286:	4602      	mov	r2, r0
 8004288:	4b0b      	ldr	r3, [pc, #44]	@ (80042b8 <HAL_RCC_ClockConfig+0x1bc>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	091b      	lsrs	r3, r3, #4
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	490a      	ldr	r1, [pc, #40]	@ (80042bc <HAL_RCC_ClockConfig+0x1c0>)
 8004294:	5ccb      	ldrb	r3, [r1, r3]
 8004296:	fa22 f303 	lsr.w	r3, r2, r3
 800429a:	4a09      	ldr	r2, [pc, #36]	@ (80042c0 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800429e:	4b09      	ldr	r3, [pc, #36]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff f976 	bl	8003594 <HAL_InitTick>

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40023c00 	.word	0x40023c00
 80042b8:	40023800 	.word	0x40023800
 80042bc:	08009cc0 	.word	0x08009cc0
 80042c0:	20000024 	.word	0x20000024
 80042c4:	20000028 	.word	0x20000028

080042c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042cc:	b094      	sub	sp, #80	@ 0x50
 80042ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80042d0:	2300      	movs	r3, #0
 80042d2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042e0:	4b79      	ldr	r3, [pc, #484]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 030c 	and.w	r3, r3, #12
 80042e8:	2b08      	cmp	r3, #8
 80042ea:	d00d      	beq.n	8004308 <HAL_RCC_GetSysClockFreq+0x40>
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	f200 80e1 	bhi.w	80044b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d002      	beq.n	80042fc <HAL_RCC_GetSysClockFreq+0x34>
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d003      	beq.n	8004302 <HAL_RCC_GetSysClockFreq+0x3a>
 80042fa:	e0db      	b.n	80044b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042fc:	4b73      	ldr	r3, [pc, #460]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x204>)
 80042fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004300:	e0db      	b.n	80044ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004302:	4b73      	ldr	r3, [pc, #460]	@ (80044d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004304:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004306:	e0d8      	b.n	80044ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004308:	4b6f      	ldr	r3, [pc, #444]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004310:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004312:	4b6d      	ldr	r3, [pc, #436]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d063      	beq.n	80043e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800431e:	4b6a      	ldr	r3, [pc, #424]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	099b      	lsrs	r3, r3, #6
 8004324:	2200      	movs	r2, #0
 8004326:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004328:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800432a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004330:	633b      	str	r3, [r7, #48]	@ 0x30
 8004332:	2300      	movs	r3, #0
 8004334:	637b      	str	r3, [r7, #52]	@ 0x34
 8004336:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800433a:	4622      	mov	r2, r4
 800433c:	462b      	mov	r3, r5
 800433e:	f04f 0000 	mov.w	r0, #0
 8004342:	f04f 0100 	mov.w	r1, #0
 8004346:	0159      	lsls	r1, r3, #5
 8004348:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800434c:	0150      	lsls	r0, r2, #5
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4621      	mov	r1, r4
 8004354:	1a51      	subs	r1, r2, r1
 8004356:	6139      	str	r1, [r7, #16]
 8004358:	4629      	mov	r1, r5
 800435a:	eb63 0301 	sbc.w	r3, r3, r1
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800436c:	4659      	mov	r1, fp
 800436e:	018b      	lsls	r3, r1, #6
 8004370:	4651      	mov	r1, sl
 8004372:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004376:	4651      	mov	r1, sl
 8004378:	018a      	lsls	r2, r1, #6
 800437a:	4651      	mov	r1, sl
 800437c:	ebb2 0801 	subs.w	r8, r2, r1
 8004380:	4659      	mov	r1, fp
 8004382:	eb63 0901 	sbc.w	r9, r3, r1
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	f04f 0300 	mov.w	r3, #0
 800438e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004392:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004396:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800439a:	4690      	mov	r8, r2
 800439c:	4699      	mov	r9, r3
 800439e:	4623      	mov	r3, r4
 80043a0:	eb18 0303 	adds.w	r3, r8, r3
 80043a4:	60bb      	str	r3, [r7, #8]
 80043a6:	462b      	mov	r3, r5
 80043a8:	eb49 0303 	adc.w	r3, r9, r3
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043ba:	4629      	mov	r1, r5
 80043bc:	024b      	lsls	r3, r1, #9
 80043be:	4621      	mov	r1, r4
 80043c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043c4:	4621      	mov	r1, r4
 80043c6:	024a      	lsls	r2, r1, #9
 80043c8:	4610      	mov	r0, r2
 80043ca:	4619      	mov	r1, r3
 80043cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ce:	2200      	movs	r2, #0
 80043d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043d8:	f7fc fae4 	bl	80009a4 <__aeabi_uldivmod>
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4613      	mov	r3, r2
 80043e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043e4:	e058      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043e6:	4b38      	ldr	r3, [pc, #224]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	099b      	lsrs	r3, r3, #6
 80043ec:	2200      	movs	r2, #0
 80043ee:	4618      	mov	r0, r3
 80043f0:	4611      	mov	r1, r2
 80043f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043f6:	623b      	str	r3, [r7, #32]
 80043f8:	2300      	movs	r3, #0
 80043fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80043fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004400:	4642      	mov	r2, r8
 8004402:	464b      	mov	r3, r9
 8004404:	f04f 0000 	mov.w	r0, #0
 8004408:	f04f 0100 	mov.w	r1, #0
 800440c:	0159      	lsls	r1, r3, #5
 800440e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004412:	0150      	lsls	r0, r2, #5
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4641      	mov	r1, r8
 800441a:	ebb2 0a01 	subs.w	sl, r2, r1
 800441e:	4649      	mov	r1, r9
 8004420:	eb63 0b01 	sbc.w	fp, r3, r1
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	f04f 0300 	mov.w	r3, #0
 800442c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004430:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004434:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004438:	ebb2 040a 	subs.w	r4, r2, sl
 800443c:	eb63 050b 	sbc.w	r5, r3, fp
 8004440:	f04f 0200 	mov.w	r2, #0
 8004444:	f04f 0300 	mov.w	r3, #0
 8004448:	00eb      	lsls	r3, r5, #3
 800444a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800444e:	00e2      	lsls	r2, r4, #3
 8004450:	4614      	mov	r4, r2
 8004452:	461d      	mov	r5, r3
 8004454:	4643      	mov	r3, r8
 8004456:	18e3      	adds	r3, r4, r3
 8004458:	603b      	str	r3, [r7, #0]
 800445a:	464b      	mov	r3, r9
 800445c:	eb45 0303 	adc.w	r3, r5, r3
 8004460:	607b      	str	r3, [r7, #4]
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	f04f 0300 	mov.w	r3, #0
 800446a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800446e:	4629      	mov	r1, r5
 8004470:	028b      	lsls	r3, r1, #10
 8004472:	4621      	mov	r1, r4
 8004474:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004478:	4621      	mov	r1, r4
 800447a:	028a      	lsls	r2, r1, #10
 800447c:	4610      	mov	r0, r2
 800447e:	4619      	mov	r1, r3
 8004480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004482:	2200      	movs	r2, #0
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	61fa      	str	r2, [r7, #28]
 8004488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800448c:	f7fc fa8a 	bl	80009a4 <__aeabi_uldivmod>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4613      	mov	r3, r2
 8004496:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004498:	4b0b      	ldr	r3, [pc, #44]	@ (80044c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	0c1b      	lsrs	r3, r3, #16
 800449e:	f003 0303 	and.w	r3, r3, #3
 80044a2:	3301      	adds	r3, #1
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80044a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044b2:	e002      	b.n	80044ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044b4:	4b05      	ldr	r3, [pc, #20]	@ (80044cc <HAL_RCC_GetSysClockFreq+0x204>)
 80044b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3750      	adds	r7, #80	@ 0x50
 80044c0:	46bd      	mov	sp, r7
 80044c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044c6:	bf00      	nop
 80044c8:	40023800 	.word	0x40023800
 80044cc:	00f42400 	.word	0x00f42400
 80044d0:	007a1200 	.word	0x007a1200

080044d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e07b      	b.n	80045de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d108      	bne.n	8004500 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044f6:	d009      	beq.n	800450c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	61da      	str	r2, [r3, #28]
 80044fe:	e005      	b.n	800450c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fe feba 	bl	80032a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004542:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	699b      	ldr	r3, [r3, #24]
 8004578:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004590:	ea42 0103 	orr.w	r1, r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004598:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	0c1b      	lsrs	r3, r3, #16
 80045aa:	f003 0104 	and.w	r1, r3, #4
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b2:	f003 0210 	and.w	r2, r3, #16
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b088      	sub	sp, #32
 80045ea:	af02      	add	r7, sp, #8
 80045ec:	60f8      	str	r0, [r7, #12]
 80045ee:	60b9      	str	r1, [r7, #8]
 80045f0:	603b      	str	r3, [r7, #0]
 80045f2:	4613      	mov	r3, r2
 80045f4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d001      	beq.n	8004606 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8004602:	2302      	movs	r3, #2
 8004604:	e104      	b.n	8004810 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800460e:	d112      	bne.n	8004636 <HAL_SPI_Receive+0x50>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10e      	bne.n	8004636 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2204      	movs	r2, #4
 800461c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004620:	88fa      	ldrh	r2, [r7, #6]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	4613      	mov	r3, r2
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	68b9      	ldr	r1, [r7, #8]
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f8f3 	bl	8004818 <HAL_SPI_TransmitReceive>
 8004632:	4603      	mov	r3, r0
 8004634:	e0ec      	b.n	8004810 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004636:	f7fe fff1 	bl	800361c <HAL_GetTick>
 800463a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_SPI_Receive+0x62>
 8004642:	88fb      	ldrh	r3, [r7, #6]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0e1      	b.n	8004810 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_SPI_Receive+0x74>
 8004656:	2302      	movs	r3, #2
 8004658:	e0da      	b.n	8004810 <HAL_SPI_Receive+0x22a>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2204      	movs	r2, #4
 8004666:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	88fa      	ldrh	r2, [r7, #6]
 800467a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	88fa      	ldrh	r2, [r7, #6]
 8004680:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046a8:	d10f      	bne.n	80046ca <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80046c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d4:	2b40      	cmp	r3, #64	@ 0x40
 80046d6:	d007      	beq.n	80046e8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d170      	bne.n	80047d2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80046f0:	e035      	b.n	800475e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d115      	bne.n	800472c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f103 020c 	add.w	r2, r3, #12
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470c:	7812      	ldrb	r2, [r2, #0]
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004716:	1c5a      	adds	r2, r3, #1
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004720:	b29b      	uxth	r3, r3
 8004722:	3b01      	subs	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800472a:	e018      	b.n	800475e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800472c:	f7fe ff76 	bl	800361c <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d803      	bhi.n	8004744 <HAL_SPI_Receive+0x15e>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004742:	d102      	bne.n	800474a <HAL_SPI_Receive+0x164>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d109      	bne.n	800475e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e058      	b.n	8004810 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1c4      	bne.n	80046f2 <HAL_SPI_Receive+0x10c>
 8004768:	e038      	b.n	80047dc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b01      	cmp	r3, #1
 8004776:	d113      	bne.n	80047a0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004782:	b292      	uxth	r2, r2
 8004784:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478a:	1c9a      	adds	r2, r3, #2
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004794:	b29b      	uxth	r3, r3
 8004796:	3b01      	subs	r3, #1
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800479e:	e018      	b.n	80047d2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047a0:	f7fe ff3c 	bl	800361c <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d803      	bhi.n	80047b8 <HAL_SPI_Receive+0x1d2>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b6:	d102      	bne.n	80047be <HAL_SPI_Receive+0x1d8>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d109      	bne.n	80047d2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e01e      	b.n	8004810 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1c6      	bne.n	800476a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	6839      	ldr	r1, [r7, #0]
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 fa4b 	bl	8004c7c <SPI_EndRxTransaction>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800480e:	2300      	movs	r3, #0
  }
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	@ 0x28
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004826:	2301      	movs	r3, #1
 8004828:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800482a:	f7fe fef7 	bl	800361c <HAL_GetTick>
 800482e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004836:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800483e:	887b      	ldrh	r3, [r7, #2]
 8004840:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004842:	7ffb      	ldrb	r3, [r7, #31]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d00c      	beq.n	8004862 <HAL_SPI_TransmitReceive+0x4a>
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800484e:	d106      	bne.n	800485e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d102      	bne.n	800485e <HAL_SPI_TransmitReceive+0x46>
 8004858:	7ffb      	ldrb	r3, [r7, #31]
 800485a:	2b04      	cmp	r3, #4
 800485c:	d001      	beq.n	8004862 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800485e:	2302      	movs	r3, #2
 8004860:	e17f      	b.n	8004b62 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <HAL_SPI_TransmitReceive+0x5c>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d002      	beq.n	8004874 <HAL_SPI_TransmitReceive+0x5c>
 800486e:	887b      	ldrh	r3, [r7, #2]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d101      	bne.n	8004878 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e174      	b.n	8004b62 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_SPI_TransmitReceive+0x6e>
 8004882:	2302      	movs	r3, #2
 8004884:	e16d      	b.n	8004b62 <HAL_SPI_TransmitReceive+0x34a>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b04      	cmp	r3, #4
 8004898:	d003      	beq.n	80048a2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2205      	movs	r2, #5
 800489e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	887a      	ldrh	r2, [r7, #2]
 80048b2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	887a      	ldrh	r2, [r7, #2]
 80048b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	887a      	ldrh	r2, [r7, #2]
 80048c4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	887a      	ldrh	r2, [r7, #2]
 80048ca:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048e2:	2b40      	cmp	r3, #64	@ 0x40
 80048e4:	d007      	beq.n	80048f6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048fe:	d17e      	bne.n	80049fe <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <HAL_SPI_TransmitReceive+0xf6>
 8004908:	8afb      	ldrh	r3, [r7, #22]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d16c      	bne.n	80049e8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004912:	881a      	ldrh	r2, [r3, #0]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800491e:	1c9a      	adds	r2, r3, #2
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004928:	b29b      	uxth	r3, r3
 800492a:	3b01      	subs	r3, #1
 800492c:	b29a      	uxth	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004932:	e059      	b.n	80049e8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b02      	cmp	r3, #2
 8004940:	d11b      	bne.n	800497a <HAL_SPI_TransmitReceive+0x162>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004946:	b29b      	uxth	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d016      	beq.n	800497a <HAL_SPI_TransmitReceive+0x162>
 800494c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494e:	2b01      	cmp	r3, #1
 8004950:	d113      	bne.n	800497a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004956:	881a      	ldrh	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004962:	1c9a      	adds	r2, r3, #2
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	2b01      	cmp	r3, #1
 8004986:	d119      	bne.n	80049bc <HAL_SPI_TransmitReceive+0x1a4>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d014      	beq.n	80049bc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499c:	b292      	uxth	r2, r2
 800499e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a4:	1c9a      	adds	r2, r3, #2
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	3b01      	subs	r3, #1
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049b8:	2301      	movs	r3, #1
 80049ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049bc:	f7fe fe2e 	bl	800361c <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d80d      	bhi.n	80049e8 <HAL_SPI_TransmitReceive+0x1d0>
 80049cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d2:	d009      	beq.n	80049e8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e0bc      	b.n	8004b62 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1a0      	bne.n	8004934 <HAL_SPI_TransmitReceive+0x11c>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d19b      	bne.n	8004934 <HAL_SPI_TransmitReceive+0x11c>
 80049fc:	e082      	b.n	8004b04 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <HAL_SPI_TransmitReceive+0x1f4>
 8004a06:	8afb      	ldrh	r3, [r7, #22]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d171      	bne.n	8004af0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	7812      	ldrb	r2, [r2, #0]
 8004a18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a32:	e05d      	b.n	8004af0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d11c      	bne.n	8004a7c <HAL_SPI_TransmitReceive+0x264>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d017      	beq.n	8004a7c <HAL_SPI_TransmitReceive+0x264>
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d114      	bne.n	8004a7c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	330c      	adds	r3, #12
 8004a5c:	7812      	ldrb	r2, [r2, #0]
 8004a5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a64:	1c5a      	adds	r2, r3, #1
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d119      	bne.n	8004abe <HAL_SPI_TransmitReceive+0x2a6>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d014      	beq.n	8004abe <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004aba:	2301      	movs	r3, #1
 8004abc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004abe:	f7fe fdad 	bl	800361c <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d803      	bhi.n	8004ad6 <HAL_SPI_TransmitReceive+0x2be>
 8004ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad4:	d102      	bne.n	8004adc <HAL_SPI_TransmitReceive+0x2c4>
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d109      	bne.n	8004af0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e038      	b.n	8004b62 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d19c      	bne.n	8004a34 <HAL_SPI_TransmitReceive+0x21c>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d197      	bne.n	8004a34 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b04:	6a3a      	ldr	r2, [r7, #32]
 8004b06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f91d 	bl	8004d48 <SPI_EndRxTxTransaction>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d008      	beq.n	8004b26 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e01d      	b.n	8004b62 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10a      	bne.n	8004b44 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b2e:	2300      	movs	r3, #0
 8004b30:	613b      	str	r3, [r7, #16]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	613b      	str	r3, [r7, #16]
 8004b42:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e000      	b.n	8004b62 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004b60:	2300      	movs	r3, #0
  }
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3728      	adds	r7, #40	@ 0x28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
	...

08004b6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b088      	sub	sp, #32
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b7c:	f7fe fd4e 	bl	800361c <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	683a      	ldr	r2, [r7, #0]
 8004b88:	4413      	add	r3, r2
 8004b8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b8c:	f7fe fd46 	bl	800361c <HAL_GetTick>
 8004b90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b92:	4b39      	ldr	r3, [pc, #228]	@ (8004c78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	015b      	lsls	r3, r3, #5
 8004b98:	0d1b      	lsrs	r3, r3, #20
 8004b9a:	69fa      	ldr	r2, [r7, #28]
 8004b9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ba0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ba2:	e054      	b.n	8004c4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004baa:	d050      	beq.n	8004c4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004bac:	f7fe fd36 	bl	800361c <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	69fa      	ldr	r2, [r7, #28]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d902      	bls.n	8004bc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d13d      	bne.n	8004c3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004bd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004bda:	d111      	bne.n	8004c00 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004be4:	d004      	beq.n	8004bf0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bee:	d107      	bne.n	8004c00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c08:	d10f      	bne.n	8004c2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004c28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e017      	b.n	8004c6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	4013      	ands	r3, r2
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	bf0c      	ite	eq
 8004c5e:	2301      	moveq	r3, #1
 8004c60:	2300      	movne	r3, #0
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	461a      	mov	r2, r3
 8004c66:	79fb      	ldrb	r3, [r7, #7]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d19b      	bne.n	8004ba4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3720      	adds	r7, #32
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20000024 	.word	0x20000024

08004c7c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af02      	add	r7, sp, #8
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c90:	d111      	bne.n	8004cb6 <SPI_EndRxTransaction+0x3a>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c9a:	d004      	beq.n	8004ca6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ca4:	d107      	bne.n	8004cb6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cb4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cbe:	d12a      	bne.n	8004d16 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc8:	d012      	beq.n	8004cf0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2180      	movs	r1, #128	@ 0x80
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f7ff ff49 	bl	8004b6c <SPI_WaitFlagStateUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d02d      	beq.n	8004d3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ce4:	f043 0220 	orr.w	r2, r3, #32
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e026      	b.n	8004d3e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	2101      	movs	r1, #1
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f7ff ff36 	bl	8004b6c <SPI_WaitFlagStateUntilTimeout>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d01a      	beq.n	8004d3c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0a:	f043 0220 	orr.w	r2, r3, #32
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e013      	b.n	8004d3e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2101      	movs	r1, #1
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f7ff ff23 	bl	8004b6c <SPI_WaitFlagStateUntilTimeout>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d007      	beq.n	8004d3c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d30:	f043 0220 	orr.w	r2, r3, #32
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e000      	b.n	8004d3e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af02      	add	r7, sp, #8
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	2102      	movs	r1, #2
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f7ff ff04 	bl	8004b6c <SPI_WaitFlagStateUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d007      	beq.n	8004d7a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6e:	f043 0220 	orr.w	r2, r3, #32
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e032      	b.n	8004de0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004de8 <SPI_EndRxTxTransaction+0xa0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8004dec <SPI_EndRxTxTransaction+0xa4>)
 8004d80:	fba2 2303 	umull	r2, r3, r2, r3
 8004d84:	0d5b      	lsrs	r3, r3, #21
 8004d86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d98:	d112      	bne.n	8004dc0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	2200      	movs	r2, #0
 8004da2:	2180      	movs	r1, #128	@ 0x80
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f7ff fee1 	bl	8004b6c <SPI_WaitFlagStateUntilTimeout>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d016      	beq.n	8004dde <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db4:	f043 0220 	orr.w	r2, r3, #32
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e00f      	b.n	8004de0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dd6:	2b80      	cmp	r3, #128	@ 0x80
 8004dd8:	d0f2      	beq.n	8004dc0 <SPI_EndRxTxTransaction+0x78>
 8004dda:	e000      	b.n	8004dde <SPI_EndRxTxTransaction+0x96>
        break;
 8004ddc:	bf00      	nop
  }

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20000024 	.word	0x20000024
 8004dec:	165e9f81 	.word	0x165e9f81

08004df0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e038      	b.n	8004e78 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f7fc fc7c 	bl	8001718 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	3308      	adds	r3, #8
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	f000 fc9e 	bl	800576c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6818      	ldr	r0, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	68b9      	ldr	r1, [r7, #8]
 8004e3c:	f000 fd00 	bl	8005840 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6858      	ldr	r0, [r3, #4]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e4c:	6879      	ldr	r1, [r7, #4]
 8004e4e:	f000 fd2d 	bl	80058ac <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	6892      	ldr	r2, [r2, #8]
 8004e5a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	6892      	ldr	r2, [r2, #8]
 8004e66:	f041 0101 	orr.w	r1, r1, #1
 8004e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e041      	b.n	8004f16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fe fb02 	bl	80034b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	f000 fa7e 	bl	80053c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d001      	beq.n	8004f38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e04e      	b.n	8004fd6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a23      	ldr	r2, [pc, #140]	@ (8004fe4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d022      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x80>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f62:	d01d      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x80>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a1f      	ldr	r2, [pc, #124]	@ (8004fe8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d018      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x80>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a1e      	ldr	r2, [pc, #120]	@ (8004fec <HAL_TIM_Base_Start_IT+0xcc>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d013      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x80>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00e      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x80>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d009      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x80>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a19      	ldr	r2, [pc, #100]	@ (8004ff8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d004      	beq.n	8004fa0 <HAL_TIM_Base_Start_IT+0x80>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a18      	ldr	r2, [pc, #96]	@ (8004ffc <HAL_TIM_Base_Start_IT+0xdc>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d111      	bne.n	8004fc4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b06      	cmp	r3, #6
 8004fb0:	d010      	beq.n	8004fd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0201 	orr.w	r2, r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fc2:	e007      	b.n	8004fd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	40010000 	.word	0x40010000
 8004fe8:	40000400 	.word	0x40000400
 8004fec:	40000800 	.word	0x40000800
 8004ff0:	40000c00 	.word	0x40000c00
 8004ff4:	40010400 	.word	0x40010400
 8004ff8:	40014000 	.word	0x40014000
 8004ffc:	40001800 	.word	0x40001800

08005000 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d020      	beq.n	8005064 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d01b      	beq.n	8005064 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f06f 0202 	mvn.w	r2, #2
 8005034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f999 	bl	8005382 <HAL_TIM_IC_CaptureCallback>
 8005050:	e005      	b.n	800505e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f98b 	bl	800536e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f99c 	bl	8005396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	2b00      	cmp	r3, #0
 800506c:	d020      	beq.n	80050b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	d01b      	beq.n	80050b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f06f 0204 	mvn.w	r2, #4
 8005080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2202      	movs	r2, #2
 8005086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f973 	bl	8005382 <HAL_TIM_IC_CaptureCallback>
 800509c:	e005      	b.n	80050aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f965 	bl	800536e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f976 	bl	8005396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d020      	beq.n	80050fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f003 0308 	and.w	r3, r3, #8
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d01b      	beq.n	80050fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f06f 0208 	mvn.w	r2, #8
 80050cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2204      	movs	r2, #4
 80050d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f94d 	bl	8005382 <HAL_TIM_IC_CaptureCallback>
 80050e8:	e005      	b.n	80050f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f93f 	bl	800536e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f950 	bl	8005396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f003 0310 	and.w	r3, r3, #16
 8005102:	2b00      	cmp	r3, #0
 8005104:	d020      	beq.n	8005148 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f003 0310 	and.w	r3, r3, #16
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01b      	beq.n	8005148 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f06f 0210 	mvn.w	r2, #16
 8005118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2208      	movs	r2, #8
 800511e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f927 	bl	8005382 <HAL_TIM_IC_CaptureCallback>
 8005134:	e005      	b.n	8005142 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f919 	bl	800536e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f92a 	bl	8005396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00c      	beq.n	800516c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	2b00      	cmp	r3, #0
 800515a:	d007      	beq.n	800516c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0201 	mvn.w	r2, #1
 8005164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7fd ffec 	bl	8003144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00c      	beq.n	8005190 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800517c:	2b00      	cmp	r3, #0
 800517e:	d007      	beq.n	8005190 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fae4 	bl	8005758 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00c      	beq.n	80051b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d007      	beq.n	80051b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f8fb 	bl	80053aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00c      	beq.n	80051d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d007      	beq.n	80051d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f06f 0220 	mvn.w	r2, #32
 80051d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fab6 	bl	8005744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051d8:	bf00      	nop
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_TIM_ConfigClockSource+0x1c>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e0b4      	b.n	8005366 <HAL_TIM_ConfigClockSource+0x186>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800521a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005222:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005234:	d03e      	beq.n	80052b4 <HAL_TIM_ConfigClockSource+0xd4>
 8005236:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800523a:	f200 8087 	bhi.w	800534c <HAL_TIM_ConfigClockSource+0x16c>
 800523e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005242:	f000 8086 	beq.w	8005352 <HAL_TIM_ConfigClockSource+0x172>
 8005246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800524a:	d87f      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
 800524c:	2b70      	cmp	r3, #112	@ 0x70
 800524e:	d01a      	beq.n	8005286 <HAL_TIM_ConfigClockSource+0xa6>
 8005250:	2b70      	cmp	r3, #112	@ 0x70
 8005252:	d87b      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
 8005254:	2b60      	cmp	r3, #96	@ 0x60
 8005256:	d050      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0x11a>
 8005258:	2b60      	cmp	r3, #96	@ 0x60
 800525a:	d877      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
 800525c:	2b50      	cmp	r3, #80	@ 0x50
 800525e:	d03c      	beq.n	80052da <HAL_TIM_ConfigClockSource+0xfa>
 8005260:	2b50      	cmp	r3, #80	@ 0x50
 8005262:	d873      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
 8005264:	2b40      	cmp	r3, #64	@ 0x40
 8005266:	d058      	beq.n	800531a <HAL_TIM_ConfigClockSource+0x13a>
 8005268:	2b40      	cmp	r3, #64	@ 0x40
 800526a:	d86f      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
 800526c:	2b30      	cmp	r3, #48	@ 0x30
 800526e:	d064      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x15a>
 8005270:	2b30      	cmp	r3, #48	@ 0x30
 8005272:	d86b      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
 8005274:	2b20      	cmp	r3, #32
 8005276:	d060      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x15a>
 8005278:	2b20      	cmp	r3, #32
 800527a:	d867      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
 800527c:	2b00      	cmp	r3, #0
 800527e:	d05c      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x15a>
 8005280:	2b10      	cmp	r3, #16
 8005282:	d05a      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x15a>
 8005284:	e062      	b.n	800534c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005296:	f000 f9b9 	bl	800560c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80052a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	609a      	str	r2, [r3, #8]
      break;
 80052b2:	e04f      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052c4:	f000 f9a2 	bl	800560c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052d6:	609a      	str	r2, [r3, #8]
      break;
 80052d8:	e03c      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e6:	461a      	mov	r2, r3
 80052e8:	f000 f916 	bl	8005518 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2150      	movs	r1, #80	@ 0x50
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 f96f 	bl	80055d6 <TIM_ITRx_SetConfig>
      break;
 80052f8:	e02c      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005306:	461a      	mov	r2, r3
 8005308:	f000 f935 	bl	8005576 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2160      	movs	r1, #96	@ 0x60
 8005312:	4618      	mov	r0, r3
 8005314:	f000 f95f 	bl	80055d6 <TIM_ITRx_SetConfig>
      break;
 8005318:	e01c      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005326:	461a      	mov	r2, r3
 8005328:	f000 f8f6 	bl	8005518 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2140      	movs	r1, #64	@ 0x40
 8005332:	4618      	mov	r0, r3
 8005334:	f000 f94f 	bl	80055d6 <TIM_ITRx_SetConfig>
      break;
 8005338:	e00c      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4619      	mov	r1, r3
 8005344:	4610      	mov	r0, r2
 8005346:	f000 f946 	bl	80055d6 <TIM_ITRx_SetConfig>
      break;
 800534a:	e003      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	73fb      	strb	r3, [r7, #15]
      break;
 8005350:	e000      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005352:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005364:	7bfb      	ldrb	r3, [r7, #15]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005376:	bf00      	nop
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005382:	b480      	push	{r7}
 8005384:	b083      	sub	sp, #12
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a46      	ldr	r2, [pc, #280]	@ (80054ec <TIM_Base_SetConfig+0x12c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d013      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053de:	d00f      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a43      	ldr	r2, [pc, #268]	@ (80054f0 <TIM_Base_SetConfig+0x130>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00b      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a42      	ldr	r2, [pc, #264]	@ (80054f4 <TIM_Base_SetConfig+0x134>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d007      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a41      	ldr	r2, [pc, #260]	@ (80054f8 <TIM_Base_SetConfig+0x138>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d003      	beq.n	8005400 <TIM_Base_SetConfig+0x40>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a40      	ldr	r2, [pc, #256]	@ (80054fc <TIM_Base_SetConfig+0x13c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d108      	bne.n	8005412 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a35      	ldr	r2, [pc, #212]	@ (80054ec <TIM_Base_SetConfig+0x12c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d02b      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005420:	d027      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a32      	ldr	r2, [pc, #200]	@ (80054f0 <TIM_Base_SetConfig+0x130>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d023      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a31      	ldr	r2, [pc, #196]	@ (80054f4 <TIM_Base_SetConfig+0x134>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d01f      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a30      	ldr	r2, [pc, #192]	@ (80054f8 <TIM_Base_SetConfig+0x138>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d01b      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a2f      	ldr	r2, [pc, #188]	@ (80054fc <TIM_Base_SetConfig+0x13c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d017      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a2e      	ldr	r2, [pc, #184]	@ (8005500 <TIM_Base_SetConfig+0x140>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d013      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a2d      	ldr	r2, [pc, #180]	@ (8005504 <TIM_Base_SetConfig+0x144>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d00f      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a2c      	ldr	r2, [pc, #176]	@ (8005508 <TIM_Base_SetConfig+0x148>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00b      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a2b      	ldr	r2, [pc, #172]	@ (800550c <TIM_Base_SetConfig+0x14c>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d007      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a2a      	ldr	r2, [pc, #168]	@ (8005510 <TIM_Base_SetConfig+0x150>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d003      	beq.n	8005472 <TIM_Base_SetConfig+0xb2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a29      	ldr	r2, [pc, #164]	@ (8005514 <TIM_Base_SetConfig+0x154>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d108      	bne.n	8005484 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4313      	orrs	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	4313      	orrs	r3, r2
 8005490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a10      	ldr	r2, [pc, #64]	@ (80054ec <TIM_Base_SetConfig+0x12c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d003      	beq.n	80054b8 <TIM_Base_SetConfig+0xf8>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a12      	ldr	r2, [pc, #72]	@ (80054fc <TIM_Base_SetConfig+0x13c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d103      	bne.n	80054c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d105      	bne.n	80054de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f023 0201 	bic.w	r2, r3, #1
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	611a      	str	r2, [r3, #16]
  }
}
 80054de:	bf00      	nop
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40010000 	.word	0x40010000
 80054f0:	40000400 	.word	0x40000400
 80054f4:	40000800 	.word	0x40000800
 80054f8:	40000c00 	.word	0x40000c00
 80054fc:	40010400 	.word	0x40010400
 8005500:	40014000 	.word	0x40014000
 8005504:	40014400 	.word	0x40014400
 8005508:	40014800 	.word	0x40014800
 800550c:	40001800 	.word	0x40001800
 8005510:	40001c00 	.word	0x40001c00
 8005514:	40002000 	.word	0x40002000

08005518 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	f023 0201 	bic.w	r2, r3, #1
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	011b      	lsls	r3, r3, #4
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	4313      	orrs	r3, r2
 800554c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f023 030a 	bic.w	r3, r3, #10
 8005554:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	4313      	orrs	r3, r2
 800555c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	621a      	str	r2, [r3, #32]
}
 800556a:	bf00      	nop
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005576:	b480      	push	{r7}
 8005578:	b087      	sub	sp, #28
 800557a:	af00      	add	r7, sp, #0
 800557c:	60f8      	str	r0, [r7, #12]
 800557e:	60b9      	str	r1, [r7, #8]
 8005580:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	f023 0210 	bic.w	r2, r3, #16
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	031b      	lsls	r3, r3, #12
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	621a      	str	r2, [r3, #32]
}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	f043 0307 	orr.w	r3, r3, #7
 80055f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	609a      	str	r2, [r3, #8]
}
 8005600:	bf00      	nop
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005626:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	021a      	lsls	r2, r3, #8
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	431a      	orrs	r2, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4313      	orrs	r3, r2
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	609a      	str	r2, [r3, #8]
}
 8005640:	bf00      	nop
 8005642:	371c      	adds	r7, #28
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005660:	2302      	movs	r3, #2
 8005662:	e05a      	b.n	800571a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800568a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68fa      	ldr	r2, [r7, #12]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a21      	ldr	r2, [pc, #132]	@ (8005728 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d022      	beq.n	80056ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056b0:	d01d      	beq.n	80056ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a1d      	ldr	r2, [pc, #116]	@ (800572c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d018      	beq.n	80056ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005730 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d013      	beq.n	80056ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a1a      	ldr	r2, [pc, #104]	@ (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d00e      	beq.n	80056ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a18      	ldr	r2, [pc, #96]	@ (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d009      	beq.n	80056ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a17      	ldr	r2, [pc, #92]	@ (800573c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d004      	beq.n	80056ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a15      	ldr	r2, [pc, #84]	@ (8005740 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d10c      	bne.n	8005708 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	40010000 	.word	0x40010000
 800572c:	40000400 	.word	0x40000400
 8005730:	40000800 	.word	0x40000800
 8005734:	40000c00 	.word	0x40000c00
 8005738:	40010400 	.word	0x40010400
 800573c:	40014000 	.word	0x40014000
 8005740:	40001800 	.word	0x40001800

08005744 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005760:	bf00      	nop
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	6812      	ldr	r2, [r2, #0]
 8005784:	f023 0101 	bic.w	r1, r3, #1
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	2b08      	cmp	r3, #8
 8005794:	d102      	bne.n	800579c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005796:	2340      	movs	r3, #64	@ 0x40
 8005798:	617b      	str	r3, [r7, #20]
 800579a:	e001      	b.n	80057a0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800579c:	2300      	movs	r3, #0
 800579e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80057ac:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80057b2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80057b8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80057be:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80057c4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80057ca:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 80057d0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 80057d6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 80057dc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 80057e2:	4313      	orrs	r3, r2
 80057e4:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80057fa:	4b10      	ldr	r3, [pc, #64]	@ (800583c <FSMC_NORSRAM_Init+0xd0>)
 80057fc:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005804:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800580c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	43db      	mvns	r3, r3
 800581c:	ea02 0103 	and.w	r1, r2, r3
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	4319      	orrs	r1, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	371c      	adds	r7, #28
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	0008fb7f 	.word	0x0008fb7f

08005840 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	1c5a      	adds	r2, r3, #1
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005856:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	431a      	orrs	r2, r3
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	021b      	lsls	r3, r3, #8
 800586c:	431a      	orrs	r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	041b      	lsls	r3, r3, #16
 8005874:	431a      	orrs	r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	3b01      	subs	r3, #1
 800587c:	051b      	lsls	r3, r3, #20
 800587e:	431a      	orrs	r2, r3
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	3b02      	subs	r3, #2
 8005886:	061b      	lsls	r3, r3, #24
 8005888:	431a      	orrs	r2, r3
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	4313      	orrs	r3, r2
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	3201      	adds	r2, #1
 8005894:	4319      	orrs	r1, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
	...

080058ac <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058c0:	d11d      	bne.n	80058fe <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80058ca:	4b13      	ldr	r3, [pc, #76]	@ (8005918 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	6811      	ldr	r1, [r2, #0]
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	6852      	ldr	r2, [r2, #4]
 80058d6:	0112      	lsls	r2, r2, #4
 80058d8:	4311      	orrs	r1, r2
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	6892      	ldr	r2, [r2, #8]
 80058de:	0212      	lsls	r2, r2, #8
 80058e0:	4311      	orrs	r1, r2
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	6992      	ldr	r2, [r2, #24]
 80058e6:	4311      	orrs	r1, r2
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	68d2      	ldr	r2, [r2, #12]
 80058ec:	0412      	lsls	r2, r2, #16
 80058ee:	430a      	orrs	r2, r1
 80058f0:	ea43 0102 	orr.w	r1, r3, r2
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80058fc:	e005      	b.n	800590a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8005906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	cff00000 	.word	0xcff00000

0800591c <memset>:
 800591c:	4402      	add	r2, r0
 800591e:	4603      	mov	r3, r0
 8005920:	4293      	cmp	r3, r2
 8005922:	d100      	bne.n	8005926 <memset+0xa>
 8005924:	4770      	bx	lr
 8005926:	f803 1b01 	strb.w	r1, [r3], #1
 800592a:	e7f9      	b.n	8005920 <memset+0x4>

0800592c <__libc_init_array>:
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	4d0d      	ldr	r5, [pc, #52]	@ (8005964 <__libc_init_array+0x38>)
 8005930:	4c0d      	ldr	r4, [pc, #52]	@ (8005968 <__libc_init_array+0x3c>)
 8005932:	1b64      	subs	r4, r4, r5
 8005934:	10a4      	asrs	r4, r4, #2
 8005936:	2600      	movs	r6, #0
 8005938:	42a6      	cmp	r6, r4
 800593a:	d109      	bne.n	8005950 <__libc_init_array+0x24>
 800593c:	4d0b      	ldr	r5, [pc, #44]	@ (800596c <__libc_init_array+0x40>)
 800593e:	4c0c      	ldr	r4, [pc, #48]	@ (8005970 <__libc_init_array+0x44>)
 8005940:	f000 f818 	bl	8005974 <_init>
 8005944:	1b64      	subs	r4, r4, r5
 8005946:	10a4      	asrs	r4, r4, #2
 8005948:	2600      	movs	r6, #0
 800594a:	42a6      	cmp	r6, r4
 800594c:	d105      	bne.n	800595a <__libc_init_array+0x2e>
 800594e:	bd70      	pop	{r4, r5, r6, pc}
 8005950:	f855 3b04 	ldr.w	r3, [r5], #4
 8005954:	4798      	blx	r3
 8005956:	3601      	adds	r6, #1
 8005958:	e7ee      	b.n	8005938 <__libc_init_array+0xc>
 800595a:	f855 3b04 	ldr.w	r3, [r5], #4
 800595e:	4798      	blx	r3
 8005960:	3601      	adds	r6, #1
 8005962:	e7f2      	b.n	800594a <__libc_init_array+0x1e>
 8005964:	08009cd8 	.word	0x08009cd8
 8005968:	08009cd8 	.word	0x08009cd8
 800596c:	08009cd8 	.word	0x08009cd8
 8005970:	08009cdc 	.word	0x08009cdc

08005974 <_init>:
 8005974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005976:	bf00      	nop
 8005978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597a:	bc08      	pop	{r3}
 800597c:	469e      	mov	lr, r3
 800597e:	4770      	bx	lr

08005980 <_fini>:
 8005980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005982:	bf00      	nop
 8005984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005986:	bc08      	pop	{r3}
 8005988:	469e      	mov	lr, r3
 800598a:	4770      	bx	lr
